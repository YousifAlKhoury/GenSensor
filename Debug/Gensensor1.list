
Gensensor1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008784  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000590  08008928  08008928  00018928  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008eb8  08008eb8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008eb8  08008eb8  00018eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ec0  08008ec0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ec0  08008ec0  00018ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ec4  08008ec4  00018ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008ec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  200001e4  080090ac  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  080090ac  000203e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f08  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000248d  00000000  00000000  0003211c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe8  00000000  00000000  000345b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f18  00000000  00000000  00035598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f45  00000000  00000000  000364b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d4c  00000000  00000000  0004e3f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009195b  00000000  00000000  00061141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2a9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005568  00000000  00000000  000f2aec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800890c 	.word	0x0800890c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800890c 	.word	0x0800890c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <BH1750_Init>:

//
//	Initialization.
//
BH1750_STATUS BH1750_Init(I2C_HandleTypeDef *hi2c)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	bh1750_i2c = hi2c;
 8000f64:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <BH1750_Init+0x34>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6013      	str	r3, [r2, #0]
	if(BH1750_OK == BH1750_Reset())
 8000f6a:	f000 f813 	bl	8000f94 <BH1750_Reset>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d107      	bne.n	8000f84 <BH1750_Init+0x28>
	{
		if(BH1750_OK == BH1750_SetMtreg(BH1750_DEFAULT_MTREG)) // Set default value;
 8000f74:	2045      	movs	r0, #69	; 0x45
 8000f76:	f000 f859 	bl	800102c <BH1750_SetMtreg>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d101      	bne.n	8000f84 <BH1750_Init+0x28>
			return BH1750_OK;
 8000f80:	2300      	movs	r3, #0
 8000f82:	e000      	b.n	8000f86 <BH1750_Init+0x2a>
	}
	return BH1750_ERROR;
 8000f84:	2301      	movs	r3, #1
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000200 	.word	0x20000200

08000f94 <BH1750_Reset>:

//
//	Reset all registers to default value.
//
BH1750_STATUS BH1750_Reset(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af02      	add	r7, sp, #8
	uint8_t tmp = 0x07;
 8000f9a:	2307      	movs	r3, #7
 8000f9c:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp, 1, 10))
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <BH1750_Reset+0x30>)
 8000fa0:	6818      	ldr	r0, [r3, #0]
 8000fa2:	1dfa      	adds	r2, r7, #7
 8000fa4:	230a      	movs	r3, #10
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2301      	movs	r3, #1
 8000faa:	2146      	movs	r1, #70	; 0x46
 8000fac:	f001 fe6e 	bl	8002c8c <HAL_I2C_Master_Transmit>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d101      	bne.n	8000fba <BH1750_Reset+0x26>
		return BH1750_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e000      	b.n	8000fbc <BH1750_Reset+0x28>

	return BH1750_ERROR;
 8000fba:	2301      	movs	r3, #1
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000200 	.word	0x20000200

08000fc8 <BH1750_SetMode>:

//
//	Set the mode of converting. Look into bh1750_mode enum.
//
BH1750_STATUS BH1750_SetMode(bh1750_mode Mode)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af02      	add	r7, sp, #8
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	091b      	lsrs	r3, r3, #4
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d106      	bne.n	8000fea <BH1750_SetMode+0x22>
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	095b      	lsrs	r3, r3, #5
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <BH1750_SetMode+0x22>
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e018      	b.n	800101c <BH1750_SetMode+0x54>
	if((Mode & 0x0F) > 3) return BH1750_ERROR;
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	f003 030c 	and.w	r3, r3, #12
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <BH1750_SetMode+0x30>
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e011      	b.n	800101c <BH1750_SetMode+0x54>

	Bh1750_Mode = Mode;
 8000ff8:	79fa      	ldrb	r2, [r7, #7]
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <BH1750_SetMode+0x5c>)
 8000ffc:	701a      	strb	r2, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &Mode, 1, 10))
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <BH1750_SetMode+0x60>)
 8001000:	6818      	ldr	r0, [r3, #0]
 8001002:	1dfa      	adds	r2, r7, #7
 8001004:	230a      	movs	r3, #10
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2301      	movs	r3, #1
 800100a:	2146      	movs	r1, #70	; 0x46
 800100c:	f001 fe3e 	bl	8002c8c <HAL_I2C_Master_Transmit>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d101      	bne.n	800101a <BH1750_SetMode+0x52>
		return BH1750_OK;
 8001016:	2300      	movs	r3, #0
 8001018:	e000      	b.n	800101c <BH1750_SetMode+0x54>

	return BH1750_ERROR;
 800101a:	2301      	movs	r3, #1
}
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000204 	.word	0x20000204
 8001028:	20000200 	.word	0x20000200

0800102c <BH1750_SetMtreg>:

//
//	Set the Measurement Time register. It allows to increase or decrease the sensitivity.
//
BH1750_STATUS BH1750_SetMtreg(uint8_t Mtreg)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af02      	add	r7, sp, #8
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef retCode;
	if (Mtreg < 31 || Mtreg > 254) {
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	2b1e      	cmp	r3, #30
 800103a:	d902      	bls.n	8001042 <BH1750_SetMtreg+0x16>
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	2bff      	cmp	r3, #255	; 0xff
 8001040:	d101      	bne.n	8001046 <BH1750_SetMtreg+0x1a>
		return BH1750_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e037      	b.n	80010b6 <BH1750_SetMtreg+0x8a>
	}

	Bh1750_Mtreg = Mtreg;
 8001046:	4a1e      	ldr	r2, [pc, #120]	; (80010c0 <BH1750_SetMtreg+0x94>)
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	7013      	strb	r3, [r2, #0]

	uint8_t tmp[2];

	tmp[0] = (0x40 | (Mtreg >> 5));
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	095b      	lsrs	r3, r3, #5
 8001050:	b2db      	uxtb	r3, r3
 8001052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001056:	b2db      	uxtb	r3, r3
 8001058:	733b      	strb	r3, [r7, #12]
	tmp[1] = (0x60 | (Mtreg & 0x1F));
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	f003 031f 	and.w	r3, r3, #31
 8001062:	b25b      	sxtb	r3, r3
 8001064:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001068:	b25b      	sxtb	r3, r3
 800106a:	b2db      	uxtb	r3, r3
 800106c:	737b      	strb	r3, [r7, #13]

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[0], 1, 10);
 800106e:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <BH1750_SetMtreg+0x98>)
 8001070:	6818      	ldr	r0, [r3, #0]
 8001072:	f107 020c 	add.w	r2, r7, #12
 8001076:	230a      	movs	r3, #10
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	2301      	movs	r3, #1
 800107c:	2146      	movs	r1, #70	; 0x46
 800107e:	f001 fe05 	bl	8002c8c <HAL_I2C_Master_Transmit>
 8001082:	4603      	mov	r3, r0
 8001084:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK != retCode) {
 8001086:	7bfb      	ldrb	r3, [r7, #15]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <BH1750_SetMtreg+0x64>
		return BH1750_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e012      	b.n	80010b6 <BH1750_SetMtreg+0x8a>
	}

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[1], 1, 10);
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <BH1750_SetMtreg+0x98>)
 8001092:	6818      	ldr	r0, [r3, #0]
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	1c5a      	adds	r2, r3, #1
 800109a:	230a      	movs	r3, #10
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	2301      	movs	r3, #1
 80010a0:	2146      	movs	r1, #70	; 0x46
 80010a2:	f001 fdf3 	bl	8002c8c <HAL_I2C_Master_Transmit>
 80010a6:	4603      	mov	r3, r0
 80010a8:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK == retCode) {
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d101      	bne.n	80010b4 <BH1750_SetMtreg+0x88>
		return BH1750_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	e000      	b.n	80010b6 <BH1750_SetMtreg+0x8a>
	}

	return BH1750_ERROR;
 80010b4:	2301      	movs	r3, #1
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000205 	.word	0x20000205
 80010c4:	20000200 	.word	0x20000200

080010c8 <BH1750_ReadLight>:

//
//	Read the converted value and calculate the result.
//
BH1750_STATUS BH1750_ReadLight(float *Result)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af02      	add	r7, sp, #8
 80010ce:	6078      	str	r0, [r7, #4]
	float result;
	uint8_t tmp[2];

	if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
 80010d0:	4b25      	ldr	r3, [pc, #148]	; (8001168 <BH1750_ReadLight+0xa0>)
 80010d2:	6818      	ldr	r0, [r3, #0]
 80010d4:	f107 0208 	add.w	r2, r7, #8
 80010d8:	230a      	movs	r3, #10
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	2302      	movs	r3, #2
 80010de:	2146      	movs	r1, #70	; 0x46
 80010e0:	f001 fed2 	bl	8002e88 <HAL_I2C_Master_Receive>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d138      	bne.n	800115c <BH1750_ReadLight+0x94>
	{
		result = (tmp[0] << 8) | (tmp[1]);
 80010ea:	7a3b      	ldrb	r3, [r7, #8]
 80010ec:	021b      	lsls	r3, r3, #8
 80010ee:	7a7a      	ldrb	r2, [r7, #9]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	ee07 3a90 	vmov	s15, r3
 80010f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010fa:	edc7 7a03 	vstr	s15, [r7, #12]

		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG)
 80010fe:	4b1b      	ldr	r3, [pc, #108]	; (800116c <BH1750_ReadLight+0xa4>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b45      	cmp	r3, #69	; 0x45
 8001104:	d00f      	beq.n	8001126 <BH1750_ReadLight+0x5e>
		{
			result *= (float)((uint8_t)BH1750_DEFAULT_MTREG/(float)Bh1750_Mtreg);
 8001106:	4b19      	ldr	r3, [pc, #100]	; (800116c <BH1750_ReadLight+0xa4>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	ee07 3a90 	vmov	s15, r3
 800110e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001112:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001170 <BH1750_ReadLight+0xa8>
 8001116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800111a:	ed97 7a03 	vldr	s14, [r7, #12]
 800111e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001122:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		if(Bh1750_Mode == ONETIME_HIGH_RES_MODE_2 || Bh1750_Mode == CONTINUOUS_HIGH_RES_MODE_2)
 8001126:	4b13      	ldr	r3, [pc, #76]	; (8001174 <BH1750_ReadLight+0xac>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b21      	cmp	r3, #33	; 0x21
 800112c:	d003      	beq.n	8001136 <BH1750_ReadLight+0x6e>
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <BH1750_ReadLight+0xac>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b11      	cmp	r3, #17
 8001134:	d107      	bne.n	8001146 <BH1750_ReadLight+0x7e>
		{
			result /= 2.0;
 8001136:	ed97 7a03 	vldr	s14, [r7, #12]
 800113a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800113e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001142:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		*Result = result / (float)BH1750_CONVERSION_FACTOR;
 8001146:	ed97 7a03 	vldr	s14, [r7, #12]
 800114a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001178 <BH1750_ReadLight+0xb0>
 800114e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	edc3 7a00 	vstr	s15, [r3]
		return BH1750_OK;
 8001158:	2300      	movs	r3, #0
 800115a:	e000      	b.n	800115e <BH1750_ReadLight+0x96>
	}
	return BH1750_ERROR;
 800115c:	2301      	movs	r3, #1
}
 800115e:	4618      	mov	r0, r3
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000200 	.word	0x20000200
 800116c:	20000205 	.word	0x20000205
 8001170:	428a0000 	.word	0x428a0000
 8001174:	20000204 	.word	0x20000204
 8001178:	3f99999a 	.word	0x3f99999a

0800117c <HAL_TIM_PeriodElapsedCallback>:
static void printUART(char string[]);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	/*
	 * Calls when Timer period is reached T = 0.1s
	 */

	if(--BH1750_counter == 0) {
 8001184:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	3b01      	subs	r3, #1
 800118a:	b29a      	uxth	r2, r3
 800118c:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800118e:	801a      	strh	r2, [r3, #0]
 8001190:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d105      	bne.n	80011a4 <HAL_TIM_PeriodElapsedCallback+0x28>
		//BH1750 Handler
		BH1750_counter_timeout_flag = true;
 8001198:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800119a:	2201      	movs	r2, #1
 800119c:	701a      	strb	r2, [r3, #0]
		BH1750_counter = BH1750_COUNTER;
 800119e:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80011a0:	2232      	movs	r2, #50	; 0x32
 80011a2:	801a      	strh	r2, [r3, #0]
	}
	if(--SHT31_counter == 0) {
 80011a4:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	3b01      	subs	r3, #1
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80011ae:	801a      	strh	r2, [r3, #0]
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d105      	bne.n	80011c4 <HAL_TIM_PeriodElapsedCallback+0x48>
		//SHT31 Handler
		SHT31_counter_timeout_flag = true;
 80011b8:	4b10      	ldr	r3, [pc, #64]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x80>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	701a      	strb	r2, [r3, #0]
		SHT31_counter = SHT31_COUNTER;
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80011c0:	2232      	movs	r2, #50	; 0x32
 80011c2:	801a      	strh	r2, [r3, #0]
	}
	if(--MLX90614_counter == 0) {
 80011c4:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	3b01      	subs	r3, #1
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80011ce:	801a      	strh	r2, [r3, #0]
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d105      	bne.n	80011e4 <HAL_TIM_PeriodElapsedCallback+0x68>
		//MLX90614 Handler
		MLX90614_counter_timeout_flag = 1;
 80011d8:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80011da:	2201      	movs	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]
		MLX90614_counter = MLX90614_COUNTER;
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80011e0:	2232      	movs	r2, #50	; 0x32
 80011e2:	801a      	strh	r2, [r3, #0]
	}
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	20000002 	.word	0x20000002
 80011f4:	2000033d 	.word	0x2000033d
 80011f8:	20000000 	.word	0x20000000
 80011fc:	2000033c 	.word	0x2000033c
 8001200:	20000004 	.word	0x20000004
 8001204:	2000033e 	.word	0x2000033e

08001208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001208:	b5b0      	push	{r4, r5, r7, lr}
 800120a:	b0a8      	sub	sp, #160	; 0xa0
 800120c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  char uart_buf[128] = {'\0'};
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	f107 0310 	add.w	r3, r7, #16
 8001216:	227c      	movs	r2, #124	; 0x7c
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f004 fcbe 	bl	8005b9c <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001220:	f001 f8aa 	bl	8002378 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001224:	f000 f8d0 	bl	80013c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001228:	f000 fa0e 	bl	8001648 <MX_GPIO_Init>
  MX_I2C3_Init();
 800122c:	f000 f966 	bl	80014fc <MX_I2C3_Init>
  MX_USART2_UART_Init();
 8001230:	f000 f9e0 	bl	80015f4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001234:	f000 f934 	bl	80014a0 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001238:	f000 f98e 	bl	8001558 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  float temp_obj1, temp_amb, light, sht31_temp, sht31_humidity;

  HAL_TIM_Base_Start_IT(&htim3);
 800123c:	4858      	ldr	r0, [pc, #352]	; (80013a0 <main+0x198>)
 800123e:	f003 fc9b 	bl	8004b78 <HAL_TIM_Base_Start_IT>

  scan_I2C_bus(1);
 8001242:	2001      	movs	r0, #1
 8001244:	f000 fa6e 	bl	8001724 <scan_I2C_bus>

  MLX90614_Init(&hi2c1);
 8001248:	4856      	ldr	r0, [pc, #344]	; (80013a4 <main+0x19c>)
 800124a:	f000 faf3 	bl	8001834 <MLX90614_Init>
  BH1750_Init(&hi2c1);
 800124e:	4855      	ldr	r0, [pc, #340]	; (80013a4 <main+0x19c>)
 8001250:	f7ff fe84 	bl	8000f5c <BH1750_Init>
  BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE_2);
 8001254:	2011      	movs	r0, #17
 8001256:	f7ff feb7 	bl	8000fc8 <BH1750_SetMode>
  sht31d.i2c_handle = &hi2c1;
 800125a:	4b53      	ldr	r3, [pc, #332]	; (80013a8 <main+0x1a0>)
 800125c:	4a51      	ldr	r2, [pc, #324]	; (80013a4 <main+0x19c>)
 800125e:	601a      	str	r2, [r3, #0]
  sht31d.device_address = (uint16_t)SHT3X_I2C_DEVICE_ADDRESS_ADDR_PIN_LOW;
 8001260:	4b51      	ldr	r3, [pc, #324]	; (80013a8 <main+0x1a0>)
 8001262:	2244      	movs	r2, #68	; 0x44
 8001264:	809a      	strh	r2, [r3, #4]
  sht3x_init(&sht31d);
 8001266:	4850      	ldr	r0, [pc, #320]	; (80013a8 <main+0x1a0>)
 8001268:	f000 fd5c 	bl	8001d24 <sht3x_init>
//	  HAL_Delay(2000);
//	  timer_val = __HAL_TIM_GET_COUNTER(&htim3) - timer_val;
//	  uart_buf_len = sprintf(uart_buf, "%u us\r\n", timer_val);
//	  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);

	  if(BH1750_counter_timeout_flag) {
 800126c:	4b4f      	ldr	r3, [pc, #316]	; (80013ac <main+0x1a4>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d025      	beq.n	80012c0 <main+0xb8>
		  //trigger BH1750 read

		  BH1750_counter_timeout_flag = 0;
 8001274:	4b4d      	ldr	r3, [pc, #308]	; (80013ac <main+0x1a4>)
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]

		  BH1750_ReadLight(&light);
 800127a:	f107 0308 	add.w	r3, r7, #8
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff ff22 	bl	80010c8 <BH1750_ReadLight>

		  uart_buf_len = sprintf(uart_buf, "Light: %.2f\r\n", light);
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff f966 	bl	8000558 <__aeabi_f2d>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	f107 000c 	add.w	r0, r7, #12
 8001294:	4946      	ldr	r1, [pc, #280]	; (80013b0 <main+0x1a8>)
 8001296:	f005 fa4d 	bl	8006734 <siprintf>
 800129a:	4603      	mov	r3, r0
 800129c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		  HAL_UART_Transmit(&huart2, uart_buf, uart_buf_len, 100);
 80012a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	f107 010c 	add.w	r1, r7, #12
 80012aa:	2364      	movs	r3, #100	; 0x64
 80012ac:	4841      	ldr	r0, [pc, #260]	; (80013b4 <main+0x1ac>)
 80012ae:	f004 f8a6 	bl	80053fe <HAL_UART_Transmit>
		  memset(uart_buf, 0, sizeof(uart_buf));
 80012b2:	f107 030c 	add.w	r3, r7, #12
 80012b6:	2280      	movs	r2, #128	; 0x80
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f004 fc6e 	bl	8005b9c <memset>
	  }

	  if(SHT31_counter_timeout_flag) {
 80012c0:	4b3d      	ldr	r3, [pc, #244]	; (80013b8 <main+0x1b0>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d030      	beq.n	800132a <main+0x122>
		  //trigger BH1750 read

		  SHT31_counter_timeout_flag = 0;
 80012c8:	4b3b      	ldr	r3, [pc, #236]	; (80013b8 <main+0x1b0>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	701a      	strb	r2, [r3, #0]

		  sht3x_read_temperature_and_humidity(&sht31d, &(sht31_temp), &(sht31_humidity) );
 80012ce:	463a      	mov	r2, r7
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	4619      	mov	r1, r3
 80012d4:	4834      	ldr	r0, [pc, #208]	; (80013a8 <main+0x1a0>)
 80012d6:	f000 fd65 	bl	8001da4 <sht3x_read_temperature_and_humidity>

		  uart_buf_len = sprintf(uart_buf, "Temperature: %0.2f and Humidity: %.2f\r\n", sht31_temp, sht31_humidity);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f93b 	bl	8000558 <__aeabi_f2d>
 80012e2:	4604      	mov	r4, r0
 80012e4:	460d      	mov	r5, r1
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff f935 	bl	8000558 <__aeabi_f2d>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	f107 000c 	add.w	r0, r7, #12
 80012f6:	e9cd 2300 	strd	r2, r3, [sp]
 80012fa:	4622      	mov	r2, r4
 80012fc:	462b      	mov	r3, r5
 80012fe:	492f      	ldr	r1, [pc, #188]	; (80013bc <main+0x1b4>)
 8001300:	f005 fa18 	bl	8006734 <siprintf>
 8001304:	4603      	mov	r3, r0
 8001306:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 800130a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800130e:	b29a      	uxth	r2, r3
 8001310:	f107 010c 	add.w	r1, r7, #12
 8001314:	2364      	movs	r3, #100	; 0x64
 8001316:	4827      	ldr	r0, [pc, #156]	; (80013b4 <main+0x1ac>)
 8001318:	f004 f871 	bl	80053fe <HAL_UART_Transmit>
		  memset(uart_buf, 0, sizeof(uart_buf));
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	2280      	movs	r2, #128	; 0x80
 8001322:	2100      	movs	r1, #0
 8001324:	4618      	mov	r0, r3
 8001326:	f004 fc39 	bl	8005b9c <memset>
	  }

	  if(MLX90614_counter_timeout_flag) {
 800132a:	4b25      	ldr	r3, [pc, #148]	; (80013c0 <main+0x1b8>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d09c      	beq.n	800126c <main+0x64>
		  //trigger MLX90614 read

		  MLX90614_counter_timeout_flag = 0;
 8001332:	4b23      	ldr	r3, [pc, #140]	; (80013c0 <main+0x1b8>)
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]

		  temp_obj1 = MLX90614_ReadTObj1();
 8001338:	f000 fc18 	bl	8001b6c <MLX90614_ReadTObj1>
 800133c:	ed87 0a24 	vstr	s0, [r7, #144]	; 0x90
		  HAL_Delay(5);
 8001340:	2005      	movs	r0, #5
 8001342:	f001 f88b 	bl	800245c <HAL_Delay>
		  temp_amb = MLX90614_ReadTAmb();
 8001346:	f000 fc31 	bl	8001bac <MLX90614_ReadTAmb>
 800134a:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c

		  uart_buf_len = sprintf(uart_buf, "IR Sensor: T obj1: %.2f, T amb: %.2f\r\n", temp_obj1, temp_amb);
 800134e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8001352:	f7ff f901 	bl	8000558 <__aeabi_f2d>
 8001356:	4604      	mov	r4, r0
 8001358:	460d      	mov	r5, r1
 800135a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800135e:	f7ff f8fb 	bl	8000558 <__aeabi_f2d>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	f107 000c 	add.w	r0, r7, #12
 800136a:	e9cd 2300 	strd	r2, r3, [sp]
 800136e:	4622      	mov	r2, r4
 8001370:	462b      	mov	r3, r5
 8001372:	4914      	ldr	r1, [pc, #80]	; (80013c4 <main+0x1bc>)
 8001374:	f005 f9de 	bl	8006734 <siprintf>
 8001378:	4603      	mov	r3, r0
 800137a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		  HAL_UART_Transmit(&huart2, uart_buf, uart_buf_len, 100);
 800137e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001382:	b29a      	uxth	r2, r3
 8001384:	f107 010c 	add.w	r1, r7, #12
 8001388:	2364      	movs	r3, #100	; 0x64
 800138a:	480a      	ldr	r0, [pc, #40]	; (80013b4 <main+0x1ac>)
 800138c:	f004 f837 	bl	80053fe <HAL_UART_Transmit>
		  memset(uart_buf, 0, sizeof(uart_buf));
 8001390:	f107 030c 	add.w	r3, r7, #12
 8001394:	2280      	movs	r2, #128	; 0x80
 8001396:	2100      	movs	r1, #0
 8001398:	4618      	mov	r0, r3
 800139a:	f004 fbff 	bl	8005b9c <memset>
	  if(BH1750_counter_timeout_flag) {
 800139e:	e765      	b.n	800126c <main+0x64>
 80013a0:	200002b0 	.word	0x200002b0
 80013a4:	20000208 	.word	0x20000208
 80013a8:	20000340 	.word	0x20000340
 80013ac:	2000033d 	.word	0x2000033d
 80013b0:	08008928 	.word	0x08008928
 80013b4:	200002f8 	.word	0x200002f8
 80013b8:	2000033c 	.word	0x2000033c
 80013bc:	08008938 	.word	0x08008938
 80013c0:	2000033e 	.word	0x2000033e
 80013c4:	08008960 	.word	0x08008960

080013c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b094      	sub	sp, #80	; 0x50
 80013cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ce:	f107 0320 	add.w	r3, r7, #32
 80013d2:	2230      	movs	r2, #48	; 0x30
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f004 fbe0 	bl	8005b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ec:	2300      	movs	r3, #0
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	4b29      	ldr	r3, [pc, #164]	; (8001498 <SystemClock_Config+0xd0>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	4a28      	ldr	r2, [pc, #160]	; (8001498 <SystemClock_Config+0xd0>)
 80013f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013fa:	6413      	str	r3, [r2, #64]	; 0x40
 80013fc:	4b26      	ldr	r3, [pc, #152]	; (8001498 <SystemClock_Config+0xd0>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001408:	2300      	movs	r3, #0
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	4b23      	ldr	r3, [pc, #140]	; (800149c <SystemClock_Config+0xd4>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001414:	4a21      	ldr	r2, [pc, #132]	; (800149c <SystemClock_Config+0xd4>)
 8001416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	4b1f      	ldr	r3, [pc, #124]	; (800149c <SystemClock_Config+0xd4>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001428:	2302      	movs	r3, #2
 800142a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800142c:	2301      	movs	r3, #1
 800142e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001430:	2310      	movs	r3, #16
 8001432:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001434:	2302      	movs	r3, #2
 8001436:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001438:	2300      	movs	r3, #0
 800143a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800143c:	2310      	movs	r3, #16
 800143e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001440:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001444:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001446:	2304      	movs	r3, #4
 8001448:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800144a:	2307      	movs	r3, #7
 800144c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800144e:	f107 0320 	add.w	r3, r7, #32
 8001452:	4618      	mov	r0, r3
 8001454:	f002 fea8 	bl	80041a8 <HAL_RCC_OscConfig>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800145e:	f000 f9b9 	bl	80017d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001462:	230f      	movs	r3, #15
 8001464:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001466:	2302      	movs	r3, #2
 8001468:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800146e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001472:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	2102      	movs	r1, #2
 800147e:	4618      	mov	r0, r3
 8001480:	f003 f90a 	bl	8004698 <HAL_RCC_ClockConfig>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800148a:	f000 f9a3 	bl	80017d4 <Error_Handler>
  }
}
 800148e:	bf00      	nop
 8001490:	3750      	adds	r7, #80	; 0x50
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800
 800149c:	40007000 	.word	0x40007000

080014a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014a4:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <MX_I2C1_Init+0x50>)
 80014a6:	4a13      	ldr	r2, [pc, #76]	; (80014f4 <MX_I2C1_Init+0x54>)
 80014a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014aa:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <MX_I2C1_Init+0x50>)
 80014ac:	4a12      	ldr	r2, [pc, #72]	; (80014f8 <MX_I2C1_Init+0x58>)
 80014ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014b0:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <MX_I2C1_Init+0x50>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014b6:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <MX_I2C1_Init+0x50>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <MX_I2C1_Init+0x50>)
 80014be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014c4:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <MX_I2C1_Init+0x50>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014ca:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <MX_I2C1_Init+0x50>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014d0:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <MX_I2C1_Init+0x50>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014d6:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <MX_I2C1_Init+0x50>)
 80014d8:	2200      	movs	r2, #0
 80014da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014dc:	4804      	ldr	r0, [pc, #16]	; (80014f0 <MX_I2C1_Init+0x50>)
 80014de:	f001 fa91 	bl	8002a04 <HAL_I2C_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014e8:	f000 f974 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000208 	.word	0x20000208
 80014f4:	40005400 	.word	0x40005400
 80014f8:	000186a0 	.word	0x000186a0

080014fc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <MX_I2C3_Init+0x50>)
 8001502:	4a13      	ldr	r2, [pc, #76]	; (8001550 <MX_I2C3_Init+0x54>)
 8001504:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001506:	4b11      	ldr	r3, [pc, #68]	; (800154c <MX_I2C3_Init+0x50>)
 8001508:	4a12      	ldr	r2, [pc, #72]	; (8001554 <MX_I2C3_Init+0x58>)
 800150a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800150c:	4b0f      	ldr	r3, [pc, #60]	; (800154c <MX_I2C3_Init+0x50>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001512:	4b0e      	ldr	r3, [pc, #56]	; (800154c <MX_I2C3_Init+0x50>)
 8001514:	2200      	movs	r2, #0
 8001516:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <MX_I2C3_Init+0x50>)
 800151a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800151e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001520:	4b0a      	ldr	r3, [pc, #40]	; (800154c <MX_I2C3_Init+0x50>)
 8001522:	2200      	movs	r2, #0
 8001524:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001526:	4b09      	ldr	r3, [pc, #36]	; (800154c <MX_I2C3_Init+0x50>)
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <MX_I2C3_Init+0x50>)
 800152e:	2200      	movs	r2, #0
 8001530:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <MX_I2C3_Init+0x50>)
 8001534:	2200      	movs	r2, #0
 8001536:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001538:	4804      	ldr	r0, [pc, #16]	; (800154c <MX_I2C3_Init+0x50>)
 800153a:	f001 fa63 	bl	8002a04 <HAL_I2C_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001544:	f000 f946 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	2000025c 	.word	0x2000025c
 8001550:	40005c00 	.word	0x40005c00
 8001554:	000186a0 	.word	0x000186a0

08001558 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800155e:	f107 0308 	add.w	r3, r7, #8
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800156c:	463b      	mov	r3, r7
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001574:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <MX_TIM3_Init+0x94>)
 8001576:	4a1e      	ldr	r2, [pc, #120]	; (80015f0 <MX_TIM3_Init+0x98>)
 8001578:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000;
 800157a:	4b1c      	ldr	r3, [pc, #112]	; (80015ec <MX_TIM3_Init+0x94>)
 800157c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001580:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001582:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <MX_TIM3_Init+0x94>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000;
 8001588:	4b18      	ldr	r3, [pc, #96]	; (80015ec <MX_TIM3_Init+0x94>)
 800158a:	f241 3288 	movw	r2, #5000	; 0x1388
 800158e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001590:	4b16      	ldr	r3, [pc, #88]	; (80015ec <MX_TIM3_Init+0x94>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <MX_TIM3_Init+0x94>)
 8001598:	2280      	movs	r2, #128	; 0x80
 800159a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800159c:	4813      	ldr	r0, [pc, #76]	; (80015ec <MX_TIM3_Init+0x94>)
 800159e:	f003 fa9b 	bl	8004ad8 <HAL_TIM_Base_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80015a8:	f000 f914 	bl	80017d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015b2:	f107 0308 	add.w	r3, r7, #8
 80015b6:	4619      	mov	r1, r3
 80015b8:	480c      	ldr	r0, [pc, #48]	; (80015ec <MX_TIM3_Init+0x94>)
 80015ba:	f003 fc47 	bl	8004e4c <HAL_TIM_ConfigClockSource>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80015c4:	f000 f906 	bl	80017d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c8:	2300      	movs	r3, #0
 80015ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015d0:	463b      	mov	r3, r7
 80015d2:	4619      	mov	r1, r3
 80015d4:	4805      	ldr	r0, [pc, #20]	; (80015ec <MX_TIM3_Init+0x94>)
 80015d6:	f003 fe43 	bl	8005260 <HAL_TIMEx_MasterConfigSynchronization>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80015e0:	f000 f8f8 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015e4:	bf00      	nop
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	200002b0 	.word	0x200002b0
 80015f0:	40000400 	.word	0x40000400

080015f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <MX_USART2_UART_Init+0x4c>)
 80015fa:	4a12      	ldr	r2, [pc, #72]	; (8001644 <MX_USART2_UART_Init+0x50>)
 80015fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015fe:	4b10      	ldr	r3, [pc, #64]	; (8001640 <MX_USART2_UART_Init+0x4c>)
 8001600:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001604:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <MX_USART2_UART_Init+0x4c>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <MX_USART2_UART_Init+0x4c>)
 800160e:	2200      	movs	r2, #0
 8001610:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001612:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <MX_USART2_UART_Init+0x4c>)
 8001614:	2200      	movs	r2, #0
 8001616:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001618:	4b09      	ldr	r3, [pc, #36]	; (8001640 <MX_USART2_UART_Init+0x4c>)
 800161a:	220c      	movs	r2, #12
 800161c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800161e:	4b08      	ldr	r3, [pc, #32]	; (8001640 <MX_USART2_UART_Init+0x4c>)
 8001620:	2200      	movs	r2, #0
 8001622:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <MX_USART2_UART_Init+0x4c>)
 8001626:	2200      	movs	r2, #0
 8001628:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800162a:	4805      	ldr	r0, [pc, #20]	; (8001640 <MX_USART2_UART_Init+0x4c>)
 800162c:	f003 fe9a 	bl	8005364 <HAL_UART_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001636:	f000 f8cd 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200002f8 	.word	0x200002f8
 8001644:	40004400 	.word	0x40004400

08001648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08a      	sub	sp, #40	; 0x28
 800164c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
 800165c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	4b2d      	ldr	r3, [pc, #180]	; (8001718 <MX_GPIO_Init+0xd0>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a2c      	ldr	r2, [pc, #176]	; (8001718 <MX_GPIO_Init+0xd0>)
 8001668:	f043 0304 	orr.w	r3, r3, #4
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b2a      	ldr	r3, [pc, #168]	; (8001718 <MX_GPIO_Init+0xd0>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0304 	and.w	r3, r3, #4
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	4b26      	ldr	r3, [pc, #152]	; (8001718 <MX_GPIO_Init+0xd0>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a25      	ldr	r2, [pc, #148]	; (8001718 <MX_GPIO_Init+0xd0>)
 8001684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b23      	ldr	r3, [pc, #140]	; (8001718 <MX_GPIO_Init+0xd0>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	4b1f      	ldr	r3, [pc, #124]	; (8001718 <MX_GPIO_Init+0xd0>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a1e      	ldr	r2, [pc, #120]	; (8001718 <MX_GPIO_Init+0xd0>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b1c      	ldr	r3, [pc, #112]	; (8001718 <MX_GPIO_Init+0xd0>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	4b18      	ldr	r3, [pc, #96]	; (8001718 <MX_GPIO_Init+0xd0>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4a17      	ldr	r2, [pc, #92]	; (8001718 <MX_GPIO_Init+0xd0>)
 80016bc:	f043 0302 	orr.w	r3, r3, #2
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4b15      	ldr	r3, [pc, #84]	; (8001718 <MX_GPIO_Init+0xd0>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2120      	movs	r1, #32
 80016d2:	4812      	ldr	r0, [pc, #72]	; (800171c <MX_GPIO_Init+0xd4>)
 80016d4:	f001 f97c 	bl	80029d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016de:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80016e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4619      	mov	r1, r3
 80016ee:	480c      	ldr	r0, [pc, #48]	; (8001720 <MX_GPIO_Init+0xd8>)
 80016f0:	f000 ffea 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016f4:	2320      	movs	r3, #32
 80016f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f8:	2301      	movs	r3, #1
 80016fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2300      	movs	r3, #0
 8001702:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	4619      	mov	r1, r3
 800170a:	4804      	ldr	r0, [pc, #16]	; (800171c <MX_GPIO_Init+0xd4>)
 800170c:	f000 ffdc 	bl	80026c8 <HAL_GPIO_Init>

}
 8001710:	bf00      	nop
 8001712:	3728      	adds	r7, #40	; 0x28
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40023800 	.word	0x40023800
 800171c:	40020000 	.word	0x40020000
 8001720:	40020800 	.word	0x40020800

08001724 <scan_I2C_bus>:

/* USER CODE BEGIN 4 */
static void scan_I2C_bus(uint8_t bus) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b08a      	sub	sp, #40	; 0x28
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef result;
	char buf[20];

	for (int i = 0; i<128; i++)
 800172e:	2300      	movs	r3, #0
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
 8001732:	e03f      	b.n	80017b4 <scan_I2C_bus+0x90>
	  {
		  result = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (i<<1), 3, 5);
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	b29b      	uxth	r3, r3
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	b299      	uxth	r1, r3
 800173c:	2305      	movs	r3, #5
 800173e:	2203      	movs	r2, #3
 8001740:	4820      	ldr	r0, [pc, #128]	; (80017c4 <scan_I2C_bus+0xa0>)
 8001742:	f001 ffed 	bl	8003720 <HAL_I2C_IsDeviceReady>
 8001746:	4603      	mov	r3, r0
 8001748:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		  if (result != HAL_OK)
 800174c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001750:	2b00      	cmp	r3, #0
 8001752:	d013      	beq.n	800177c <scan_I2C_bus+0x58>
		  {
			  sprintf(buf, "0x%-\r\n");
 8001754:	f107 030c 	add.w	r3, r7, #12
 8001758:	491b      	ldr	r1, [pc, #108]	; (80017c8 <scan_I2C_bus+0xa4>)
 800175a:	4618      	mov	r0, r3
 800175c:	f004 ffea 	bl	8006734 <siprintf>
			  HAL_UART_Transmit(&huart2, buf, sizeof(buf), 100);
 8001760:	f107 010c 	add.w	r1, r7, #12
 8001764:	2364      	movs	r3, #100	; 0x64
 8001766:	2214      	movs	r2, #20
 8001768:	4818      	ldr	r0, [pc, #96]	; (80017cc <scan_I2C_bus+0xa8>)
 800176a:	f003 fe48 	bl	80053fe <HAL_UART_Transmit>
			  memset(buf, 0, sizeof(buf));
 800176e:	f107 030c 	add.w	r3, r7, #12
 8001772:	2214      	movs	r2, #20
 8001774:	2100      	movs	r1, #0
 8001776:	4618      	mov	r0, r3
 8001778:	f004 fa10 	bl	8005b9c <memset>
		  }
		  if (result == HAL_OK)
 800177c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001780:	2b00      	cmp	r3, #0
 8001782:	d114      	bne.n	80017ae <scan_I2C_bus+0x8a>
		  {
			  sprintf(buf, "0x%X\r\n", i);
 8001784:	f107 030c 	add.w	r3, r7, #12
 8001788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800178a:	4911      	ldr	r1, [pc, #68]	; (80017d0 <scan_I2C_bus+0xac>)
 800178c:	4618      	mov	r0, r3
 800178e:	f004 ffd1 	bl	8006734 <siprintf>
			  HAL_UART_Transmit(&huart2, buf, sizeof(buf), 100);
 8001792:	f107 010c 	add.w	r1, r7, #12
 8001796:	2364      	movs	r3, #100	; 0x64
 8001798:	2214      	movs	r2, #20
 800179a:	480c      	ldr	r0, [pc, #48]	; (80017cc <scan_I2C_bus+0xa8>)
 800179c:	f003 fe2f 	bl	80053fe <HAL_UART_Transmit>
			  memset(buf, 0, sizeof(buf));
 80017a0:	f107 030c 	add.w	r3, r7, #12
 80017a4:	2214      	movs	r2, #20
 80017a6:	2100      	movs	r1, #0
 80017a8:	4618      	mov	r0, r3
 80017aa:	f004 f9f7 	bl	8005b9c <memset>
	for (int i = 0; i<128; i++)
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	3301      	adds	r3, #1
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	2b7f      	cmp	r3, #127	; 0x7f
 80017b8:	ddbc      	ble.n	8001734 <scan_I2C_bus+0x10>
		  }
	  }
}
 80017ba:	bf00      	nop
 80017bc:	bf00      	nop
 80017be:	3728      	adds	r7, #40	; 0x28
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000208 	.word	0x20000208
 80017c8:	08008988 	.word	0x08008988
 80017cc:	200002f8 	.word	0x200002f8
 80017d0:	08008990 	.word	0x08008990

080017d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d8:	b672      	cpsid	i
}
 80017da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017dc:	e7fe      	b.n	80017dc <Error_Handler+0x8>

080017de <crc8>:

I2C_HandleTypeDef 	*MLX90614_i2c;
extern UART_HandleTypeDef huart2;
char uart_buf[128] = {'\0'};

uint8_t crc8 (uint8_t inCrc, uint8_t inData) {
 80017de:	b480      	push	{r7}
 80017e0:	b085      	sub	sp, #20
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	4603      	mov	r3, r0
 80017e6:	460a      	mov	r2, r1
 80017e8:	71fb      	strb	r3, [r7, #7]
 80017ea:	4613      	mov	r3, r2
 80017ec:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	uint8_t data;

	data = inCrc ^ inData;
 80017ee:	79fa      	ldrb	r2, [r7, #7]
 80017f0:	79bb      	ldrb	r3, [r7, #6]
 80017f2:	4053      	eors	r3, r2
 80017f4:	73bb      	strb	r3, [r7, #14]

	for(i = 0; i<8; i++) {
 80017f6:	2300      	movs	r3, #0
 80017f8:	73fb      	strb	r3, [r7, #15]
 80017fa:	e011      	b.n	8001820 <crc8+0x42>
		if((data & 0x80) != 0){
 80017fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001800:	2b00      	cmp	r3, #0
 8001802:	da07      	bge.n	8001814 <crc8+0x36>
			data <<= 1;
 8001804:	7bbb      	ldrb	r3, [r7, #14]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	73bb      	strb	r3, [r7, #14]
			data ^= 0x07;
 800180a:	7bbb      	ldrb	r3, [r7, #14]
 800180c:	f083 0307 	eor.w	r3, r3, #7
 8001810:	73bb      	strb	r3, [r7, #14]
 8001812:	e002      	b.n	800181a <crc8+0x3c>
		}
		else {
			data <<= 1;
 8001814:	7bbb      	ldrb	r3, [r7, #14]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	73bb      	strb	r3, [r7, #14]
	for(i = 0; i<8; i++) {
 800181a:	7bfb      	ldrb	r3, [r7, #15]
 800181c:	3301      	adds	r3, #1
 800181e:	73fb      	strb	r3, [r7, #15]
 8001820:	7bfb      	ldrb	r3, [r7, #15]
 8001822:	2b07      	cmp	r3, #7
 8001824:	d9ea      	bls.n	80017fc <crc8+0x1e>
		}
	}
	return data;
 8001826:	7bbb      	ldrb	r3, [r7, #14]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <MLX90614_Init>:

void MLX90614_Init(I2C_HandleTypeDef *hi2c){
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
	/*
	 * Initialize MLX90614 I2C and registers
	 */

	MLX90614_i2c = hi2c;
 800183c:	4a5a      	ldr	r2, [pc, #360]	; (80019a8 <MLX90614_Init+0x174>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6013      	str	r3, [r2, #0]

	uint16_t data = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	81fb      	strh	r3, [r7, #14]

	sprintf(uart_buf, "Starting Initialization of MLX_90614 IR Sensor:\r\n");
 8001846:	4959      	ldr	r1, [pc, #356]	; (80019ac <MLX90614_Init+0x178>)
 8001848:	4859      	ldr	r0, [pc, #356]	; (80019b0 <MLX90614_Init+0x17c>)
 800184a:	f004 ff73 	bl	8006734 <siprintf>
    HAL_UART_Transmit(&huart2, uart_buf, sizeof(uart_buf), 100);
 800184e:	2364      	movs	r3, #100	; 0x64
 8001850:	2280      	movs	r2, #128	; 0x80
 8001852:	4957      	ldr	r1, [pc, #348]	; (80019b0 <MLX90614_Init+0x17c>)
 8001854:	4857      	ldr	r0, [pc, #348]	; (80019b4 <MLX90614_Init+0x180>)
 8001856:	f003 fdd2 	bl	80053fe <HAL_UART_Transmit>
	HAL_Delay(100);
 800185a:	2064      	movs	r0, #100	; 0x64
 800185c:	f000 fdfe 	bl	800245c <HAL_Delay>
	memset(uart_buf, 0, sizeof(uart_buf));
 8001860:	2280      	movs	r2, #128	; 0x80
 8001862:	2100      	movs	r1, #0
 8001864:	4852      	ldr	r0, [pc, #328]	; (80019b0 <MLX90614_Init+0x17c>)
 8001866:	f004 f999 	bl	8005b9c <memset>

	MLX90614_WriteReg(MLX90614_TOMIN, 0x6AB3);
 800186a:	f646 21b3 	movw	r1, #27315	; 0x6ab3
 800186e:	2020      	movs	r0, #32
 8001870:	f000 f8b0 	bl	80019d4 <MLX90614_WriteReg>
	MLX90614_ReadReg(MLX90614_TOMIN, &data);
 8001874:	f107 030e 	add.w	r3, r7, #14
 8001878:	4619      	mov	r1, r3
 800187a:	2020      	movs	r0, #32
 800187c:	f000 f924 	bl	8001ac8 <MLX90614_ReadReg>
    sprintf(uart_buf, "ToMin: 0x%X\r\n", data);
 8001880:	89fb      	ldrh	r3, [r7, #14]
 8001882:	461a      	mov	r2, r3
 8001884:	494c      	ldr	r1, [pc, #304]	; (80019b8 <MLX90614_Init+0x184>)
 8001886:	484a      	ldr	r0, [pc, #296]	; (80019b0 <MLX90614_Init+0x17c>)
 8001888:	f004 ff54 	bl	8006734 <siprintf>
    HAL_UART_Transmit(&huart2, uart_buf, sizeof(uart_buf), 100);
 800188c:	2364      	movs	r3, #100	; 0x64
 800188e:	2280      	movs	r2, #128	; 0x80
 8001890:	4947      	ldr	r1, [pc, #284]	; (80019b0 <MLX90614_Init+0x17c>)
 8001892:	4848      	ldr	r0, [pc, #288]	; (80019b4 <MLX90614_Init+0x180>)
 8001894:	f003 fdb3 	bl	80053fe <HAL_UART_Transmit>
    HAL_Delay(100);
 8001898:	2064      	movs	r0, #100	; 0x64
 800189a:	f000 fddf 	bl	800245c <HAL_Delay>

    MLX90614_WriteReg(MLX90614_TOMAX, 0x7E3B);
 800189e:	f647 613b 	movw	r1, #32315	; 0x7e3b
 80018a2:	2021      	movs	r0, #33	; 0x21
 80018a4:	f000 f896 	bl	80019d4 <MLX90614_WriteReg>
    MLX90614_ReadReg(MLX90614_TOMAX, &data);
 80018a8:	f107 030e 	add.w	r3, r7, #14
 80018ac:	4619      	mov	r1, r3
 80018ae:	2021      	movs	r0, #33	; 0x21
 80018b0:	f000 f90a 	bl	8001ac8 <MLX90614_ReadReg>
    sprintf(uart_buf, "ToMax: 0x%X\r\n", data);
 80018b4:	89fb      	ldrh	r3, [r7, #14]
 80018b6:	461a      	mov	r2, r3
 80018b8:	4940      	ldr	r1, [pc, #256]	; (80019bc <MLX90614_Init+0x188>)
 80018ba:	483d      	ldr	r0, [pc, #244]	; (80019b0 <MLX90614_Init+0x17c>)
 80018bc:	f004 ff3a 	bl	8006734 <siprintf>
    HAL_UART_Transmit(&huart2, uart_buf, sizeof(uart_buf), 100);
 80018c0:	2364      	movs	r3, #100	; 0x64
 80018c2:	2280      	movs	r2, #128	; 0x80
 80018c4:	493a      	ldr	r1, [pc, #232]	; (80019b0 <MLX90614_Init+0x17c>)
 80018c6:	483b      	ldr	r0, [pc, #236]	; (80019b4 <MLX90614_Init+0x180>)
 80018c8:	f003 fd99 	bl	80053fe <HAL_UART_Transmit>
    HAL_Delay(100);
 80018cc:	2064      	movs	r0, #100	; 0x64
 80018ce:	f000 fdc5 	bl	800245c <HAL_Delay>

//    MLX90614_WriteReg(MLX90614_PWMCTRL, 0x);
    MLX90614_ReadReg(MLX90614_PWMCTRL, &data);
 80018d2:	f107 030e 	add.w	r3, r7, #14
 80018d6:	4619      	mov	r1, r3
 80018d8:	2022      	movs	r0, #34	; 0x22
 80018da:	f000 f8f5 	bl	8001ac8 <MLX90614_ReadReg>
    sprintf(uart_buf, "PWMCTRL: 0x%X\r\n", data);
 80018de:	89fb      	ldrh	r3, [r7, #14]
 80018e0:	461a      	mov	r2, r3
 80018e2:	4937      	ldr	r1, [pc, #220]	; (80019c0 <MLX90614_Init+0x18c>)
 80018e4:	4832      	ldr	r0, [pc, #200]	; (80019b0 <MLX90614_Init+0x17c>)
 80018e6:	f004 ff25 	bl	8006734 <siprintf>
    HAL_UART_Transmit(&huart2, uart_buf, sizeof(uart_buf), 100);
 80018ea:	2364      	movs	r3, #100	; 0x64
 80018ec:	2280      	movs	r2, #128	; 0x80
 80018ee:	4930      	ldr	r1, [pc, #192]	; (80019b0 <MLX90614_Init+0x17c>)
 80018f0:	4830      	ldr	r0, [pc, #192]	; (80019b4 <MLX90614_Init+0x180>)
 80018f2:	f003 fd84 	bl	80053fe <HAL_UART_Transmit>
    HAL_Delay(100);
 80018f6:	2064      	movs	r0, #100	; 0x64
 80018f8:	f000 fdb0 	bl	800245c <HAL_Delay>

//    MLX90614_WriteReg(MLX90614_TARANGE, 0x);
    MLX90614_ReadReg(MLX90614_TARANGE, &data);
 80018fc:	f107 030e 	add.w	r3, r7, #14
 8001900:	4619      	mov	r1, r3
 8001902:	2023      	movs	r0, #35	; 0x23
 8001904:	f000 f8e0 	bl	8001ac8 <MLX90614_ReadReg>
    sprintf(uart_buf, "TA Range: 0x%X\r\n", data);
 8001908:	89fb      	ldrh	r3, [r7, #14]
 800190a:	461a      	mov	r2, r3
 800190c:	492d      	ldr	r1, [pc, #180]	; (80019c4 <MLX90614_Init+0x190>)
 800190e:	4828      	ldr	r0, [pc, #160]	; (80019b0 <MLX90614_Init+0x17c>)
 8001910:	f004 ff10 	bl	8006734 <siprintf>
    HAL_UART_Transmit(&huart2, uart_buf, sizeof(uart_buf), 100);
 8001914:	2364      	movs	r3, #100	; 0x64
 8001916:	2280      	movs	r2, #128	; 0x80
 8001918:	4925      	ldr	r1, [pc, #148]	; (80019b0 <MLX90614_Init+0x17c>)
 800191a:	4826      	ldr	r0, [pc, #152]	; (80019b4 <MLX90614_Init+0x180>)
 800191c:	f003 fd6f 	bl	80053fe <HAL_UART_Transmit>
    HAL_Delay(100);
 8001920:	2064      	movs	r0, #100	; 0x64
 8001922:	f000 fd9b 	bl	800245c <HAL_Delay>

    MLX90614_WriteReg(MLX90614_EMISSIVITY, 0xFAE1);
 8001926:	f64f 21e1 	movw	r1, #64225	; 0xfae1
 800192a:	2024      	movs	r0, #36	; 0x24
 800192c:	f000 f852 	bl	80019d4 <MLX90614_WriteReg>
    MLX90614_ReadReg(MLX90614_EMISSIVITY, &data);
 8001930:	f107 030e 	add.w	r3, r7, #14
 8001934:	4619      	mov	r1, r3
 8001936:	2024      	movs	r0, #36	; 0x24
 8001938:	f000 f8c6 	bl	8001ac8 <MLX90614_ReadReg>
    sprintf(uart_buf, "EMISSIVITY: 0x%X\r\n", data);
 800193c:	89fb      	ldrh	r3, [r7, #14]
 800193e:	461a      	mov	r2, r3
 8001940:	4921      	ldr	r1, [pc, #132]	; (80019c8 <MLX90614_Init+0x194>)
 8001942:	481b      	ldr	r0, [pc, #108]	; (80019b0 <MLX90614_Init+0x17c>)
 8001944:	f004 fef6 	bl	8006734 <siprintf>
    HAL_UART_Transmit(&huart2, uart_buf, sizeof(uart_buf), 100);
 8001948:	2364      	movs	r3, #100	; 0x64
 800194a:	2280      	movs	r2, #128	; 0x80
 800194c:	4918      	ldr	r1, [pc, #96]	; (80019b0 <MLX90614_Init+0x17c>)
 800194e:	4819      	ldr	r0, [pc, #100]	; (80019b4 <MLX90614_Init+0x180>)
 8001950:	f003 fd55 	bl	80053fe <HAL_UART_Transmit>
    HAL_Delay(100);
 8001954:	2064      	movs	r0, #100	; 0x64
 8001956:	f000 fd81 	bl	800245c <HAL_Delay>

    MLX90614_ReadReg(MLX90614_CFG1, &data);
 800195a:	f107 030e 	add.w	r3, r7, #14
 800195e:	4619      	mov	r1, r3
 8001960:	2025      	movs	r0, #37	; 0x25
 8001962:	f000 f8b1 	bl	8001ac8 <MLX90614_ReadReg>
    sprintf(uart_buf, "CFG1: 0x%X\r\n", data);
 8001966:	89fb      	ldrh	r3, [r7, #14]
 8001968:	461a      	mov	r2, r3
 800196a:	4918      	ldr	r1, [pc, #96]	; (80019cc <MLX90614_Init+0x198>)
 800196c:	4810      	ldr	r0, [pc, #64]	; (80019b0 <MLX90614_Init+0x17c>)
 800196e:	f004 fee1 	bl	8006734 <siprintf>
    HAL_UART_Transmit(&huart2, uart_buf, sizeof(uart_buf), 100);
 8001972:	2364      	movs	r3, #100	; 0x64
 8001974:	2280      	movs	r2, #128	; 0x80
 8001976:	490e      	ldr	r1, [pc, #56]	; (80019b0 <MLX90614_Init+0x17c>)
 8001978:	480e      	ldr	r0, [pc, #56]	; (80019b4 <MLX90614_Init+0x180>)
 800197a:	f003 fd40 	bl	80053fe <HAL_UART_Transmit>
    HAL_Delay(100);
 800197e:	2064      	movs	r0, #100	; 0x64
 8001980:	f000 fd6c 	bl	800245c <HAL_Delay>
//    MLX90614_ReadReg(MLX90614_PWMCTRL, &data);
//    sprintf(uart_buf, "PWMCTRL: 0x%X\r\n", data);
//    HAL_UART_Transmit(&huart2, uart_buf, sizeof(uart_buf), 100);
//    HAL_Delay(100);

    sprintf(uart_buf, "MLX_90614 IR Sensor Initialization Finished.\r\n");
 8001984:	4912      	ldr	r1, [pc, #72]	; (80019d0 <MLX90614_Init+0x19c>)
 8001986:	480a      	ldr	r0, [pc, #40]	; (80019b0 <MLX90614_Init+0x17c>)
 8001988:	f004 fed4 	bl	8006734 <siprintf>
	HAL_UART_Transmit(&huart2, uart_buf, sizeof(uart_buf), 100);
 800198c:	2364      	movs	r3, #100	; 0x64
 800198e:	2280      	movs	r2, #128	; 0x80
 8001990:	4907      	ldr	r1, [pc, #28]	; (80019b0 <MLX90614_Init+0x17c>)
 8001992:	4808      	ldr	r0, [pc, #32]	; (80019b4 <MLX90614_Init+0x180>)
 8001994:	f003 fd33 	bl	80053fe <HAL_UART_Transmit>
	HAL_Delay(100);
 8001998:	2064      	movs	r0, #100	; 0x64
 800199a:	f000 fd5f 	bl	800245c <HAL_Delay>
}
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000348 	.word	0x20000348
 80019ac:	08008998 	.word	0x08008998
 80019b0:	2000034c 	.word	0x2000034c
 80019b4:	200002f8 	.word	0x200002f8
 80019b8:	080089cc 	.word	0x080089cc
 80019bc:	080089dc 	.word	0x080089dc
 80019c0:	080089ec 	.word	0x080089ec
 80019c4:	080089fc 	.word	0x080089fc
 80019c8:	08008a10 	.word	0x08008a10
 80019cc:	08008a24 	.word	0x08008a24
 80019d0:	08008a34 	.word	0x08008a34

080019d4 <MLX90614_WriteReg>:

void MLX90614_WriteReg(uint8_t regAddr, uint16_t data) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af02      	add	r7, sp, #8
 80019da:	4603      	mov	r3, r0
 80019dc:	460a      	mov	r2, r1
 80019de:	71fb      	strb	r3, [r7, #7]
 80019e0:	4613      	mov	r3, r2
 80019e2:	80bb      	strh	r3, [r7, #4]
	 *
	 */

	uint8_t i2cdata[4];
	uint8_t crc;
	uint8_t lsb = data & 0x00FF;
 80019e4:	88bb      	ldrh	r3, [r7, #4]
 80019e6:	73fb      	strb	r3, [r7, #15]
	uint8_t msb = (data >> 8);
 80019e8:	88bb      	ldrh	r3, [r7, #4]
 80019ea:	0a1b      	lsrs	r3, r3, #8
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	73bb      	strb	r3, [r7, #14]

	crc = crc8(0x0, MLX90614_DEFAULT_SA<<1);
 80019f0:	21b4      	movs	r1, #180	; 0xb4
 80019f2:	2000      	movs	r0, #0
 80019f4:	f7ff fef3 	bl	80017de <crc8>
 80019f8:	4603      	mov	r3, r0
 80019fa:	737b      	strb	r3, [r7, #13]
	crc = crc8(crc, regAddr);
 80019fc:	79fa      	ldrb	r2, [r7, #7]
 80019fe:	7b7b      	ldrb	r3, [r7, #13]
 8001a00:	4611      	mov	r1, r2
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff feeb 	bl	80017de <crc8>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	737b      	strb	r3, [r7, #13]
	crc = crc8(crc, 0x00);
 8001a0c:	7b7b      	ldrb	r3, [r7, #13]
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fee4 	bl	80017de <crc8>
 8001a16:	4603      	mov	r3, r0
 8001a18:	737b      	strb	r3, [r7, #13]
	crc = crc8(crc, 0x00);
 8001a1a:	7b7b      	ldrb	r3, [r7, #13]
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff fedd 	bl	80017de <crc8>
 8001a24:	4603      	mov	r3, r0
 8001a26:	737b      	strb	r3, [r7, #13]

	i2cdata[0] = regAddr;
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	723b      	strb	r3, [r7, #8]
	i2cdata[1] = 0x00;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	727b      	strb	r3, [r7, #9]
	i2cdata[2] = 0x00;
 8001a30:	2300      	movs	r3, #0
 8001a32:	72bb      	strb	r3, [r7, #10]
	i2cdata[3] = crc;
 8001a34:	7b7b      	ldrb	r3, [r7, #13]
 8001a36:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(MLX90614_i2c, (MLX90614_DEFAULT_SA << 1), i2cdata, 4, 0xFFFF);
 8001a38:	4b22      	ldr	r3, [pc, #136]	; (8001ac4 <MLX90614_WriteReg+0xf0>)
 8001a3a:	6818      	ldr	r0, [r3, #0]
 8001a3c:	f107 0208 	add.w	r2, r7, #8
 8001a40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	2304      	movs	r3, #4
 8001a48:	21b4      	movs	r1, #180	; 0xb4
 8001a4a:	f001 f91f 	bl	8002c8c <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001a4e:	200a      	movs	r0, #10
 8001a50:	f000 fd04 	bl	800245c <HAL_Delay>

	crc = crc8(0x0, MLX90614_DEFAULT_SA<<1);
 8001a54:	21b4      	movs	r1, #180	; 0xb4
 8001a56:	2000      	movs	r0, #0
 8001a58:	f7ff fec1 	bl	80017de <crc8>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	737b      	strb	r3, [r7, #13]
	crc = crc8(crc, regAddr);
 8001a60:	79fa      	ldrb	r2, [r7, #7]
 8001a62:	7b7b      	ldrb	r3, [r7, #13]
 8001a64:	4611      	mov	r1, r2
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff feb9 	bl	80017de <crc8>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	737b      	strb	r3, [r7, #13]
	crc = crc8(crc, lsb);
 8001a70:	7bfa      	ldrb	r2, [r7, #15]
 8001a72:	7b7b      	ldrb	r3, [r7, #13]
 8001a74:	4611      	mov	r1, r2
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff feb1 	bl	80017de <crc8>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	737b      	strb	r3, [r7, #13]
	crc = crc8(crc, msb);
 8001a80:	7bba      	ldrb	r2, [r7, #14]
 8001a82:	7b7b      	ldrb	r3, [r7, #13]
 8001a84:	4611      	mov	r1, r2
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fea9 	bl	80017de <crc8>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	737b      	strb	r3, [r7, #13]

	i2cdata[0] = regAddr;
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	723b      	strb	r3, [r7, #8]
	i2cdata[1] = lsb;
 8001a94:	7bfb      	ldrb	r3, [r7, #15]
 8001a96:	727b      	strb	r3, [r7, #9]
	i2cdata[2] = msb;
 8001a98:	7bbb      	ldrb	r3, [r7, #14]
 8001a9a:	72bb      	strb	r3, [r7, #10]
	i2cdata[3] = crc;
 8001a9c:	7b7b      	ldrb	r3, [r7, #13]
 8001a9e:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(MLX90614_i2c, (MLX90614_DEFAULT_SA << 1), i2cdata, 4, 0xFFFF);
 8001aa0:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <MLX90614_WriteReg+0xf0>)
 8001aa2:	6818      	ldr	r0, [r3, #0]
 8001aa4:	f107 0208 	add.w	r2, r7, #8
 8001aa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	2304      	movs	r3, #4
 8001ab0:	21b4      	movs	r1, #180	; 0xb4
 8001ab2:	f001 f8eb 	bl	8002c8c <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001ab6:	200a      	movs	r0, #10
 8001ab8:	f000 fcd0 	bl	800245c <HAL_Delay>

	return;
 8001abc:	bf00      	nop
}
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20000348 	.word	0x20000348

08001ac8 <MLX90614_ReadReg>:

bool MLX90614_ReadReg(uint8_t regAddr, uint16_t * dest) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b088      	sub	sp, #32
 8001acc:	af04      	add	r7, sp, #16
 8001ace:	4603      	mov	r3, r0
 8001ad0:	6039      	str	r1, [r7, #0]
 8001ad2:	71fb      	strb	r3, [r7, #7]
	 *
	 */

	uint8_t in_buff[3], crc;

	HAL_I2C_Mem_Read(MLX90614_i2c, (MLX90614_DEFAULT_SA<<1), regAddr, 1, in_buff, 3, 100);
 8001ad4:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <MLX90614_ReadReg+0xa0>)
 8001ad6:	6818      	ldr	r0, [r3, #0]
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	2364      	movs	r3, #100	; 0x64
 8001ade:	9302      	str	r3, [sp, #8]
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	9301      	str	r3, [sp, #4]
 8001ae4:	f107 030c 	add.w	r3, r7, #12
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	2301      	movs	r3, #1
 8001aec:	21b4      	movs	r1, #180	; 0xb4
 8001aee:	f001 fbf1 	bl	80032d4 <HAL_I2C_Mem_Read>

	crc = crc8(0x0, MLX90614_DEFAULT_SA<<1);
 8001af2:	21b4      	movs	r1, #180	; 0xb4
 8001af4:	2000      	movs	r0, #0
 8001af6:	f7ff fe72 	bl	80017de <crc8>
 8001afa:	4603      	mov	r3, r0
 8001afc:	73fb      	strb	r3, [r7, #15]
	crc = crc8(crc, regAddr);
 8001afe:	79fa      	ldrb	r2, [r7, #7]
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
 8001b02:	4611      	mov	r1, r2
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff fe6a 	bl	80017de <crc8>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	73fb      	strb	r3, [r7, #15]
	crc = crc8(crc, (MLX90614_DEFAULT_SA<<1) + 1);
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
 8001b10:	21b5      	movs	r1, #181	; 0xb5
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fe63 	bl	80017de <crc8>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	73fb      	strb	r3, [r7, #15]
	crc = crc8(crc, in_buff[0]);
 8001b1c:	7b3a      	ldrb	r2, [r7, #12]
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
 8001b20:	4611      	mov	r1, r2
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff fe5b 	bl	80017de <crc8>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	73fb      	strb	r3, [r7, #15]
	crc = crc8(crc, in_buff[1]);
 8001b2c:	7b7a      	ldrb	r2, [r7, #13]
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
 8001b30:	4611      	mov	r1, r2
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fe53 	bl	80017de <crc8>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	73fb      	strb	r3, [r7, #15]

	if (crc == in_buff[2]) {
 8001b3c:	7bbb      	ldrb	r3, [r7, #14]
 8001b3e:	7bfa      	ldrb	r2, [r7, #15]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d10b      	bne.n	8001b5c <MLX90614_ReadReg+0x94>
		*dest = ((uint16_t)in_buff[1] << 8) | in_buff[0];
 8001b44:	7b7b      	ldrb	r3, [r7, #13]
 8001b46:	021b      	lsls	r3, r3, #8
 8001b48:	b21a      	sxth	r2, r3
 8001b4a:	7b3b      	ldrb	r3, [r7, #12]
 8001b4c:	b21b      	sxth	r3, r3
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	b21b      	sxth	r3, r3
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	801a      	strh	r2, [r3, #0]
		return 1;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e000      	b.n	8001b5e <MLX90614_ReadReg+0x96>
	}

	else {
		return 0;
 8001b5c:	2300      	movs	r3, #0
	}
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000348 	.word	0x20000348

08001b6c <MLX90614_ReadTObj1>:

float MLX90614_ReadTObj1() {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
	uint16_t data;

	if(MLX90614_ReadReg(MLX90614_TOBJ1, &data)) {
 8001b72:	1dbb      	adds	r3, r7, #6
 8001b74:	4619      	mov	r1, r3
 8001b76:	2007      	movs	r0, #7
 8001b78:	f7ff ffa6 	bl	8001ac8 <MLX90614_ReadReg>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00d      	beq.n	8001b9e <MLX90614_ReadTObj1+0x32>
		if(data & 0x8000) {
 8001b82:	88fb      	ldrh	r3, [r7, #6]
 8001b84:	b21b      	sxth	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	da02      	bge.n	8001b90 <MLX90614_ReadTObj1+0x24>
			return -1.0;
 8001b8a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8001b8e:	e008      	b.n	8001ba2 <MLX90614_ReadTObj1+0x36>
		}
		return MLX90614_CalcTemp(data);
 8001b90:	88fb      	ldrh	r3, [r7, #6]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f000 f824 	bl	8001be0 <MLX90614_CalcTemp>
 8001b98:	eef0 7a40 	vmov.f32	s15, s0
 8001b9c:	e001      	b.n	8001ba2 <MLX90614_ReadTObj1+0x36>
	}
	return -1.00;
 8001b9e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
 8001ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <MLX90614_ReadTAmb>:
		return MLX90614_CalcTemp(data);
	}
	return -1.00;
}

float MLX90614_ReadTAmb() {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
	uint16_t data;

	if(MLX90614_ReadReg(MLX90614_TAMB, &data)) {
 8001bb2:	1dbb      	adds	r3, r7, #6
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	2006      	movs	r0, #6
 8001bb8:	f7ff ff86 	bl	8001ac8 <MLX90614_ReadReg>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d006      	beq.n	8001bd0 <MLX90614_ReadTAmb+0x24>
		return MLX90614_CalcTemp(data);
 8001bc2:	88fb      	ldrh	r3, [r7, #6]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f000 f80b 	bl	8001be0 <MLX90614_CalcTemp>
 8001bca:	eef0 7a40 	vmov.f32	s15, s0
 8001bce:	e001      	b.n	8001bd4 <MLX90614_ReadTAmb+0x28>
	}
	return -1.00;
 8001bd0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
 8001bd4:	eeb0 0a67 	vmov.f32	s0, s15
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <MLX90614_CalcTemp>:

float MLX90614_CalcTemp(uint16_t rawTemp) {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	80fb      	strh	r3, [r7, #6]
	float temp;

	temp = (int16_t)rawTemp*0.02 - 273.15; //Celsius
 8001bea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fca0 	bl	8000534 <__aeabi_i2d>
 8001bf4:	a30e      	add	r3, pc, #56	; (adr r3, 8001c30 <MLX90614_CalcTemp+0x50>)
 8001bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfa:	f7fe fd05 	bl	8000608 <__aeabi_dmul>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4610      	mov	r0, r2
 8001c04:	4619      	mov	r1, r3
 8001c06:	a30c      	add	r3, pc, #48	; (adr r3, 8001c38 <MLX90614_CalcTemp+0x58>)
 8001c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0c:	f7fe fb44 	bl	8000298 <__aeabi_dsub>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4610      	mov	r0, r2
 8001c16:	4619      	mov	r1, r3
 8001c18:	f7fe ffce 	bl	8000bb8 <__aeabi_d2f>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	60fb      	str	r3, [r7, #12]

	return temp;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	ee07 3a90 	vmov	s15, r3
	//TO DO: Implement other units
}
 8001c26:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	47ae147b 	.word	0x47ae147b
 8001c34:	3f947ae1 	.word	0x3f947ae1
 8001c38:	66666666 	.word	0x66666666
 8001c3c:	40711266 	.word	0x40711266

08001c40 <calculate_crc>:
	SHT3X_COMMAND_MEASURE_HIGHREP_10HZ = 0x2737,
	SHT3X_COMMAND_MEASURE_LOWREP_10HZ = 0x272a
} sht3x_command_t;

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b087      	sub	sp, #28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xff;
 8001c4a:	23ff      	movs	r3, #255	; 0xff
 8001c4c:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0; i < length; i++) {
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	e020      	b.n	8001c96 <calculate_crc+0x56>
		crc ^= data[i];
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	4413      	add	r3, r2
 8001c5a:	781a      	ldrb	r2, [r3, #0]
 8001c5c:	7dfb      	ldrb	r3, [r7, #23]
 8001c5e:	4053      	eors	r3, r2
 8001c60:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	e010      	b.n	8001c8a <calculate_crc+0x4a>
			if ((crc & 0x80u) != 0) {
 8001c68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	da06      	bge.n	8001c7e <calculate_crc+0x3e>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 8001c70:	7dfb      	ldrb	r3, [r7, #23]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8001c7a:	75fb      	strb	r3, [r7, #23]
 8001c7c:	e002      	b.n	8001c84 <calculate_crc+0x44>
			} else {
				crc <<= 1u;
 8001c7e:	7dfb      	ldrb	r3, [r7, #23]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	3301      	adds	r3, #1
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2b07      	cmp	r3, #7
 8001c8e:	d9eb      	bls.n	8001c68 <calculate_crc+0x28>
	for (size_t i = 0; i < length; i++) {
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	3301      	adds	r3, #1
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d3da      	bcc.n	8001c54 <calculate_crc+0x14>
			}
		}
	}
	return crc;
 8001c9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	371c      	adds	r7, #28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <sht3x_send_command>:

static bool sht3x_send_command(sht3x_handle_t *handle, sht3x_command_t command)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af02      	add	r7, sp, #8
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	807b      	strh	r3, [r7, #2]
	uint8_t command_buffer[2] = {(command & 0xff00u) >> 8u, command & 0xffu};
 8001cb8:	887b      	ldrh	r3, [r7, #2]
 8001cba:	0a1b      	lsrs	r3, r3, #8
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	733b      	strb	r3, [r7, #12]
 8001cc2:	887b      	ldrh	r3, [r7, #2]
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address << 1u, command_buffer, sizeof(command_buffer),
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6818      	ldr	r0, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	889b      	ldrh	r3, [r3, #4]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	b299      	uxth	r1, r3
 8001cd4:	f107 020c 	add.w	r2, r7, #12
 8001cd8:	231e      	movs	r3, #30
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	2302      	movs	r3, #2
 8001cde:	f000 ffd5 	bl	8002c8c <HAL_I2C_Master_Transmit>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <sht3x_send_command+0x40>
	                            SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	e000      	b.n	8001cee <sht3x_send_command+0x42>
	}

	return true;
 8001cec:	2301      	movs	r3, #1
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <uint8_to_uint16>:

static uint16_t uint8_to_uint16(uint8_t msb, uint8_t lsb)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	460a      	mov	r2, r1
 8001d00:	71fb      	strb	r3, [r7, #7]
 8001d02:	4613      	mov	r3, r2
 8001d04:	71bb      	strb	r3, [r7, #6]
	return (uint16_t)((uint16_t)msb << 8u) | lsb;
 8001d06:	79fb      	ldrb	r3, [r7, #7]
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	021b      	lsls	r3, r3, #8
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	79bb      	ldrb	r3, [r7, #6]
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	4313      	orrs	r3, r2
 8001d14:	b29b      	uxth	r3, r3
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
	...

08001d24 <sht3x_init>:

bool sht3x_init(sht3x_handle_t *handle)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b088      	sub	sp, #32
 8001d28:	af04      	add	r7, sp, #16
 8001d2a:	6078      	str	r0, [r7, #4]
	assert(handle->i2c_handle->Init.NoStretchMode == I2C_NOSTRETCH_DISABLE);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d005      	beq.n	8001d42 <sht3x_init+0x1e>
 8001d36:	4b18      	ldr	r3, [pc, #96]	; (8001d98 <sht3x_init+0x74>)
 8001d38:	4a18      	ldr	r2, [pc, #96]	; (8001d9c <sht3x_init+0x78>)
 8001d3a:	2138      	movs	r1, #56	; 0x38
 8001d3c:	4818      	ldr	r0, [pc, #96]	; (8001da0 <sht3x_init+0x7c>)
 8001d3e:	f003 fed3 	bl	8005ae8 <__assert_func>
	// TODO: Assert i2c frequency is not too high

	uint8_t status_reg_and_checksum[3];
	if (HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address << 1u, SHT3X_COMMAND_READ_STATUS, 2, (uint8_t*)&status_reg_and_checksum,
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6818      	ldr	r0, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	889b      	ldrh	r3, [r3, #4]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	b299      	uxth	r1, r3
 8001d4e:	231e      	movs	r3, #30
 8001d50:	9302      	str	r3, [sp, #8]
 8001d52:	2303      	movs	r3, #3
 8001d54:	9301      	str	r3, [sp, #4]
 8001d56:	f107 030c 	add.w	r3, r7, #12
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	f24f 322d 	movw	r2, #62253	; 0xf32d
 8001d62:	f001 fab7 	bl	80032d4 <HAL_I2C_Mem_Read>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <sht3x_init+0x4c>
					  sizeof(status_reg_and_checksum), SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	e00e      	b.n	8001d8e <sht3x_init+0x6a>
	}

	uint8_t calculated_crc = calculate_crc(status_reg_and_checksum, 2);
 8001d70:	f107 030c 	add.w	r3, r7, #12
 8001d74:	2102      	movs	r1, #2
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff ff62 	bl	8001c40 <calculate_crc>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	73fb      	strb	r3, [r7, #15]

	if (calculated_crc != status_reg_and_checksum[2]) {
 8001d80:	7bbb      	ldrb	r3, [r7, #14]
 8001d82:	7bfa      	ldrb	r2, [r7, #15]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d001      	beq.n	8001d8c <sht3x_init+0x68>
		return false;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	e000      	b.n	8001d8e <sht3x_init+0x6a>
	}

	return true;
 8001d8c:	2301      	movs	r3, #1
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	08008a64 	.word	0x08008a64
 8001d9c:	08008ab8 	.word	0x08008ab8
 8001da0:	08008aa4 	.word	0x08008aa4

08001da4 <sht3x_read_temperature_and_humidity>:

bool sht3x_read_temperature_and_humidity(sht3x_handle_t *handle, float *temperature, float *humidity)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08a      	sub	sp, #40	; 0x28
 8001da8:	af02      	add	r7, sp, #8
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
	sht3x_send_command(handle, SHT3X_COMMAND_MEASURE_HIGHREP_STRETCH);
 8001db0:	f642 4106 	movw	r1, #11270	; 0x2c06
 8001db4:	68f8      	ldr	r0, [r7, #12]
 8001db6:	f7ff ff79 	bl	8001cac <sht3x_send_command>

	HAL_Delay(1);
 8001dba:	2001      	movs	r0, #1
 8001dbc:	f000 fb4e 	bl	800245c <HAL_Delay>

	uint8_t buffer[6];
	if (HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address << 1u, buffer, sizeof(buffer), SHT3X_I2C_TIMEOUT) != HAL_OK) {
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6818      	ldr	r0, [r3, #0]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	889b      	ldrh	r3, [r3, #4]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	b299      	uxth	r1, r3
 8001dcc:	f107 0214 	add.w	r2, r7, #20
 8001dd0:	231e      	movs	r3, #30
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	2306      	movs	r3, #6
 8001dd6:	f001 f857 	bl	8002e88 <HAL_I2C_Master_Receive>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <sht3x_read_temperature_and_humidity+0x40>
		return false;
 8001de0:	2300      	movs	r3, #0
 8001de2:	e050      	b.n	8001e86 <sht3x_read_temperature_and_humidity+0xe2>
	}

	uint8_t temperature_crc = calculate_crc(buffer, 2);
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	2102      	movs	r1, #2
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff ff28 	bl	8001c40 <calculate_crc>
 8001df0:	4603      	mov	r3, r0
 8001df2:	77fb      	strb	r3, [r7, #31]
	uint8_t humidity_crc = calculate_crc(buffer + 3, 2);
 8001df4:	f107 0314 	add.w	r3, r7, #20
 8001df8:	3303      	adds	r3, #3
 8001dfa:	2102      	movs	r1, #2
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ff1f 	bl	8001c40 <calculate_crc>
 8001e02:	4603      	mov	r3, r0
 8001e04:	77bb      	strb	r3, [r7, #30]
	if (temperature_crc != buffer[2] || humidity_crc != buffer[5]) {
 8001e06:	7dbb      	ldrb	r3, [r7, #22]
 8001e08:	7ffa      	ldrb	r2, [r7, #31]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d103      	bne.n	8001e16 <sht3x_read_temperature_and_humidity+0x72>
 8001e0e:	7e7b      	ldrb	r3, [r7, #25]
 8001e10:	7fba      	ldrb	r2, [r7, #30]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d001      	beq.n	8001e1a <sht3x_read_temperature_and_humidity+0x76>
		return false;
 8001e16:	2300      	movs	r3, #0
 8001e18:	e035      	b.n	8001e86 <sht3x_read_temperature_and_humidity+0xe2>
	}

	int16_t temperature_raw = (int16_t)uint8_to_uint16(buffer[0], buffer[1]);
 8001e1a:	7d3b      	ldrb	r3, [r7, #20]
 8001e1c:	7d7a      	ldrb	r2, [r7, #21]
 8001e1e:	4611      	mov	r1, r2
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff68 	bl	8001cf6 <uint8_to_uint16>
 8001e26:	4603      	mov	r3, r0
 8001e28:	83bb      	strh	r3, [r7, #28]
	uint16_t humidity_raw = uint8_to_uint16(buffer[3], buffer[4]);
 8001e2a:	7dfb      	ldrb	r3, [r7, #23]
 8001e2c:	7e3a      	ldrb	r2, [r7, #24]
 8001e2e:	4611      	mov	r1, r2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff60 	bl	8001cf6 <uint8_to_uint16>
 8001e36:	4603      	mov	r3, r0
 8001e38:	837b      	strh	r3, [r7, #26]

	*temperature = -45.0f + 175.0f * (float)temperature_raw / 65535.0f;
 8001e3a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e3e:	ee07 3a90 	vmov	s15, r3
 8001e42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e46:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001e90 <sht3x_read_temperature_and_humidity+0xec>
 8001e4a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e4e:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001e94 <sht3x_read_temperature_and_humidity+0xf0>
 8001e52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e56:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001e98 <sht3x_read_temperature_and_humidity+0xf4>
 8001e5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	edc3 7a00 	vstr	s15, [r3]
	*humidity = 100.0f * (float)humidity_raw / 65535.0f;
 8001e64:	8b7b      	ldrh	r3, [r7, #26]
 8001e66:	ee07 3a90 	vmov	s15, r3
 8001e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e6e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001e9c <sht3x_read_temperature_and_humidity+0xf8>
 8001e72:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e76:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001e94 <sht3x_read_temperature_and_humidity+0xf0>
 8001e7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	edc3 7a00 	vstr	s15, [r3]

	return true;
 8001e84:	2301      	movs	r3, #1
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3720      	adds	r7, #32
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	432f0000 	.word	0x432f0000
 8001e94:	477fff00 	.word	0x477fff00
 8001e98:	42340000 	.word	0x42340000
 8001e9c:	42c80000 	.word	0x42c80000

08001ea0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	607b      	str	r3, [r7, #4]
 8001eaa:	4b10      	ldr	r3, [pc, #64]	; (8001eec <HAL_MspInit+0x4c>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	4a0f      	ldr	r2, [pc, #60]	; (8001eec <HAL_MspInit+0x4c>)
 8001eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb6:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <HAL_MspInit+0x4c>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ebe:	607b      	str	r3, [r7, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	603b      	str	r3, [r7, #0]
 8001ec6:	4b09      	ldr	r3, [pc, #36]	; (8001eec <HAL_MspInit+0x4c>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	4a08      	ldr	r2, [pc, #32]	; (8001eec <HAL_MspInit+0x4c>)
 8001ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_MspInit+0x4c>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eda:	603b      	str	r3, [r7, #0]
 8001edc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ede:	2007      	movs	r0, #7
 8001ee0:	f000 fbb0 	bl	8002644 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ee4:	bf00      	nop
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40023800 	.word	0x40023800

08001ef0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08c      	sub	sp, #48	; 0x30
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 031c 	add.w	r3, r7, #28
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a42      	ldr	r2, [pc, #264]	; (8002018 <HAL_I2C_MspInit+0x128>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d12d      	bne.n	8001f6e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	61bb      	str	r3, [r7, #24]
 8001f16:	4b41      	ldr	r3, [pc, #260]	; (800201c <HAL_I2C_MspInit+0x12c>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	4a40      	ldr	r2, [pc, #256]	; (800201c <HAL_I2C_MspInit+0x12c>)
 8001f1c:	f043 0302 	orr.w	r3, r3, #2
 8001f20:	6313      	str	r3, [r2, #48]	; 0x30
 8001f22:	4b3e      	ldr	r3, [pc, #248]	; (800201c <HAL_I2C_MspInit+0x12c>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	61bb      	str	r3, [r7, #24]
 8001f2c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f34:	2312      	movs	r3, #18
 8001f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f40:	2304      	movs	r3, #4
 8001f42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f44:	f107 031c 	add.w	r3, r7, #28
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4835      	ldr	r0, [pc, #212]	; (8002020 <HAL_I2C_MspInit+0x130>)
 8001f4c:	f000 fbbc 	bl	80026c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]
 8001f54:	4b31      	ldr	r3, [pc, #196]	; (800201c <HAL_I2C_MspInit+0x12c>)
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	4a30      	ldr	r2, [pc, #192]	; (800201c <HAL_I2C_MspInit+0x12c>)
 8001f5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f60:	4b2e      	ldr	r3, [pc, #184]	; (800201c <HAL_I2C_MspInit+0x12c>)
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f68:	617b      	str	r3, [r7, #20]
 8001f6a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001f6c:	e04f      	b.n	800200e <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a2c      	ldr	r2, [pc, #176]	; (8002024 <HAL_I2C_MspInit+0x134>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d14a      	bne.n	800200e <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f78:	2300      	movs	r3, #0
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	4b27      	ldr	r3, [pc, #156]	; (800201c <HAL_I2C_MspInit+0x12c>)
 8001f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f80:	4a26      	ldr	r2, [pc, #152]	; (800201c <HAL_I2C_MspInit+0x12c>)
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	6313      	str	r3, [r2, #48]	; 0x30
 8001f88:	4b24      	ldr	r3, [pc, #144]	; (800201c <HAL_I2C_MspInit+0x12c>)
 8001f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	613b      	str	r3, [r7, #16]
 8001f92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f94:	2300      	movs	r3, #0
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	4b20      	ldr	r3, [pc, #128]	; (800201c <HAL_I2C_MspInit+0x12c>)
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9c:	4a1f      	ldr	r2, [pc, #124]	; (800201c <HAL_I2C_MspInit+0x12c>)
 8001f9e:	f043 0302 	orr.w	r3, r3, #2
 8001fa2:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa4:	4b1d      	ldr	r3, [pc, #116]	; (800201c <HAL_I2C_MspInit+0x12c>)
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001fb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fb6:	2312      	movs	r3, #18
 8001fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001fc2:	2304      	movs	r3, #4
 8001fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc6:	f107 031c 	add.w	r3, r7, #28
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4816      	ldr	r0, [pc, #88]	; (8002028 <HAL_I2C_MspInit+0x138>)
 8001fce:	f000 fb7b 	bl	80026c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001fd2:	2310      	movs	r3, #16
 8001fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fd6:	2312      	movs	r3, #18
 8001fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8001fe2:	2309      	movs	r3, #9
 8001fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe6:	f107 031c 	add.w	r3, r7, #28
 8001fea:	4619      	mov	r1, r3
 8001fec:	480c      	ldr	r0, [pc, #48]	; (8002020 <HAL_I2C_MspInit+0x130>)
 8001fee:	f000 fb6b 	bl	80026c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60bb      	str	r3, [r7, #8]
 8001ff6:	4b09      	ldr	r3, [pc, #36]	; (800201c <HAL_I2C_MspInit+0x12c>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	4a08      	ldr	r2, [pc, #32]	; (800201c <HAL_I2C_MspInit+0x12c>)
 8001ffc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002000:	6413      	str	r3, [r2, #64]	; 0x40
 8002002:	4b06      	ldr	r3, [pc, #24]	; (800201c <HAL_I2C_MspInit+0x12c>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	68bb      	ldr	r3, [r7, #8]
}
 800200e:	bf00      	nop
 8002010:	3730      	adds	r7, #48	; 0x30
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40005400 	.word	0x40005400
 800201c:	40023800 	.word	0x40023800
 8002020:	40020400 	.word	0x40020400
 8002024:	40005c00 	.word	0x40005c00
 8002028:	40020000 	.word	0x40020000

0800202c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a0e      	ldr	r2, [pc, #56]	; (8002074 <HAL_TIM_Base_MspInit+0x48>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d115      	bne.n	800206a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <HAL_TIM_Base_MspInit+0x4c>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	4a0c      	ldr	r2, [pc, #48]	; (8002078 <HAL_TIM_Base_MspInit+0x4c>)
 8002048:	f043 0302 	orr.w	r3, r3, #2
 800204c:	6413      	str	r3, [r2, #64]	; 0x40
 800204e:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <HAL_TIM_Base_MspInit+0x4c>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800205a:	2200      	movs	r2, #0
 800205c:	2100      	movs	r1, #0
 800205e:	201d      	movs	r0, #29
 8002060:	f000 fafb 	bl	800265a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002064:	201d      	movs	r0, #29
 8002066:	f000 fb14 	bl	8002692 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800206a:	bf00      	nop
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40000400 	.word	0x40000400
 8002078:	40023800 	.word	0x40023800

0800207c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08a      	sub	sp, #40	; 0x28
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002084:	f107 0314 	add.w	r3, r7, #20
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a19      	ldr	r2, [pc, #100]	; (8002100 <HAL_UART_MspInit+0x84>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d12b      	bne.n	80020f6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	4b18      	ldr	r3, [pc, #96]	; (8002104 <HAL_UART_MspInit+0x88>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	4a17      	ldr	r2, [pc, #92]	; (8002104 <HAL_UART_MspInit+0x88>)
 80020a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ac:	6413      	str	r3, [r2, #64]	; 0x40
 80020ae:	4b15      	ldr	r3, [pc, #84]	; (8002104 <HAL_UART_MspInit+0x88>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b6:	613b      	str	r3, [r7, #16]
 80020b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	4b11      	ldr	r3, [pc, #68]	; (8002104 <HAL_UART_MspInit+0x88>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	4a10      	ldr	r2, [pc, #64]	; (8002104 <HAL_UART_MspInit+0x88>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ca:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <HAL_UART_MspInit+0x88>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020d6:	230c      	movs	r3, #12
 80020d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020da:	2302      	movs	r3, #2
 80020dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e2:	2303      	movs	r3, #3
 80020e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020e6:	2307      	movs	r3, #7
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ea:	f107 0314 	add.w	r3, r7, #20
 80020ee:	4619      	mov	r1, r3
 80020f0:	4805      	ldr	r0, [pc, #20]	; (8002108 <HAL_UART_MspInit+0x8c>)
 80020f2:	f000 fae9 	bl	80026c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020f6:	bf00      	nop
 80020f8:	3728      	adds	r7, #40	; 0x28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40004400 	.word	0x40004400
 8002104:	40023800 	.word	0x40023800
 8002108:	40020000 	.word	0x40020000

0800210c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002110:	e7fe      	b.n	8002110 <NMI_Handler+0x4>

08002112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002112:	b480      	push	{r7}
 8002114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002116:	e7fe      	b.n	8002116 <HardFault_Handler+0x4>

08002118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800211c:	e7fe      	b.n	800211c <MemManage_Handler+0x4>

0800211e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002122:	e7fe      	b.n	8002122 <BusFault_Handler+0x4>

08002124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002128:	e7fe      	b.n	8002128 <UsageFault_Handler+0x4>

0800212a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800212a:	b480      	push	{r7}
 800212c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002146:	b480      	push	{r7}
 8002148:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002158:	f000 f960 	bl	800241c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800215c:	bf00      	nop
 800215e:	bd80      	pop	{r7, pc}

08002160 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002164:	4802      	ldr	r0, [pc, #8]	; (8002170 <TIM3_IRQHandler+0x10>)
 8002166:	f002 fd69 	bl	8004c3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	200002b0 	.word	0x200002b0

08002174 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
	return 1;
 8002178:	2301      	movs	r3, #1
}
 800217a:	4618      	mov	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <_kill>:

int _kill(int pid, int sig)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800218e:	f003 fcc9 	bl	8005b24 <__errno>
 8002192:	4603      	mov	r3, r0
 8002194:	2216      	movs	r2, #22
 8002196:	601a      	str	r2, [r3, #0]
	return -1;
 8002198:	f04f 33ff 	mov.w	r3, #4294967295
}
 800219c:	4618      	mov	r0, r3
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <_exit>:

void _exit (int status)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80021ac:	f04f 31ff 	mov.w	r1, #4294967295
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7ff ffe7 	bl	8002184 <_kill>
	while (1) {}		/* Make sure we hang here */
 80021b6:	e7fe      	b.n	80021b6 <_exit+0x12>

080021b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	e00a      	b.n	80021e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021ca:	f3af 8000 	nop.w
 80021ce:	4601      	mov	r1, r0
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	60ba      	str	r2, [r7, #8]
 80021d6:	b2ca      	uxtb	r2, r1
 80021d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	3301      	adds	r3, #1
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	dbf0      	blt.n	80021ca <_read+0x12>
	}

return len;
 80021e8:	687b      	ldr	r3, [r7, #4]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b086      	sub	sp, #24
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	60f8      	str	r0, [r7, #12]
 80021fa:	60b9      	str	r1, [r7, #8]
 80021fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	e009      	b.n	8002218 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	1c5a      	adds	r2, r3, #1
 8002208:	60ba      	str	r2, [r7, #8]
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	3301      	adds	r3, #1
 8002216:	617b      	str	r3, [r7, #20]
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	429a      	cmp	r2, r3
 800221e:	dbf1      	blt.n	8002204 <_write+0x12>
	}
	return len;
 8002220:	687b      	ldr	r3, [r7, #4]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <_close>:

int _close(int file)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
	return -1;
 8002232:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002236:	4618      	mov	r0, r3
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
 800224a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002252:	605a      	str	r2, [r3, #4]
	return 0;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <_isatty>:

int _isatty(int file)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
	return 1;
 800226a:	2301      	movs	r3, #1
}
 800226c:	4618      	mov	r0, r3
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
	return 0;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
	...

08002294 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800229c:	4a14      	ldr	r2, [pc, #80]	; (80022f0 <_sbrk+0x5c>)
 800229e:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <_sbrk+0x60>)
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022a8:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <_sbrk+0x64>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d102      	bne.n	80022b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022b0:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <_sbrk+0x64>)
 80022b2:	4a12      	ldr	r2, [pc, #72]	; (80022fc <_sbrk+0x68>)
 80022b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <_sbrk+0x64>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4413      	add	r3, r2
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d207      	bcs.n	80022d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022c4:	f003 fc2e 	bl	8005b24 <__errno>
 80022c8:	4603      	mov	r3, r0
 80022ca:	220c      	movs	r2, #12
 80022cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022ce:	f04f 33ff 	mov.w	r3, #4294967295
 80022d2:	e009      	b.n	80022e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022d4:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <_sbrk+0x64>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022da:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <_sbrk+0x64>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4413      	add	r3, r2
 80022e2:	4a05      	ldr	r2, [pc, #20]	; (80022f8 <_sbrk+0x64>)
 80022e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022e6:	68fb      	ldr	r3, [r7, #12]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20018000 	.word	0x20018000
 80022f4:	00000400 	.word	0x00000400
 80022f8:	200003cc 	.word	0x200003cc
 80022fc:	200003e8 	.word	0x200003e8

08002300 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <SystemInit+0x20>)
 8002306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230a:	4a05      	ldr	r2, [pc, #20]	; (8002320 <SystemInit+0x20>)
 800230c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002310:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002324:	f8df d034 	ldr.w	sp, [pc, #52]	; 800235c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002328:	480d      	ldr	r0, [pc, #52]	; (8002360 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800232a:	490e      	ldr	r1, [pc, #56]	; (8002364 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800232c:	4a0e      	ldr	r2, [pc, #56]	; (8002368 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800232e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002330:	e002      	b.n	8002338 <LoopCopyDataInit>

08002332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002336:	3304      	adds	r3, #4

08002338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800233a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800233c:	d3f9      	bcc.n	8002332 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800233e:	4a0b      	ldr	r2, [pc, #44]	; (800236c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002340:	4c0b      	ldr	r4, [pc, #44]	; (8002370 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002344:	e001      	b.n	800234a <LoopFillZerobss>

08002346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002348:	3204      	adds	r2, #4

0800234a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800234a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800234c:	d3fb      	bcc.n	8002346 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800234e:	f7ff ffd7 	bl	8002300 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002352:	f003 fbff 	bl	8005b54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002356:	f7fe ff57 	bl	8001208 <main>
  bx  lr    
 800235a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800235c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002364:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002368:	08008ec8 	.word	0x08008ec8
  ldr r2, =_sbss
 800236c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002370:	200003e4 	.word	0x200003e4

08002374 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002374:	e7fe      	b.n	8002374 <ADC_IRQHandler>
	...

08002378 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800237c:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <HAL_Init+0x40>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a0d      	ldr	r2, [pc, #52]	; (80023b8 <HAL_Init+0x40>)
 8002382:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002386:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002388:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <HAL_Init+0x40>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a0a      	ldr	r2, [pc, #40]	; (80023b8 <HAL_Init+0x40>)
 800238e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002392:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002394:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <HAL_Init+0x40>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a07      	ldr	r2, [pc, #28]	; (80023b8 <HAL_Init+0x40>)
 800239a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800239e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023a0:	2003      	movs	r0, #3
 80023a2:	f000 f94f 	bl	8002644 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023a6:	2000      	movs	r0, #0
 80023a8:	f000 f808 	bl	80023bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023ac:	f7ff fd78 	bl	8001ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40023c00 	.word	0x40023c00

080023bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023c4:	4b12      	ldr	r3, [pc, #72]	; (8002410 <HAL_InitTick+0x54>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4b12      	ldr	r3, [pc, #72]	; (8002414 <HAL_InitTick+0x58>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	4619      	mov	r1, r3
 80023ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 f967 	bl	80026ae <HAL_SYSTICK_Config>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e00e      	b.n	8002408 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b0f      	cmp	r3, #15
 80023ee:	d80a      	bhi.n	8002406 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023f0:	2200      	movs	r2, #0
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	f04f 30ff 	mov.w	r0, #4294967295
 80023f8:	f000 f92f 	bl	800265a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023fc:	4a06      	ldr	r2, [pc, #24]	; (8002418 <HAL_InitTick+0x5c>)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002402:	2300      	movs	r3, #0
 8002404:	e000      	b.n	8002408 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
}
 8002408:	4618      	mov	r0, r3
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20000008 	.word	0x20000008
 8002414:	20000010 	.word	0x20000010
 8002418:	2000000c 	.word	0x2000000c

0800241c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002420:	4b06      	ldr	r3, [pc, #24]	; (800243c <HAL_IncTick+0x20>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	461a      	mov	r2, r3
 8002426:	4b06      	ldr	r3, [pc, #24]	; (8002440 <HAL_IncTick+0x24>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4413      	add	r3, r2
 800242c:	4a04      	ldr	r2, [pc, #16]	; (8002440 <HAL_IncTick+0x24>)
 800242e:	6013      	str	r3, [r2, #0]
}
 8002430:	bf00      	nop
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	20000010 	.word	0x20000010
 8002440:	200003d0 	.word	0x200003d0

08002444 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  return uwTick;
 8002448:	4b03      	ldr	r3, [pc, #12]	; (8002458 <HAL_GetTick+0x14>)
 800244a:	681b      	ldr	r3, [r3, #0]
}
 800244c:	4618      	mov	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	200003d0 	.word	0x200003d0

0800245c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002464:	f7ff ffee 	bl	8002444 <HAL_GetTick>
 8002468:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002474:	d005      	beq.n	8002482 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002476:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <HAL_Delay+0x44>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4413      	add	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002482:	bf00      	nop
 8002484:	f7ff ffde 	bl	8002444 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	429a      	cmp	r2, r3
 8002492:	d8f7      	bhi.n	8002484 <HAL_Delay+0x28>
  {
  }
}
 8002494:	bf00      	nop
 8002496:	bf00      	nop
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000010 	.word	0x20000010

080024a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024b4:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <__NVIC_SetPriorityGrouping+0x44>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024c0:	4013      	ands	r3, r2
 80024c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024d6:	4a04      	ldr	r2, [pc, #16]	; (80024e8 <__NVIC_SetPriorityGrouping+0x44>)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	60d3      	str	r3, [r2, #12]
}
 80024dc:	bf00      	nop
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	e000ed00 	.word	0xe000ed00

080024ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024f0:	4b04      	ldr	r3, [pc, #16]	; (8002504 <__NVIC_GetPriorityGrouping+0x18>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	0a1b      	lsrs	r3, r3, #8
 80024f6:	f003 0307 	and.w	r3, r3, #7
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	e000ed00 	.word	0xe000ed00

08002508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	2b00      	cmp	r3, #0
 8002518:	db0b      	blt.n	8002532 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800251a:	79fb      	ldrb	r3, [r7, #7]
 800251c:	f003 021f 	and.w	r2, r3, #31
 8002520:	4907      	ldr	r1, [pc, #28]	; (8002540 <__NVIC_EnableIRQ+0x38>)
 8002522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002526:	095b      	lsrs	r3, r3, #5
 8002528:	2001      	movs	r0, #1
 800252a:	fa00 f202 	lsl.w	r2, r0, r2
 800252e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	e000e100 	.word	0xe000e100

08002544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	6039      	str	r1, [r7, #0]
 800254e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002554:	2b00      	cmp	r3, #0
 8002556:	db0a      	blt.n	800256e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	b2da      	uxtb	r2, r3
 800255c:	490c      	ldr	r1, [pc, #48]	; (8002590 <__NVIC_SetPriority+0x4c>)
 800255e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002562:	0112      	lsls	r2, r2, #4
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	440b      	add	r3, r1
 8002568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800256c:	e00a      	b.n	8002584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	b2da      	uxtb	r2, r3
 8002572:	4908      	ldr	r1, [pc, #32]	; (8002594 <__NVIC_SetPriority+0x50>)
 8002574:	79fb      	ldrb	r3, [r7, #7]
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	3b04      	subs	r3, #4
 800257c:	0112      	lsls	r2, r2, #4
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	440b      	add	r3, r1
 8002582:	761a      	strb	r2, [r3, #24]
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	e000e100 	.word	0xe000e100
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002598:	b480      	push	{r7}
 800259a:	b089      	sub	sp, #36	; 0x24
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f1c3 0307 	rsb	r3, r3, #7
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	bf28      	it	cs
 80025b6:	2304      	movcs	r3, #4
 80025b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	3304      	adds	r3, #4
 80025be:	2b06      	cmp	r3, #6
 80025c0:	d902      	bls.n	80025c8 <NVIC_EncodePriority+0x30>
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	3b03      	subs	r3, #3
 80025c6:	e000      	b.n	80025ca <NVIC_EncodePriority+0x32>
 80025c8:	2300      	movs	r3, #0
 80025ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025cc:	f04f 32ff 	mov.w	r2, #4294967295
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43da      	mvns	r2, r3
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	401a      	ands	r2, r3
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025e0:	f04f 31ff 	mov.w	r1, #4294967295
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ea:	43d9      	mvns	r1, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f0:	4313      	orrs	r3, r2
         );
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3724      	adds	r7, #36	; 0x24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
	...

08002600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3b01      	subs	r3, #1
 800260c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002610:	d301      	bcc.n	8002616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002612:	2301      	movs	r3, #1
 8002614:	e00f      	b.n	8002636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002616:	4a0a      	ldr	r2, [pc, #40]	; (8002640 <SysTick_Config+0x40>)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3b01      	subs	r3, #1
 800261c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800261e:	210f      	movs	r1, #15
 8002620:	f04f 30ff 	mov.w	r0, #4294967295
 8002624:	f7ff ff8e 	bl	8002544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002628:	4b05      	ldr	r3, [pc, #20]	; (8002640 <SysTick_Config+0x40>)
 800262a:	2200      	movs	r2, #0
 800262c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800262e:	4b04      	ldr	r3, [pc, #16]	; (8002640 <SysTick_Config+0x40>)
 8002630:	2207      	movs	r2, #7
 8002632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	e000e010 	.word	0xe000e010

08002644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f7ff ff29 	bl	80024a4 <__NVIC_SetPriorityGrouping>
}
 8002652:	bf00      	nop
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800265a:	b580      	push	{r7, lr}
 800265c:	b086      	sub	sp, #24
 800265e:	af00      	add	r7, sp, #0
 8002660:	4603      	mov	r3, r0
 8002662:	60b9      	str	r1, [r7, #8]
 8002664:	607a      	str	r2, [r7, #4]
 8002666:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800266c:	f7ff ff3e 	bl	80024ec <__NVIC_GetPriorityGrouping>
 8002670:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	68b9      	ldr	r1, [r7, #8]
 8002676:	6978      	ldr	r0, [r7, #20]
 8002678:	f7ff ff8e 	bl	8002598 <NVIC_EncodePriority>
 800267c:	4602      	mov	r2, r0
 800267e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002682:	4611      	mov	r1, r2
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff ff5d 	bl	8002544 <__NVIC_SetPriority>
}
 800268a:	bf00      	nop
 800268c:	3718      	adds	r7, #24
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b082      	sub	sp, #8
 8002696:	af00      	add	r7, sp, #0
 8002698:	4603      	mov	r3, r0
 800269a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800269c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff ff31 	bl	8002508 <__NVIC_EnableIRQ>
}
 80026a6:	bf00      	nop
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b082      	sub	sp, #8
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7ff ffa2 	bl	8002600 <SysTick_Config>
 80026bc:	4603      	mov	r3, r0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b089      	sub	sp, #36	; 0x24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026da:	2300      	movs	r3, #0
 80026dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026de:	2300      	movs	r3, #0
 80026e0:	61fb      	str	r3, [r7, #28]
 80026e2:	e159      	b.n	8002998 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026e4:	2201      	movs	r2, #1
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	4013      	ands	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	f040 8148 	bne.w	8002992 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	2b01      	cmp	r3, #1
 800270c:	d005      	beq.n	800271a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002716:	2b02      	cmp	r3, #2
 8002718:	d130      	bne.n	800277c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	2203      	movs	r2, #3
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43db      	mvns	r3, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002750:	2201      	movs	r2, #1
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	43db      	mvns	r3, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4013      	ands	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	091b      	lsrs	r3, r3, #4
 8002766:	f003 0201 	and.w	r2, r3, #1
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 0303 	and.w	r3, r3, #3
 8002784:	2b03      	cmp	r3, #3
 8002786:	d017      	beq.n	80027b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	2203      	movs	r2, #3
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f003 0303 	and.w	r3, r3, #3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d123      	bne.n	800280c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	08da      	lsrs	r2, r3, #3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3208      	adds	r2, #8
 80027cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	220f      	movs	r2, #15
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43db      	mvns	r3, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4013      	ands	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	691a      	ldr	r2, [r3, #16]
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	08da      	lsrs	r2, r3, #3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3208      	adds	r2, #8
 8002806:	69b9      	ldr	r1, [r7, #24]
 8002808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	2203      	movs	r2, #3
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	43db      	mvns	r3, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4013      	ands	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 0203 	and.w	r2, r3, #3
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4313      	orrs	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 80a2 	beq.w	8002992 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	4b57      	ldr	r3, [pc, #348]	; (80029b0 <HAL_GPIO_Init+0x2e8>)
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	4a56      	ldr	r2, [pc, #344]	; (80029b0 <HAL_GPIO_Init+0x2e8>)
 8002858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800285c:	6453      	str	r3, [r2, #68]	; 0x44
 800285e:	4b54      	ldr	r3, [pc, #336]	; (80029b0 <HAL_GPIO_Init+0x2e8>)
 8002860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800286a:	4a52      	ldr	r2, [pc, #328]	; (80029b4 <HAL_GPIO_Init+0x2ec>)
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	089b      	lsrs	r3, r3, #2
 8002870:	3302      	adds	r3, #2
 8002872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002876:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	220f      	movs	r2, #15
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43db      	mvns	r3, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4013      	ands	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a49      	ldr	r2, [pc, #292]	; (80029b8 <HAL_GPIO_Init+0x2f0>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d019      	beq.n	80028ca <HAL_GPIO_Init+0x202>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a48      	ldr	r2, [pc, #288]	; (80029bc <HAL_GPIO_Init+0x2f4>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d013      	beq.n	80028c6 <HAL_GPIO_Init+0x1fe>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a47      	ldr	r2, [pc, #284]	; (80029c0 <HAL_GPIO_Init+0x2f8>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d00d      	beq.n	80028c2 <HAL_GPIO_Init+0x1fa>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a46      	ldr	r2, [pc, #280]	; (80029c4 <HAL_GPIO_Init+0x2fc>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d007      	beq.n	80028be <HAL_GPIO_Init+0x1f6>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a45      	ldr	r2, [pc, #276]	; (80029c8 <HAL_GPIO_Init+0x300>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d101      	bne.n	80028ba <HAL_GPIO_Init+0x1f2>
 80028b6:	2304      	movs	r3, #4
 80028b8:	e008      	b.n	80028cc <HAL_GPIO_Init+0x204>
 80028ba:	2307      	movs	r3, #7
 80028bc:	e006      	b.n	80028cc <HAL_GPIO_Init+0x204>
 80028be:	2303      	movs	r3, #3
 80028c0:	e004      	b.n	80028cc <HAL_GPIO_Init+0x204>
 80028c2:	2302      	movs	r3, #2
 80028c4:	e002      	b.n	80028cc <HAL_GPIO_Init+0x204>
 80028c6:	2301      	movs	r3, #1
 80028c8:	e000      	b.n	80028cc <HAL_GPIO_Init+0x204>
 80028ca:	2300      	movs	r3, #0
 80028cc:	69fa      	ldr	r2, [r7, #28]
 80028ce:	f002 0203 	and.w	r2, r2, #3
 80028d2:	0092      	lsls	r2, r2, #2
 80028d4:	4093      	lsls	r3, r2
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4313      	orrs	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028dc:	4935      	ldr	r1, [pc, #212]	; (80029b4 <HAL_GPIO_Init+0x2ec>)
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	089b      	lsrs	r3, r3, #2
 80028e2:	3302      	adds	r3, #2
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028ea:	4b38      	ldr	r3, [pc, #224]	; (80029cc <HAL_GPIO_Init+0x304>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	43db      	mvns	r3, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4013      	ands	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	4313      	orrs	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800290e:	4a2f      	ldr	r2, [pc, #188]	; (80029cc <HAL_GPIO_Init+0x304>)
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002914:	4b2d      	ldr	r3, [pc, #180]	; (80029cc <HAL_GPIO_Init+0x304>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	4313      	orrs	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002938:	4a24      	ldr	r2, [pc, #144]	; (80029cc <HAL_GPIO_Init+0x304>)
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800293e:	4b23      	ldr	r3, [pc, #140]	; (80029cc <HAL_GPIO_Init+0x304>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	43db      	mvns	r3, r3
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	4013      	ands	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002962:	4a1a      	ldr	r2, [pc, #104]	; (80029cc <HAL_GPIO_Init+0x304>)
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002968:	4b18      	ldr	r3, [pc, #96]	; (80029cc <HAL_GPIO_Init+0x304>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	43db      	mvns	r3, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4013      	ands	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	4313      	orrs	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800298c:	4a0f      	ldr	r2, [pc, #60]	; (80029cc <HAL_GPIO_Init+0x304>)
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	3301      	adds	r3, #1
 8002996:	61fb      	str	r3, [r7, #28]
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	2b0f      	cmp	r3, #15
 800299c:	f67f aea2 	bls.w	80026e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029a0:	bf00      	nop
 80029a2:	bf00      	nop
 80029a4:	3724      	adds	r7, #36	; 0x24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40023800 	.word	0x40023800
 80029b4:	40013800 	.word	0x40013800
 80029b8:	40020000 	.word	0x40020000
 80029bc:	40020400 	.word	0x40020400
 80029c0:	40020800 	.word	0x40020800
 80029c4:	40020c00 	.word	0x40020c00
 80029c8:	40021000 	.word	0x40021000
 80029cc:	40013c00 	.word	0x40013c00

080029d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	460b      	mov	r3, r1
 80029da:	807b      	strh	r3, [r7, #2]
 80029dc:	4613      	mov	r3, r2
 80029de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029e0:	787b      	ldrb	r3, [r7, #1]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029e6:	887a      	ldrh	r2, [r7, #2]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029ec:	e003      	b.n	80029f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029ee:	887b      	ldrh	r3, [r7, #2]
 80029f0:	041a      	lsls	r2, r3, #16
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	619a      	str	r2, [r3, #24]
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
	...

08002a04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e12b      	b.n	8002c6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d106      	bne.n	8002a30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff fa60 	bl	8001ef0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2224      	movs	r2, #36	; 0x24
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0201 	bic.w	r2, r2, #1
 8002a46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a68:	f002 f80e 	bl	8004a88 <HAL_RCC_GetPCLK1Freq>
 8002a6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	4a81      	ldr	r2, [pc, #516]	; (8002c78 <HAL_I2C_Init+0x274>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d807      	bhi.n	8002a88 <HAL_I2C_Init+0x84>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4a80      	ldr	r2, [pc, #512]	; (8002c7c <HAL_I2C_Init+0x278>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	bf94      	ite	ls
 8002a80:	2301      	movls	r3, #1
 8002a82:	2300      	movhi	r3, #0
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	e006      	b.n	8002a96 <HAL_I2C_Init+0x92>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4a7d      	ldr	r2, [pc, #500]	; (8002c80 <HAL_I2C_Init+0x27c>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	bf94      	ite	ls
 8002a90:	2301      	movls	r3, #1
 8002a92:	2300      	movhi	r3, #0
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e0e7      	b.n	8002c6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	4a78      	ldr	r2, [pc, #480]	; (8002c84 <HAL_I2C_Init+0x280>)
 8002aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa6:	0c9b      	lsrs	r3, r3, #18
 8002aa8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	4a6a      	ldr	r2, [pc, #424]	; (8002c78 <HAL_I2C_Init+0x274>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d802      	bhi.n	8002ad8 <HAL_I2C_Init+0xd4>
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	e009      	b.n	8002aec <HAL_I2C_Init+0xe8>
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ade:	fb02 f303 	mul.w	r3, r2, r3
 8002ae2:	4a69      	ldr	r2, [pc, #420]	; (8002c88 <HAL_I2C_Init+0x284>)
 8002ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae8:	099b      	lsrs	r3, r3, #6
 8002aea:	3301      	adds	r3, #1
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6812      	ldr	r2, [r2, #0]
 8002af0:	430b      	orrs	r3, r1
 8002af2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002afe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	495c      	ldr	r1, [pc, #368]	; (8002c78 <HAL_I2C_Init+0x274>)
 8002b08:	428b      	cmp	r3, r1
 8002b0a:	d819      	bhi.n	8002b40 <HAL_I2C_Init+0x13c>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	1e59      	subs	r1, r3, #1
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b1a:	1c59      	adds	r1, r3, #1
 8002b1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b20:	400b      	ands	r3, r1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00a      	beq.n	8002b3c <HAL_I2C_Init+0x138>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	1e59      	subs	r1, r3, #1
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b34:	3301      	adds	r3, #1
 8002b36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b3a:	e051      	b.n	8002be0 <HAL_I2C_Init+0x1dc>
 8002b3c:	2304      	movs	r3, #4
 8002b3e:	e04f      	b.n	8002be0 <HAL_I2C_Init+0x1dc>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d111      	bne.n	8002b6c <HAL_I2C_Init+0x168>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	1e58      	subs	r0, r3, #1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6859      	ldr	r1, [r3, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	440b      	add	r3, r1
 8002b56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	bf0c      	ite	eq
 8002b64:	2301      	moveq	r3, #1
 8002b66:	2300      	movne	r3, #0
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	e012      	b.n	8002b92 <HAL_I2C_Init+0x18e>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	1e58      	subs	r0, r3, #1
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6859      	ldr	r1, [r3, #4]
 8002b74:	460b      	mov	r3, r1
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	0099      	lsls	r1, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b82:	3301      	adds	r3, #1
 8002b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	bf0c      	ite	eq
 8002b8c:	2301      	moveq	r3, #1
 8002b8e:	2300      	movne	r3, #0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_I2C_Init+0x196>
 8002b96:	2301      	movs	r3, #1
 8002b98:	e022      	b.n	8002be0 <HAL_I2C_Init+0x1dc>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10e      	bne.n	8002bc0 <HAL_I2C_Init+0x1bc>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	1e58      	subs	r0, r3, #1
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6859      	ldr	r1, [r3, #4]
 8002baa:	460b      	mov	r3, r1
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	440b      	add	r3, r1
 8002bb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bbe:	e00f      	b.n	8002be0 <HAL_I2C_Init+0x1dc>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	1e58      	subs	r0, r3, #1
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6859      	ldr	r1, [r3, #4]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	0099      	lsls	r1, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	6809      	ldr	r1, [r1, #0]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69da      	ldr	r2, [r3, #28]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6911      	ldr	r1, [r2, #16]
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	68d2      	ldr	r2, [r2, #12]
 8002c1a:	4311      	orrs	r1, r2
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6812      	ldr	r2, [r2, #0]
 8002c20:	430b      	orrs	r3, r1
 8002c22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	695a      	ldr	r2, [r3, #20]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0201 	orr.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2220      	movs	r2, #32
 8002c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	000186a0 	.word	0x000186a0
 8002c7c:	001e847f 	.word	0x001e847f
 8002c80:	003d08ff 	.word	0x003d08ff
 8002c84:	431bde83 	.word	0x431bde83
 8002c88:	10624dd3 	.word	0x10624dd3

08002c8c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	607a      	str	r2, [r7, #4]
 8002c96:	461a      	mov	r2, r3
 8002c98:	460b      	mov	r3, r1
 8002c9a:	817b      	strh	r3, [r7, #10]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ca0:	f7ff fbd0 	bl	8002444 <HAL_GetTick>
 8002ca4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b20      	cmp	r3, #32
 8002cb0:	f040 80e0 	bne.w	8002e74 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	2319      	movs	r3, #25
 8002cba:	2201      	movs	r2, #1
 8002cbc:	4970      	ldr	r1, [pc, #448]	; (8002e80 <HAL_I2C_Master_Transmit+0x1f4>)
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f001 f894 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002cca:	2302      	movs	r3, #2
 8002ccc:	e0d3      	b.n	8002e76 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <HAL_I2C_Master_Transmit+0x50>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e0cc      	b.n	8002e76 <HAL_I2C_Master_Transmit+0x1ea>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d007      	beq.n	8002d02 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f042 0201 	orr.w	r2, r2, #1
 8002d00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d10:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2221      	movs	r2, #33	; 0x21
 8002d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2210      	movs	r2, #16
 8002d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	893a      	ldrh	r2, [r7, #8]
 8002d32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	4a50      	ldr	r2, [pc, #320]	; (8002e84 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d42:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d44:	8979      	ldrh	r1, [r7, #10]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	6a3a      	ldr	r2, [r7, #32]
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f000 fe16 	bl	800397c <I2C_MasterRequestWrite>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e08d      	b.n	8002e76 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	613b      	str	r3, [r7, #16]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	613b      	str	r3, [r7, #16]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d70:	e066      	b.n	8002e40 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	6a39      	ldr	r1, [r7, #32]
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f001 f90e 	bl	8003f98 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00d      	beq.n	8002d9e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d107      	bne.n	8002d9a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d98:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e06b      	b.n	8002e76 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	781a      	ldrb	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	1c5a      	adds	r2, r3, #1
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	d11b      	bne.n	8002e14 <HAL_I2C_Master_Transmit+0x188>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d017      	beq.n	8002e14 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	781a      	ldrb	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	1c5a      	adds	r2, r3, #1
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	6a39      	ldr	r1, [r7, #32]
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f001 f8fe 	bl	800401a <I2C_WaitOnBTFFlagUntilTimeout>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00d      	beq.n	8002e40 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	d107      	bne.n	8002e3c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e3a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e01a      	b.n	8002e76 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d194      	bne.n	8002d72 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e70:	2300      	movs	r3, #0
 8002e72:	e000      	b.n	8002e76 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e74:	2302      	movs	r3, #2
  }
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	00100002 	.word	0x00100002
 8002e84:	ffff0000 	.word	0xffff0000

08002e88 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08c      	sub	sp, #48	; 0x30
 8002e8c:	af02      	add	r7, sp, #8
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	607a      	str	r2, [r7, #4]
 8002e92:	461a      	mov	r2, r3
 8002e94:	460b      	mov	r3, r1
 8002e96:	817b      	strh	r3, [r7, #10]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e9c:	f7ff fad2 	bl	8002444 <HAL_GetTick>
 8002ea0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b20      	cmp	r3, #32
 8002eac:	f040 820b 	bne.w	80032c6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	2319      	movs	r3, #25
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	497c      	ldr	r1, [pc, #496]	; (80030ac <HAL_I2C_Master_Receive+0x224>)
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 ff96 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	e1fe      	b.n	80032c8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d101      	bne.n	8002ed8 <HAL_I2C_Master_Receive+0x50>
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	e1f7      	b.n	80032c8 <HAL_I2C_Master_Receive+0x440>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d007      	beq.n	8002efe <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f042 0201 	orr.w	r2, r2, #1
 8002efc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f0c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2222      	movs	r2, #34	; 0x22
 8002f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2210      	movs	r2, #16
 8002f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	893a      	ldrh	r2, [r7, #8]
 8002f2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	4a5c      	ldr	r2, [pc, #368]	; (80030b0 <HAL_I2C_Master_Receive+0x228>)
 8002f3e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f40:	8979      	ldrh	r1, [r7, #10]
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 fd9a 	bl	8003a80 <I2C_MasterRequestRead>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e1b8      	b.n	80032c8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d113      	bne.n	8002f86 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f5e:	2300      	movs	r3, #0
 8002f60:	623b      	str	r3, [r7, #32]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	623b      	str	r3, [r7, #32]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	623b      	str	r3, [r7, #32]
 8002f72:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	e18c      	b.n	80032a0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d11b      	bne.n	8002fc6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61fb      	str	r3, [r7, #28]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	61fb      	str	r3, [r7, #28]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	61fb      	str	r3, [r7, #28]
 8002fb2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	e16c      	b.n	80032a0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d11b      	bne.n	8003006 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fdc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61bb      	str	r3, [r7, #24]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	61bb      	str	r3, [r7, #24]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	61bb      	str	r3, [r7, #24]
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	e14c      	b.n	80032a0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003014:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003016:	2300      	movs	r3, #0
 8003018:	617b      	str	r3, [r7, #20]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	617b      	str	r3, [r7, #20]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	617b      	str	r3, [r7, #20]
 800302a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800302c:	e138      	b.n	80032a0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003032:	2b03      	cmp	r3, #3
 8003034:	f200 80f1 	bhi.w	800321a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303c:	2b01      	cmp	r3, #1
 800303e:	d123      	bne.n	8003088 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003042:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f001 f829 	bl	800409c <I2C_WaitOnRXNEFlagUntilTimeout>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e139      	b.n	80032c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	691a      	ldr	r2, [r3, #16]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	1c5a      	adds	r2, r3, #1
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003070:	3b01      	subs	r3, #1
 8003072:	b29a      	uxth	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307c:	b29b      	uxth	r3, r3
 800307e:	3b01      	subs	r3, #1
 8003080:	b29a      	uxth	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003086:	e10b      	b.n	80032a0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308c:	2b02      	cmp	r3, #2
 800308e:	d14e      	bne.n	800312e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003096:	2200      	movs	r2, #0
 8003098:	4906      	ldr	r1, [pc, #24]	; (80030b4 <HAL_I2C_Master_Receive+0x22c>)
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 fea6 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d008      	beq.n	80030b8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e10e      	b.n	80032c8 <HAL_I2C_Master_Receive+0x440>
 80030aa:	bf00      	nop
 80030ac:	00100002 	.word	0x00100002
 80030b0:	ffff0000 	.word	0xffff0000
 80030b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	691a      	ldr	r2, [r3, #16]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	1c5a      	adds	r2, r3, #1
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e4:	3b01      	subs	r3, #1
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	3b01      	subs	r3, #1
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	691a      	ldr	r2, [r3, #16]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	1c5a      	adds	r2, r3, #1
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003116:	3b01      	subs	r3, #1
 8003118:	b29a      	uxth	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003122:	b29b      	uxth	r3, r3
 8003124:	3b01      	subs	r3, #1
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800312c:	e0b8      	b.n	80032a0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003134:	2200      	movs	r2, #0
 8003136:	4966      	ldr	r1, [pc, #408]	; (80032d0 <HAL_I2C_Master_Receive+0x448>)
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 fe57 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e0bf      	b.n	80032c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003156:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	691a      	ldr	r2, [r3, #16]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	b2d2      	uxtb	r2, r2
 8003164:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	1c5a      	adds	r2, r3, #1
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003180:	b29b      	uxth	r3, r3
 8003182:	3b01      	subs	r3, #1
 8003184:	b29a      	uxth	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003190:	2200      	movs	r2, #0
 8003192:	494f      	ldr	r1, [pc, #316]	; (80032d0 <HAL_I2C_Master_Receive+0x448>)
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 fe29 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e091      	b.n	80032c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691a      	ldr	r2, [r3, #16]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	1c5a      	adds	r2, r3, #1
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d0:	3b01      	subs	r3, #1
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031dc:	b29b      	uxth	r3, r3
 80031de:	3b01      	subs	r3, #1
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	691a      	ldr	r2, [r3, #16]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	b2d2      	uxtb	r2, r2
 80031f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	1c5a      	adds	r2, r3, #1
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003202:	3b01      	subs	r3, #1
 8003204:	b29a      	uxth	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320e:	b29b      	uxth	r3, r3
 8003210:	3b01      	subs	r3, #1
 8003212:	b29a      	uxth	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003218:	e042      	b.n	80032a0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800321a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800321c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 ff3c 	bl	800409c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e04c      	b.n	80032c8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	691a      	ldr	r2, [r3, #16]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	b2d2      	uxtb	r2, r2
 800323a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	1c5a      	adds	r2, r3, #1
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324a:	3b01      	subs	r3, #1
 800324c:	b29a      	uxth	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003256:	b29b      	uxth	r3, r3
 8003258:	3b01      	subs	r3, #1
 800325a:	b29a      	uxth	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	f003 0304 	and.w	r3, r3, #4
 800326a:	2b04      	cmp	r3, #4
 800326c:	d118      	bne.n	80032a0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	691a      	ldr	r2, [r3, #16]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	b2d2      	uxtb	r2, r2
 800327a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800328a:	3b01      	subs	r3, #1
 800328c:	b29a      	uxth	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003296:	b29b      	uxth	r3, r3
 8003298:	3b01      	subs	r3, #1
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f47f aec2 	bne.w	800302e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2220      	movs	r2, #32
 80032ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032c2:	2300      	movs	r3, #0
 80032c4:	e000      	b.n	80032c8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80032c6:	2302      	movs	r3, #2
  }
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3728      	adds	r7, #40	; 0x28
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	00010004 	.word	0x00010004

080032d4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b08c      	sub	sp, #48	; 0x30
 80032d8:	af02      	add	r7, sp, #8
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	4608      	mov	r0, r1
 80032de:	4611      	mov	r1, r2
 80032e0:	461a      	mov	r2, r3
 80032e2:	4603      	mov	r3, r0
 80032e4:	817b      	strh	r3, [r7, #10]
 80032e6:	460b      	mov	r3, r1
 80032e8:	813b      	strh	r3, [r7, #8]
 80032ea:	4613      	mov	r3, r2
 80032ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032ee:	f7ff f8a9 	bl	8002444 <HAL_GetTick>
 80032f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b20      	cmp	r3, #32
 80032fe:	f040 8208 	bne.w	8003712 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	2319      	movs	r3, #25
 8003308:	2201      	movs	r2, #1
 800330a:	497b      	ldr	r1, [pc, #492]	; (80034f8 <HAL_I2C_Mem_Read+0x224>)
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 fd6d 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003318:	2302      	movs	r3, #2
 800331a:	e1fb      	b.n	8003714 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003322:	2b01      	cmp	r3, #1
 8003324:	d101      	bne.n	800332a <HAL_I2C_Mem_Read+0x56>
 8003326:	2302      	movs	r3, #2
 8003328:	e1f4      	b.n	8003714 <HAL_I2C_Mem_Read+0x440>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b01      	cmp	r3, #1
 800333e:	d007      	beq.n	8003350 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0201 	orr.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800335e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2222      	movs	r2, #34	; 0x22
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2240      	movs	r2, #64	; 0x40
 800336c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800337a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003380:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003386:	b29a      	uxth	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4a5b      	ldr	r2, [pc, #364]	; (80034fc <HAL_I2C_Mem_Read+0x228>)
 8003390:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003392:	88f8      	ldrh	r0, [r7, #6]
 8003394:	893a      	ldrh	r2, [r7, #8]
 8003396:	8979      	ldrh	r1, [r7, #10]
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	9301      	str	r3, [sp, #4]
 800339c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	4603      	mov	r3, r0
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 fc3a 	bl	8003c1c <I2C_RequestMemoryRead>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e1b0      	b.n	8003714 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d113      	bne.n	80033e2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ba:	2300      	movs	r3, #0
 80033bc:	623b      	str	r3, [r7, #32]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	623b      	str	r3, [r7, #32]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	623b      	str	r3, [r7, #32]
 80033ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	e184      	b.n	80036ec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d11b      	bne.n	8003422 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033fa:	2300      	movs	r3, #0
 80033fc:	61fb      	str	r3, [r7, #28]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	61fb      	str	r3, [r7, #28]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	61fb      	str	r3, [r7, #28]
 800340e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	e164      	b.n	80036ec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003426:	2b02      	cmp	r3, #2
 8003428:	d11b      	bne.n	8003462 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003438:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003448:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800344a:	2300      	movs	r3, #0
 800344c:	61bb      	str	r3, [r7, #24]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	61bb      	str	r3, [r7, #24]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	61bb      	str	r3, [r7, #24]
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	e144      	b.n	80036ec <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003462:	2300      	movs	r3, #0
 8003464:	617b      	str	r3, [r7, #20]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	617b      	str	r3, [r7, #20]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	617b      	str	r3, [r7, #20]
 8003476:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003478:	e138      	b.n	80036ec <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347e:	2b03      	cmp	r3, #3
 8003480:	f200 80f1 	bhi.w	8003666 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003488:	2b01      	cmp	r3, #1
 800348a:	d123      	bne.n	80034d4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800348c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800348e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 fe03 	bl	800409c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e139      	b.n	8003714 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	691a      	ldr	r2, [r3, #16]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	1c5a      	adds	r2, r3, #1
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034bc:	3b01      	subs	r3, #1
 80034be:	b29a      	uxth	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	3b01      	subs	r3, #1
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034d2:	e10b      	b.n	80036ec <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d14e      	bne.n	800357a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e2:	2200      	movs	r2, #0
 80034e4:	4906      	ldr	r1, [pc, #24]	; (8003500 <HAL_I2C_Mem_Read+0x22c>)
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 fc80 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d008      	beq.n	8003504 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e10e      	b.n	8003714 <HAL_I2C_Mem_Read+0x440>
 80034f6:	bf00      	nop
 80034f8:	00100002 	.word	0x00100002
 80034fc:	ffff0000 	.word	0xffff0000
 8003500:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003512:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	691a      	ldr	r2, [r3, #16]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	1c5a      	adds	r2, r3, #1
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003530:	3b01      	subs	r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353c:	b29b      	uxth	r3, r3
 800353e:	3b01      	subs	r3, #1
 8003540:	b29a      	uxth	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	691a      	ldr	r2, [r3, #16]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	1c5a      	adds	r2, r3, #1
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003562:	3b01      	subs	r3, #1
 8003564:	b29a      	uxth	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356e:	b29b      	uxth	r3, r3
 8003570:	3b01      	subs	r3, #1
 8003572:	b29a      	uxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003578:	e0b8      	b.n	80036ec <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003580:	2200      	movs	r2, #0
 8003582:	4966      	ldr	r1, [pc, #408]	; (800371c <HAL_I2C_Mem_Read+0x448>)
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 fc31 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e0bf      	b.n	8003714 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	691a      	ldr	r2, [r3, #16]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c0:	3b01      	subs	r3, #1
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	3b01      	subs	r3, #1
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035dc:	2200      	movs	r2, #0
 80035de:	494f      	ldr	r1, [pc, #316]	; (800371c <HAL_I2C_Mem_Read+0x448>)
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f000 fc03 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e091      	b.n	8003714 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	691a      	ldr	r2, [r3, #16]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	1c5a      	adds	r2, r3, #1
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361c:	3b01      	subs	r3, #1
 800361e:	b29a      	uxth	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003628:	b29b      	uxth	r3, r3
 800362a:	3b01      	subs	r3, #1
 800362c:	b29a      	uxth	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	691a      	ldr	r2, [r3, #16]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	1c5a      	adds	r2, r3, #1
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364e:	3b01      	subs	r3, #1
 8003650:	b29a      	uxth	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365a:	b29b      	uxth	r3, r3
 800365c:	3b01      	subs	r3, #1
 800365e:	b29a      	uxth	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003664:	e042      	b.n	80036ec <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003668:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f000 fd16 	bl	800409c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e04c      	b.n	8003714 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	691a      	ldr	r2, [r3, #16]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003696:	3b01      	subs	r3, #1
 8003698:	b29a      	uxth	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	f003 0304 	and.w	r3, r3, #4
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d118      	bne.n	80036ec <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	b2d2      	uxtb	r2, r2
 80036c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	1c5a      	adds	r2, r3, #1
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d6:	3b01      	subs	r3, #1
 80036d8:	b29a      	uxth	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f47f aec2 	bne.w	800347a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2220      	movs	r2, #32
 80036fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800370e:	2300      	movs	r3, #0
 8003710:	e000      	b.n	8003714 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003712:	2302      	movs	r3, #2
  }
}
 8003714:	4618      	mov	r0, r3
 8003716:	3728      	adds	r7, #40	; 0x28
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	00010004 	.word	0x00010004

08003720 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b08a      	sub	sp, #40	; 0x28
 8003724:	af02      	add	r7, sp, #8
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	607a      	str	r2, [r7, #4]
 800372a:	603b      	str	r3, [r7, #0]
 800372c:	460b      	mov	r3, r1
 800372e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003730:	f7fe fe88 	bl	8002444 <HAL_GetTick>
 8003734:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003736:	2300      	movs	r3, #0
 8003738:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b20      	cmp	r3, #32
 8003744:	f040 8111 	bne.w	800396a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	2319      	movs	r3, #25
 800374e:	2201      	movs	r2, #1
 8003750:	4988      	ldr	r1, [pc, #544]	; (8003974 <HAL_I2C_IsDeviceReady+0x254>)
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 fb4a 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800375e:	2302      	movs	r3, #2
 8003760:	e104      	b.n	800396c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003768:	2b01      	cmp	r3, #1
 800376a:	d101      	bne.n	8003770 <HAL_I2C_IsDeviceReady+0x50>
 800376c:	2302      	movs	r3, #2
 800376e:	e0fd      	b.n	800396c <HAL_I2C_IsDeviceReady+0x24c>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b01      	cmp	r3, #1
 8003784:	d007      	beq.n	8003796 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f042 0201 	orr.w	r2, r2, #1
 8003794:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2224      	movs	r2, #36	; 0x24
 80037aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4a70      	ldr	r2, [pc, #448]	; (8003978 <HAL_I2C_IsDeviceReady+0x258>)
 80037b8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037c8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 fb08 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00d      	beq.n	80037fe <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037f0:	d103      	bne.n	80037fa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037f8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e0b6      	b.n	800396c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037fe:	897b      	ldrh	r3, [r7, #10]
 8003800:	b2db      	uxtb	r3, r3
 8003802:	461a      	mov	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800380c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800380e:	f7fe fe19 	bl	8002444 <HAL_GetTick>
 8003812:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b02      	cmp	r3, #2
 8003820:	bf0c      	ite	eq
 8003822:	2301      	moveq	r3, #1
 8003824:	2300      	movne	r3, #0
 8003826:	b2db      	uxtb	r3, r3
 8003828:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003834:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003838:	bf0c      	ite	eq
 800383a:	2301      	moveq	r3, #1
 800383c:	2300      	movne	r3, #0
 800383e:	b2db      	uxtb	r3, r3
 8003840:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003842:	e025      	b.n	8003890 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003844:	f7fe fdfe 	bl	8002444 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	429a      	cmp	r2, r3
 8003852:	d302      	bcc.n	800385a <HAL_I2C_IsDeviceReady+0x13a>
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d103      	bne.n	8003862 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	22a0      	movs	r2, #160	; 0xa0
 800385e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b02      	cmp	r3, #2
 800386e:	bf0c      	ite	eq
 8003870:	2301      	moveq	r3, #1
 8003872:	2300      	movne	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003886:	bf0c      	ite	eq
 8003888:	2301      	moveq	r3, #1
 800388a:	2300      	movne	r3, #0
 800388c:	b2db      	uxtb	r3, r3
 800388e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2ba0      	cmp	r3, #160	; 0xa0
 800389a:	d005      	beq.n	80038a8 <HAL_I2C_IsDeviceReady+0x188>
 800389c:	7dfb      	ldrb	r3, [r7, #23]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d102      	bne.n	80038a8 <HAL_I2C_IsDeviceReady+0x188>
 80038a2:	7dbb      	ldrb	r3, [r7, #22]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0cd      	beq.n	8003844 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2220      	movs	r2, #32
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d129      	bne.n	8003912 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038cc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ce:	2300      	movs	r3, #0
 80038d0:	613b      	str	r3, [r7, #16]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	613b      	str	r3, [r7, #16]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	613b      	str	r3, [r7, #16]
 80038e2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	2319      	movs	r3, #25
 80038ea:	2201      	movs	r2, #1
 80038ec:	4921      	ldr	r1, [pc, #132]	; (8003974 <HAL_I2C_IsDeviceReady+0x254>)
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f000 fa7c 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e036      	b.n	800396c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2220      	movs	r2, #32
 8003902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	e02c      	b.n	800396c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003920:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800392a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	2319      	movs	r3, #25
 8003932:	2201      	movs	r2, #1
 8003934:	490f      	ldr	r1, [pc, #60]	; (8003974 <HAL_I2C_IsDeviceReady+0x254>)
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 fa58 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e012      	b.n	800396c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	3301      	adds	r3, #1
 800394a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	429a      	cmp	r2, r3
 8003952:	f4ff af32 	bcc.w	80037ba <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2220      	movs	r2, #32
 800395a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e000      	b.n	800396c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800396a:	2302      	movs	r3, #2
  }
}
 800396c:	4618      	mov	r0, r3
 800396e:	3720      	adds	r7, #32
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	00100002 	.word	0x00100002
 8003978:	ffff0000 	.word	0xffff0000

0800397c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b088      	sub	sp, #32
 8003980:	af02      	add	r7, sp, #8
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	607a      	str	r2, [r7, #4]
 8003986:	603b      	str	r3, [r7, #0]
 8003988:	460b      	mov	r3, r1
 800398a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003990:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2b08      	cmp	r3, #8
 8003996:	d006      	beq.n	80039a6 <I2C_MasterRequestWrite+0x2a>
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d003      	beq.n	80039a6 <I2C_MasterRequestWrite+0x2a>
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039a4:	d108      	bne.n	80039b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	e00b      	b.n	80039d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039bc:	2b12      	cmp	r3, #18
 80039be:	d107      	bne.n	80039d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	9300      	str	r3, [sp, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 fa05 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00d      	beq.n	8003a04 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039f6:	d103      	bne.n	8003a00 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e035      	b.n	8003a70 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a0c:	d108      	bne.n	8003a20 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a0e:	897b      	ldrh	r3, [r7, #10]
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	461a      	mov	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a1c:	611a      	str	r2, [r3, #16]
 8003a1e:	e01b      	b.n	8003a58 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a20:	897b      	ldrh	r3, [r7, #10]
 8003a22:	11db      	asrs	r3, r3, #7
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	f003 0306 	and.w	r3, r3, #6
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	f063 030f 	orn	r3, r3, #15
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	490e      	ldr	r1, [pc, #56]	; (8003a78 <I2C_MasterRequestWrite+0xfc>)
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f000 fa2b 	bl	8003e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e010      	b.n	8003a70 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a4e:	897b      	ldrh	r3, [r7, #10]
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	4907      	ldr	r1, [pc, #28]	; (8003a7c <I2C_MasterRequestWrite+0x100>)
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f000 fa1b 	bl	8003e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e000      	b.n	8003a70 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	00010008 	.word	0x00010008
 8003a7c:	00010002 	.word	0x00010002

08003a80 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b088      	sub	sp, #32
 8003a84:	af02      	add	r7, sp, #8
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	607a      	str	r2, [r7, #4]
 8003a8a:	603b      	str	r3, [r7, #0]
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a94:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003aa4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d006      	beq.n	8003aba <I2C_MasterRequestRead+0x3a>
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d003      	beq.n	8003aba <I2C_MasterRequestRead+0x3a>
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ab8:	d108      	bne.n	8003acc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ac8:	601a      	str	r2, [r3, #0]
 8003aca:	e00b      	b.n	8003ae4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad0:	2b11      	cmp	r3, #17
 8003ad2:	d107      	bne.n	8003ae4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ae2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 f97b 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00d      	beq.n	8003b18 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b0a:	d103      	bne.n	8003b14 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e079      	b.n	8003c0c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b20:	d108      	bne.n	8003b34 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b22:	897b      	ldrh	r3, [r7, #10]
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	f043 0301 	orr.w	r3, r3, #1
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	611a      	str	r2, [r3, #16]
 8003b32:	e05f      	b.n	8003bf4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b34:	897b      	ldrh	r3, [r7, #10]
 8003b36:	11db      	asrs	r3, r3, #7
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	f003 0306 	and.w	r3, r3, #6
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	f063 030f 	orn	r3, r3, #15
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	4930      	ldr	r1, [pc, #192]	; (8003c14 <I2C_MasterRequestRead+0x194>)
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f000 f9a1 	bl	8003e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e054      	b.n	8003c0c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b62:	897b      	ldrh	r3, [r7, #10]
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	4929      	ldr	r1, [pc, #164]	; (8003c18 <I2C_MasterRequestRead+0x198>)
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f000 f991 	bl	8003e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e044      	b.n	8003c0c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b82:	2300      	movs	r3, #0
 8003b84:	613b      	str	r3, [r7, #16]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	613b      	str	r3, [r7, #16]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	613b      	str	r3, [r7, #16]
 8003b96:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ba6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f000 f919 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00d      	beq.n	8003bdc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bce:	d103      	bne.n	8003bd8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bd6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e017      	b.n	8003c0c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003bdc:	897b      	ldrh	r3, [r7, #10]
 8003bde:	11db      	asrs	r3, r3, #7
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	f003 0306 	and.w	r3, r3, #6
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	f063 030e 	orn	r3, r3, #14
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	4907      	ldr	r1, [pc, #28]	; (8003c18 <I2C_MasterRequestRead+0x198>)
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f000 f94d 	bl	8003e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e000      	b.n	8003c0c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3718      	adds	r7, #24
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	00010008 	.word	0x00010008
 8003c18:	00010002 	.word	0x00010002

08003c1c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b088      	sub	sp, #32
 8003c20:	af02      	add	r7, sp, #8
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	4608      	mov	r0, r1
 8003c26:	4611      	mov	r1, r2
 8003c28:	461a      	mov	r2, r3
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	817b      	strh	r3, [r7, #10]
 8003c2e:	460b      	mov	r3, r1
 8003c30:	813b      	strh	r3, [r7, #8]
 8003c32:	4613      	mov	r3, r2
 8003c34:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c44:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 f8c2 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00d      	beq.n	8003c8a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c7c:	d103      	bne.n	8003c86 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e0aa      	b.n	8003de0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c8a:	897b      	ldrh	r3, [r7, #10]
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	461a      	mov	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	6a3a      	ldr	r2, [r7, #32]
 8003c9e:	4952      	ldr	r1, [pc, #328]	; (8003de8 <I2C_RequestMemoryRead+0x1cc>)
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 f8fa 	bl	8003e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e097      	b.n	8003de0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	617b      	str	r3, [r7, #20]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	617b      	str	r3, [r7, #20]
 8003cc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc8:	6a39      	ldr	r1, [r7, #32]
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 f964 	bl	8003f98 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00d      	beq.n	8003cf2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d107      	bne.n	8003cee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e076      	b.n	8003de0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cf2:	88fb      	ldrh	r3, [r7, #6]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d105      	bne.n	8003d04 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cf8:	893b      	ldrh	r3, [r7, #8]
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	611a      	str	r2, [r3, #16]
 8003d02:	e021      	b.n	8003d48 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d04:	893b      	ldrh	r3, [r7, #8]
 8003d06:	0a1b      	lsrs	r3, r3, #8
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d14:	6a39      	ldr	r1, [r7, #32]
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 f93e 	bl	8003f98 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00d      	beq.n	8003d3e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d107      	bne.n	8003d3a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e050      	b.n	8003de0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d3e:	893b      	ldrh	r3, [r7, #8]
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d4a:	6a39      	ldr	r1, [r7, #32]
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 f923 	bl	8003f98 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00d      	beq.n	8003d74 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	2b04      	cmp	r3, #4
 8003d5e:	d107      	bne.n	8003d70 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d6e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e035      	b.n	8003de0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d82:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	6a3b      	ldr	r3, [r7, #32]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f000 f82b 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00d      	beq.n	8003db8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003daa:	d103      	bne.n	8003db4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003db2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e013      	b.n	8003de0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003db8:	897b      	ldrh	r3, [r7, #10]
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	f043 0301 	orr.w	r3, r3, #1
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	6a3a      	ldr	r2, [r7, #32]
 8003dcc:	4906      	ldr	r1, [pc, #24]	; (8003de8 <I2C_RequestMemoryRead+0x1cc>)
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 f863 	bl	8003e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e000      	b.n	8003de0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3718      	adds	r7, #24
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	00010002 	.word	0x00010002

08003dec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	603b      	str	r3, [r7, #0]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dfc:	e025      	b.n	8003e4a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e04:	d021      	beq.n	8003e4a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e06:	f7fe fb1d 	bl	8002444 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d302      	bcc.n	8003e1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d116      	bne.n	8003e4a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2220      	movs	r2, #32
 8003e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	f043 0220 	orr.w	r2, r3, #32
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e023      	b.n	8003e92 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	0c1b      	lsrs	r3, r3, #16
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d10d      	bne.n	8003e70 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	43da      	mvns	r2, r3
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	bf0c      	ite	eq
 8003e66:	2301      	moveq	r3, #1
 8003e68:	2300      	movne	r3, #0
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	e00c      	b.n	8003e8a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	43da      	mvns	r2, r3
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	bf0c      	ite	eq
 8003e82:	2301      	moveq	r3, #1
 8003e84:	2300      	movne	r3, #0
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	461a      	mov	r2, r3
 8003e8a:	79fb      	ldrb	r3, [r7, #7]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d0b6      	beq.n	8003dfe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b084      	sub	sp, #16
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	60f8      	str	r0, [r7, #12]
 8003ea2:	60b9      	str	r1, [r7, #8]
 8003ea4:	607a      	str	r2, [r7, #4]
 8003ea6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ea8:	e051      	b.n	8003f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb8:	d123      	bne.n	8003f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ec8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ed2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2220      	movs	r2, #32
 8003ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	f043 0204 	orr.w	r2, r3, #4
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e046      	b.n	8003f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f08:	d021      	beq.n	8003f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f0a:	f7fe fa9b 	bl	8002444 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d302      	bcc.n	8003f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d116      	bne.n	8003f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	f043 0220 	orr.w	r2, r3, #32
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e020      	b.n	8003f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	0c1b      	lsrs	r3, r3, #16
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d10c      	bne.n	8003f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	43da      	mvns	r2, r3
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	4013      	ands	r3, r2
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	bf14      	ite	ne
 8003f6a:	2301      	movne	r3, #1
 8003f6c:	2300      	moveq	r3, #0
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	e00b      	b.n	8003f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	43da      	mvns	r2, r3
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	bf14      	ite	ne
 8003f84:	2301      	movne	r3, #1
 8003f86:	2300      	moveq	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d18d      	bne.n	8003eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fa4:	e02d      	b.n	8004002 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 f8ce 	bl	8004148 <I2C_IsAcknowledgeFailed>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e02d      	b.n	8004012 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fbc:	d021      	beq.n	8004002 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fbe:	f7fe fa41 	bl	8002444 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d302      	bcc.n	8003fd4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d116      	bne.n	8004002 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	f043 0220 	orr.w	r2, r3, #32
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e007      	b.n	8004012 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400c:	2b80      	cmp	r3, #128	; 0x80
 800400e:	d1ca      	bne.n	8003fa6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b084      	sub	sp, #16
 800401e:	af00      	add	r7, sp, #0
 8004020:	60f8      	str	r0, [r7, #12]
 8004022:	60b9      	str	r1, [r7, #8]
 8004024:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004026:	e02d      	b.n	8004084 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 f88d 	bl	8004148 <I2C_IsAcknowledgeFailed>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e02d      	b.n	8004094 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800403e:	d021      	beq.n	8004084 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004040:	f7fe fa00 	bl	8002444 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	429a      	cmp	r2, r3
 800404e:	d302      	bcc.n	8004056 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d116      	bne.n	8004084 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2220      	movs	r2, #32
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004070:	f043 0220 	orr.w	r2, r3, #32
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e007      	b.n	8004094 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	f003 0304 	and.w	r3, r3, #4
 800408e:	2b04      	cmp	r3, #4
 8004090:	d1ca      	bne.n	8004028 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040a8:	e042      	b.n	8004130 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	f003 0310 	and.w	r3, r3, #16
 80040b4:	2b10      	cmp	r3, #16
 80040b6:	d119      	bne.n	80040ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f06f 0210 	mvn.w	r2, #16
 80040c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2220      	movs	r2, #32
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e029      	b.n	8004140 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ec:	f7fe f9aa 	bl	8002444 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d302      	bcc.n	8004102 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d116      	bne.n	8004130 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2220      	movs	r2, #32
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411c:	f043 0220 	orr.w	r2, r3, #32
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e007      	b.n	8004140 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413a:	2b40      	cmp	r3, #64	; 0x40
 800413c:	d1b5      	bne.n	80040aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800415a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800415e:	d11b      	bne.n	8004198 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004168:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2220      	movs	r2, #32
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004184:	f043 0204 	orr.w	r2, r3, #4
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e000      	b.n	800419a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
	...

080041a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e267      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d075      	beq.n	80042b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041c6:	4b88      	ldr	r3, [pc, #544]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 030c 	and.w	r3, r3, #12
 80041ce:	2b04      	cmp	r3, #4
 80041d0:	d00c      	beq.n	80041ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041d2:	4b85      	ldr	r3, [pc, #532]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041da:	2b08      	cmp	r3, #8
 80041dc:	d112      	bne.n	8004204 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041de:	4b82      	ldr	r3, [pc, #520]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041ea:	d10b      	bne.n	8004204 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ec:	4b7e      	ldr	r3, [pc, #504]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d05b      	beq.n	80042b0 <HAL_RCC_OscConfig+0x108>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d157      	bne.n	80042b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e242      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800420c:	d106      	bne.n	800421c <HAL_RCC_OscConfig+0x74>
 800420e:	4b76      	ldr	r3, [pc, #472]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a75      	ldr	r2, [pc, #468]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 8004214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	e01d      	b.n	8004258 <HAL_RCC_OscConfig+0xb0>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004224:	d10c      	bne.n	8004240 <HAL_RCC_OscConfig+0x98>
 8004226:	4b70      	ldr	r3, [pc, #448]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a6f      	ldr	r2, [pc, #444]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 800422c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	4b6d      	ldr	r3, [pc, #436]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a6c      	ldr	r2, [pc, #432]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 8004238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	e00b      	b.n	8004258 <HAL_RCC_OscConfig+0xb0>
 8004240:	4b69      	ldr	r3, [pc, #420]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a68      	ldr	r2, [pc, #416]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 8004246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800424a:	6013      	str	r3, [r2, #0]
 800424c:	4b66      	ldr	r3, [pc, #408]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a65      	ldr	r2, [pc, #404]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 8004252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004256:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d013      	beq.n	8004288 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004260:	f7fe f8f0 	bl	8002444 <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004268:	f7fe f8ec 	bl	8002444 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b64      	cmp	r3, #100	; 0x64
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e207      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427a:	4b5b      	ldr	r3, [pc, #364]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0f0      	beq.n	8004268 <HAL_RCC_OscConfig+0xc0>
 8004286:	e014      	b.n	80042b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004288:	f7fe f8dc 	bl	8002444 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004290:	f7fe f8d8 	bl	8002444 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b64      	cmp	r3, #100	; 0x64
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e1f3      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042a2:	4b51      	ldr	r3, [pc, #324]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f0      	bne.n	8004290 <HAL_RCC_OscConfig+0xe8>
 80042ae:	e000      	b.n	80042b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d063      	beq.n	8004386 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042be:	4b4a      	ldr	r3, [pc, #296]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 030c 	and.w	r3, r3, #12
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00b      	beq.n	80042e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ca:	4b47      	ldr	r3, [pc, #284]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042d2:	2b08      	cmp	r3, #8
 80042d4:	d11c      	bne.n	8004310 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042d6:	4b44      	ldr	r3, [pc, #272]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d116      	bne.n	8004310 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042e2:	4b41      	ldr	r3, [pc, #260]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d005      	beq.n	80042fa <HAL_RCC_OscConfig+0x152>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d001      	beq.n	80042fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e1c7      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042fa:	4b3b      	ldr	r3, [pc, #236]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	4937      	ldr	r1, [pc, #220]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 800430a:	4313      	orrs	r3, r2
 800430c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800430e:	e03a      	b.n	8004386 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d020      	beq.n	800435a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004318:	4b34      	ldr	r3, [pc, #208]	; (80043ec <HAL_RCC_OscConfig+0x244>)
 800431a:	2201      	movs	r2, #1
 800431c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800431e:	f7fe f891 	bl	8002444 <HAL_GetTick>
 8004322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004324:	e008      	b.n	8004338 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004326:	f7fe f88d 	bl	8002444 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d901      	bls.n	8004338 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e1a8      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004338:	4b2b      	ldr	r3, [pc, #172]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d0f0      	beq.n	8004326 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004344:	4b28      	ldr	r3, [pc, #160]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	4925      	ldr	r1, [pc, #148]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 8004354:	4313      	orrs	r3, r2
 8004356:	600b      	str	r3, [r1, #0]
 8004358:	e015      	b.n	8004386 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800435a:	4b24      	ldr	r3, [pc, #144]	; (80043ec <HAL_RCC_OscConfig+0x244>)
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004360:	f7fe f870 	bl	8002444 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004368:	f7fe f86c 	bl	8002444 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e187      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800437a:	4b1b      	ldr	r3, [pc, #108]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1f0      	bne.n	8004368 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0308 	and.w	r3, r3, #8
 800438e:	2b00      	cmp	r3, #0
 8004390:	d036      	beq.n	8004400 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d016      	beq.n	80043c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800439a:	4b15      	ldr	r3, [pc, #84]	; (80043f0 <HAL_RCC_OscConfig+0x248>)
 800439c:	2201      	movs	r2, #1
 800439e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a0:	f7fe f850 	bl	8002444 <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043a8:	f7fe f84c 	bl	8002444 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e167      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ba:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 80043bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0f0      	beq.n	80043a8 <HAL_RCC_OscConfig+0x200>
 80043c6:	e01b      	b.n	8004400 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043c8:	4b09      	ldr	r3, [pc, #36]	; (80043f0 <HAL_RCC_OscConfig+0x248>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ce:	f7fe f839 	bl	8002444 <HAL_GetTick>
 80043d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043d4:	e00e      	b.n	80043f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043d6:	f7fe f835 	bl	8002444 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d907      	bls.n	80043f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e150      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
 80043e8:	40023800 	.word	0x40023800
 80043ec:	42470000 	.word	0x42470000
 80043f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f4:	4b88      	ldr	r3, [pc, #544]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 80043f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1ea      	bne.n	80043d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 8097 	beq.w	800453c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800440e:	2300      	movs	r3, #0
 8004410:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004412:	4b81      	ldr	r3, [pc, #516]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10f      	bne.n	800443e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800441e:	2300      	movs	r3, #0
 8004420:	60bb      	str	r3, [r7, #8]
 8004422:	4b7d      	ldr	r3, [pc, #500]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	4a7c      	ldr	r2, [pc, #496]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 8004428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800442c:	6413      	str	r3, [r2, #64]	; 0x40
 800442e:	4b7a      	ldr	r3, [pc, #488]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004436:	60bb      	str	r3, [r7, #8]
 8004438:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800443a:	2301      	movs	r3, #1
 800443c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800443e:	4b77      	ldr	r3, [pc, #476]	; (800461c <HAL_RCC_OscConfig+0x474>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004446:	2b00      	cmp	r3, #0
 8004448:	d118      	bne.n	800447c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800444a:	4b74      	ldr	r3, [pc, #464]	; (800461c <HAL_RCC_OscConfig+0x474>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a73      	ldr	r2, [pc, #460]	; (800461c <HAL_RCC_OscConfig+0x474>)
 8004450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004454:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004456:	f7fd fff5 	bl	8002444 <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800445c:	e008      	b.n	8004470 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800445e:	f7fd fff1 	bl	8002444 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e10c      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004470:	4b6a      	ldr	r3, [pc, #424]	; (800461c <HAL_RCC_OscConfig+0x474>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0f0      	beq.n	800445e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d106      	bne.n	8004492 <HAL_RCC_OscConfig+0x2ea>
 8004484:	4b64      	ldr	r3, [pc, #400]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 8004486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004488:	4a63      	ldr	r2, [pc, #396]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 800448a:	f043 0301 	orr.w	r3, r3, #1
 800448e:	6713      	str	r3, [r2, #112]	; 0x70
 8004490:	e01c      	b.n	80044cc <HAL_RCC_OscConfig+0x324>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	2b05      	cmp	r3, #5
 8004498:	d10c      	bne.n	80044b4 <HAL_RCC_OscConfig+0x30c>
 800449a:	4b5f      	ldr	r3, [pc, #380]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 800449c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449e:	4a5e      	ldr	r2, [pc, #376]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 80044a0:	f043 0304 	orr.w	r3, r3, #4
 80044a4:	6713      	str	r3, [r2, #112]	; 0x70
 80044a6:	4b5c      	ldr	r3, [pc, #368]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 80044a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044aa:	4a5b      	ldr	r2, [pc, #364]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 80044ac:	f043 0301 	orr.w	r3, r3, #1
 80044b0:	6713      	str	r3, [r2, #112]	; 0x70
 80044b2:	e00b      	b.n	80044cc <HAL_RCC_OscConfig+0x324>
 80044b4:	4b58      	ldr	r3, [pc, #352]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 80044b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b8:	4a57      	ldr	r2, [pc, #348]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 80044ba:	f023 0301 	bic.w	r3, r3, #1
 80044be:	6713      	str	r3, [r2, #112]	; 0x70
 80044c0:	4b55      	ldr	r3, [pc, #340]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 80044c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c4:	4a54      	ldr	r2, [pc, #336]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 80044c6:	f023 0304 	bic.w	r3, r3, #4
 80044ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d015      	beq.n	8004500 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d4:	f7fd ffb6 	bl	8002444 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044da:	e00a      	b.n	80044f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044dc:	f7fd ffb2 	bl	8002444 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e0cb      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044f2:	4b49      	ldr	r3, [pc, #292]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 80044f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0ee      	beq.n	80044dc <HAL_RCC_OscConfig+0x334>
 80044fe:	e014      	b.n	800452a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004500:	f7fd ffa0 	bl	8002444 <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004506:	e00a      	b.n	800451e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004508:	f7fd ff9c 	bl	8002444 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	f241 3288 	movw	r2, #5000	; 0x1388
 8004516:	4293      	cmp	r3, r2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e0b5      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800451e:	4b3e      	ldr	r3, [pc, #248]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 8004520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1ee      	bne.n	8004508 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800452a:	7dfb      	ldrb	r3, [r7, #23]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d105      	bne.n	800453c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004530:	4b39      	ldr	r3, [pc, #228]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 8004532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004534:	4a38      	ldr	r2, [pc, #224]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 8004536:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800453a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 80a1 	beq.w	8004688 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004546:	4b34      	ldr	r3, [pc, #208]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f003 030c 	and.w	r3, r3, #12
 800454e:	2b08      	cmp	r3, #8
 8004550:	d05c      	beq.n	800460c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	2b02      	cmp	r3, #2
 8004558:	d141      	bne.n	80045de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800455a:	4b31      	ldr	r3, [pc, #196]	; (8004620 <HAL_RCC_OscConfig+0x478>)
 800455c:	2200      	movs	r2, #0
 800455e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004560:	f7fd ff70 	bl	8002444 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004568:	f7fd ff6c 	bl	8002444 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e087      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800457a:	4b27      	ldr	r3, [pc, #156]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1f0      	bne.n	8004568 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69da      	ldr	r2, [r3, #28]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	019b      	lsls	r3, r3, #6
 8004596:	431a      	orrs	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459c:	085b      	lsrs	r3, r3, #1
 800459e:	3b01      	subs	r3, #1
 80045a0:	041b      	lsls	r3, r3, #16
 80045a2:	431a      	orrs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a8:	061b      	lsls	r3, r3, #24
 80045aa:	491b      	ldr	r1, [pc, #108]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045b0:	4b1b      	ldr	r3, [pc, #108]	; (8004620 <HAL_RCC_OscConfig+0x478>)
 80045b2:	2201      	movs	r2, #1
 80045b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b6:	f7fd ff45 	bl	8002444 <HAL_GetTick>
 80045ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045bc:	e008      	b.n	80045d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045be:	f7fd ff41 	bl	8002444 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e05c      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045d0:	4b11      	ldr	r3, [pc, #68]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0f0      	beq.n	80045be <HAL_RCC_OscConfig+0x416>
 80045dc:	e054      	b.n	8004688 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045de:	4b10      	ldr	r3, [pc, #64]	; (8004620 <HAL_RCC_OscConfig+0x478>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e4:	f7fd ff2e 	bl	8002444 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045ec:	f7fd ff2a 	bl	8002444 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e045      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045fe:	4b06      	ldr	r3, [pc, #24]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1f0      	bne.n	80045ec <HAL_RCC_OscConfig+0x444>
 800460a:	e03d      	b.n	8004688 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d107      	bne.n	8004624 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e038      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
 8004618:	40023800 	.word	0x40023800
 800461c:	40007000 	.word	0x40007000
 8004620:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004624:	4b1b      	ldr	r3, [pc, #108]	; (8004694 <HAL_RCC_OscConfig+0x4ec>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d028      	beq.n	8004684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800463c:	429a      	cmp	r2, r3
 800463e:	d121      	bne.n	8004684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800464a:	429a      	cmp	r2, r3
 800464c:	d11a      	bne.n	8004684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004654:	4013      	ands	r3, r2
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800465a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800465c:	4293      	cmp	r3, r2
 800465e:	d111      	bne.n	8004684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466a:	085b      	lsrs	r3, r3, #1
 800466c:	3b01      	subs	r3, #1
 800466e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004670:	429a      	cmp	r2, r3
 8004672:	d107      	bne.n	8004684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004680:	429a      	cmp	r2, r3
 8004682:	d001      	beq.n	8004688 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e000      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3718      	adds	r7, #24
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	40023800 	.word	0x40023800

08004698 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e0cc      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046ac:	4b68      	ldr	r3, [pc, #416]	; (8004850 <HAL_RCC_ClockConfig+0x1b8>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d90c      	bls.n	80046d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ba:	4b65      	ldr	r3, [pc, #404]	; (8004850 <HAL_RCC_ClockConfig+0x1b8>)
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	b2d2      	uxtb	r2, r2
 80046c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046c2:	4b63      	ldr	r3, [pc, #396]	; (8004850 <HAL_RCC_ClockConfig+0x1b8>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0307 	and.w	r3, r3, #7
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d001      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e0b8      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d020      	beq.n	8004722 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0304 	and.w	r3, r3, #4
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d005      	beq.n	80046f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046ec:	4b59      	ldr	r3, [pc, #356]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	4a58      	ldr	r2, [pc, #352]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 80046f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0308 	and.w	r3, r3, #8
 8004700:	2b00      	cmp	r3, #0
 8004702:	d005      	beq.n	8004710 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004704:	4b53      	ldr	r3, [pc, #332]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	4a52      	ldr	r2, [pc, #328]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 800470a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800470e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004710:	4b50      	ldr	r3, [pc, #320]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	494d      	ldr	r1, [pc, #308]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 800471e:	4313      	orrs	r3, r2
 8004720:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d044      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d107      	bne.n	8004746 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004736:	4b47      	ldr	r3, [pc, #284]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d119      	bne.n	8004776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e07f      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2b02      	cmp	r3, #2
 800474c:	d003      	beq.n	8004756 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004752:	2b03      	cmp	r3, #3
 8004754:	d107      	bne.n	8004766 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004756:	4b3f      	ldr	r3, [pc, #252]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d109      	bne.n	8004776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e06f      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004766:	4b3b      	ldr	r3, [pc, #236]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e067      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004776:	4b37      	ldr	r3, [pc, #220]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f023 0203 	bic.w	r2, r3, #3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	4934      	ldr	r1, [pc, #208]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 8004784:	4313      	orrs	r3, r2
 8004786:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004788:	f7fd fe5c 	bl	8002444 <HAL_GetTick>
 800478c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800478e:	e00a      	b.n	80047a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004790:	f7fd fe58 	bl	8002444 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	f241 3288 	movw	r2, #5000	; 0x1388
 800479e:	4293      	cmp	r3, r2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e04f      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047a6:	4b2b      	ldr	r3, [pc, #172]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f003 020c 	and.w	r2, r3, #12
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d1eb      	bne.n	8004790 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047b8:	4b25      	ldr	r3, [pc, #148]	; (8004850 <HAL_RCC_ClockConfig+0x1b8>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d20c      	bcs.n	80047e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c6:	4b22      	ldr	r3, [pc, #136]	; (8004850 <HAL_RCC_ClockConfig+0x1b8>)
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	b2d2      	uxtb	r2, r2
 80047cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ce:	4b20      	ldr	r3, [pc, #128]	; (8004850 <HAL_RCC_ClockConfig+0x1b8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d001      	beq.n	80047e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e032      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d008      	beq.n	80047fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047ec:	4b19      	ldr	r3, [pc, #100]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	4916      	ldr	r1, [pc, #88]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0308 	and.w	r3, r3, #8
 8004806:	2b00      	cmp	r3, #0
 8004808:	d009      	beq.n	800481e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800480a:	4b12      	ldr	r3, [pc, #72]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	490e      	ldr	r1, [pc, #56]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 800481a:	4313      	orrs	r3, r2
 800481c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800481e:	f000 f821 	bl	8004864 <HAL_RCC_GetSysClockFreq>
 8004822:	4602      	mov	r2, r0
 8004824:	4b0b      	ldr	r3, [pc, #44]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	091b      	lsrs	r3, r3, #4
 800482a:	f003 030f 	and.w	r3, r3, #15
 800482e:	490a      	ldr	r1, [pc, #40]	; (8004858 <HAL_RCC_ClockConfig+0x1c0>)
 8004830:	5ccb      	ldrb	r3, [r1, r3]
 8004832:	fa22 f303 	lsr.w	r3, r2, r3
 8004836:	4a09      	ldr	r2, [pc, #36]	; (800485c <HAL_RCC_ClockConfig+0x1c4>)
 8004838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800483a:	4b09      	ldr	r3, [pc, #36]	; (8004860 <HAL_RCC_ClockConfig+0x1c8>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4618      	mov	r0, r3
 8004840:	f7fd fdbc 	bl	80023bc <HAL_InitTick>

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	40023c00 	.word	0x40023c00
 8004854:	40023800 	.word	0x40023800
 8004858:	08008ac4 	.word	0x08008ac4
 800485c:	20000008 	.word	0x20000008
 8004860:	2000000c 	.word	0x2000000c

08004864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004868:	b094      	sub	sp, #80	; 0x50
 800486a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800486c:	2300      	movs	r3, #0
 800486e:	647b      	str	r3, [r7, #68]	; 0x44
 8004870:	2300      	movs	r3, #0
 8004872:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004874:	2300      	movs	r3, #0
 8004876:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004878:	2300      	movs	r3, #0
 800487a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800487c:	4b79      	ldr	r3, [pc, #484]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x200>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f003 030c 	and.w	r3, r3, #12
 8004884:	2b08      	cmp	r3, #8
 8004886:	d00d      	beq.n	80048a4 <HAL_RCC_GetSysClockFreq+0x40>
 8004888:	2b08      	cmp	r3, #8
 800488a:	f200 80e1 	bhi.w	8004a50 <HAL_RCC_GetSysClockFreq+0x1ec>
 800488e:	2b00      	cmp	r3, #0
 8004890:	d002      	beq.n	8004898 <HAL_RCC_GetSysClockFreq+0x34>
 8004892:	2b04      	cmp	r3, #4
 8004894:	d003      	beq.n	800489e <HAL_RCC_GetSysClockFreq+0x3a>
 8004896:	e0db      	b.n	8004a50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004898:	4b73      	ldr	r3, [pc, #460]	; (8004a68 <HAL_RCC_GetSysClockFreq+0x204>)
 800489a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800489c:	e0db      	b.n	8004a56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800489e:	4b73      	ldr	r3, [pc, #460]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x208>)
 80048a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048a2:	e0d8      	b.n	8004a56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048a4:	4b6f      	ldr	r3, [pc, #444]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x200>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048ac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048ae:	4b6d      	ldr	r3, [pc, #436]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x200>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d063      	beq.n	8004982 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048ba:	4b6a      	ldr	r3, [pc, #424]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x200>)
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	099b      	lsrs	r3, r3, #6
 80048c0:	2200      	movs	r2, #0
 80048c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80048c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80048c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048cc:	633b      	str	r3, [r7, #48]	; 0x30
 80048ce:	2300      	movs	r3, #0
 80048d0:	637b      	str	r3, [r7, #52]	; 0x34
 80048d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80048d6:	4622      	mov	r2, r4
 80048d8:	462b      	mov	r3, r5
 80048da:	f04f 0000 	mov.w	r0, #0
 80048de:	f04f 0100 	mov.w	r1, #0
 80048e2:	0159      	lsls	r1, r3, #5
 80048e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048e8:	0150      	lsls	r0, r2, #5
 80048ea:	4602      	mov	r2, r0
 80048ec:	460b      	mov	r3, r1
 80048ee:	4621      	mov	r1, r4
 80048f0:	1a51      	subs	r1, r2, r1
 80048f2:	6139      	str	r1, [r7, #16]
 80048f4:	4629      	mov	r1, r5
 80048f6:	eb63 0301 	sbc.w	r3, r3, r1
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	f04f 0200 	mov.w	r2, #0
 8004900:	f04f 0300 	mov.w	r3, #0
 8004904:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004908:	4659      	mov	r1, fp
 800490a:	018b      	lsls	r3, r1, #6
 800490c:	4651      	mov	r1, sl
 800490e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004912:	4651      	mov	r1, sl
 8004914:	018a      	lsls	r2, r1, #6
 8004916:	4651      	mov	r1, sl
 8004918:	ebb2 0801 	subs.w	r8, r2, r1
 800491c:	4659      	mov	r1, fp
 800491e:	eb63 0901 	sbc.w	r9, r3, r1
 8004922:	f04f 0200 	mov.w	r2, #0
 8004926:	f04f 0300 	mov.w	r3, #0
 800492a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800492e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004932:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004936:	4690      	mov	r8, r2
 8004938:	4699      	mov	r9, r3
 800493a:	4623      	mov	r3, r4
 800493c:	eb18 0303 	adds.w	r3, r8, r3
 8004940:	60bb      	str	r3, [r7, #8]
 8004942:	462b      	mov	r3, r5
 8004944:	eb49 0303 	adc.w	r3, r9, r3
 8004948:	60fb      	str	r3, [r7, #12]
 800494a:	f04f 0200 	mov.w	r2, #0
 800494e:	f04f 0300 	mov.w	r3, #0
 8004952:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004956:	4629      	mov	r1, r5
 8004958:	024b      	lsls	r3, r1, #9
 800495a:	4621      	mov	r1, r4
 800495c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004960:	4621      	mov	r1, r4
 8004962:	024a      	lsls	r2, r1, #9
 8004964:	4610      	mov	r0, r2
 8004966:	4619      	mov	r1, r3
 8004968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800496a:	2200      	movs	r2, #0
 800496c:	62bb      	str	r3, [r7, #40]	; 0x28
 800496e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004970:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004974:	f7fc f970 	bl	8000c58 <__aeabi_uldivmod>
 8004978:	4602      	mov	r2, r0
 800497a:	460b      	mov	r3, r1
 800497c:	4613      	mov	r3, r2
 800497e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004980:	e058      	b.n	8004a34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004982:	4b38      	ldr	r3, [pc, #224]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	099b      	lsrs	r3, r3, #6
 8004988:	2200      	movs	r2, #0
 800498a:	4618      	mov	r0, r3
 800498c:	4611      	mov	r1, r2
 800498e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004992:	623b      	str	r3, [r7, #32]
 8004994:	2300      	movs	r3, #0
 8004996:	627b      	str	r3, [r7, #36]	; 0x24
 8004998:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800499c:	4642      	mov	r2, r8
 800499e:	464b      	mov	r3, r9
 80049a0:	f04f 0000 	mov.w	r0, #0
 80049a4:	f04f 0100 	mov.w	r1, #0
 80049a8:	0159      	lsls	r1, r3, #5
 80049aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049ae:	0150      	lsls	r0, r2, #5
 80049b0:	4602      	mov	r2, r0
 80049b2:	460b      	mov	r3, r1
 80049b4:	4641      	mov	r1, r8
 80049b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80049ba:	4649      	mov	r1, r9
 80049bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80049c0:	f04f 0200 	mov.w	r2, #0
 80049c4:	f04f 0300 	mov.w	r3, #0
 80049c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80049d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049d4:	ebb2 040a 	subs.w	r4, r2, sl
 80049d8:	eb63 050b 	sbc.w	r5, r3, fp
 80049dc:	f04f 0200 	mov.w	r2, #0
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	00eb      	lsls	r3, r5, #3
 80049e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049ea:	00e2      	lsls	r2, r4, #3
 80049ec:	4614      	mov	r4, r2
 80049ee:	461d      	mov	r5, r3
 80049f0:	4643      	mov	r3, r8
 80049f2:	18e3      	adds	r3, r4, r3
 80049f4:	603b      	str	r3, [r7, #0]
 80049f6:	464b      	mov	r3, r9
 80049f8:	eb45 0303 	adc.w	r3, r5, r3
 80049fc:	607b      	str	r3, [r7, #4]
 80049fe:	f04f 0200 	mov.w	r2, #0
 8004a02:	f04f 0300 	mov.w	r3, #0
 8004a06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a0a:	4629      	mov	r1, r5
 8004a0c:	028b      	lsls	r3, r1, #10
 8004a0e:	4621      	mov	r1, r4
 8004a10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a14:	4621      	mov	r1, r4
 8004a16:	028a      	lsls	r2, r1, #10
 8004a18:	4610      	mov	r0, r2
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a1e:	2200      	movs	r2, #0
 8004a20:	61bb      	str	r3, [r7, #24]
 8004a22:	61fa      	str	r2, [r7, #28]
 8004a24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a28:	f7fc f916 	bl	8000c58 <__aeabi_uldivmod>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	460b      	mov	r3, r1
 8004a30:	4613      	mov	r3, r2
 8004a32:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a34:	4b0b      	ldr	r3, [pc, #44]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	0c1b      	lsrs	r3, r3, #16
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	3301      	adds	r3, #1
 8004a40:	005b      	lsls	r3, r3, #1
 8004a42:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004a44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a4e:	e002      	b.n	8004a56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a50:	4b05      	ldr	r3, [pc, #20]	; (8004a68 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3750      	adds	r7, #80	; 0x50
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a62:	bf00      	nop
 8004a64:	40023800 	.word	0x40023800
 8004a68:	00f42400 	.word	0x00f42400
 8004a6c:	007a1200 	.word	0x007a1200

08004a70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a74:	4b03      	ldr	r3, [pc, #12]	; (8004a84 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a76:	681b      	ldr	r3, [r3, #0]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	20000008 	.word	0x20000008

08004a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a8c:	f7ff fff0 	bl	8004a70 <HAL_RCC_GetHCLKFreq>
 8004a90:	4602      	mov	r2, r0
 8004a92:	4b05      	ldr	r3, [pc, #20]	; (8004aa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	0a9b      	lsrs	r3, r3, #10
 8004a98:	f003 0307 	and.w	r3, r3, #7
 8004a9c:	4903      	ldr	r1, [pc, #12]	; (8004aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a9e:	5ccb      	ldrb	r3, [r1, r3]
 8004aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	40023800 	.word	0x40023800
 8004aac:	08008ad4 	.word	0x08008ad4

08004ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ab4:	f7ff ffdc 	bl	8004a70 <HAL_RCC_GetHCLKFreq>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	0b5b      	lsrs	r3, r3, #13
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	4903      	ldr	r1, [pc, #12]	; (8004ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ac6:	5ccb      	ldrb	r3, [r1, r3]
 8004ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	40023800 	.word	0x40023800
 8004ad4:	08008ad4 	.word	0x08008ad4

08004ad8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e041      	b.n	8004b6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d106      	bne.n	8004b04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7fd fa94 	bl	800202c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2202      	movs	r2, #2
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3304      	adds	r3, #4
 8004b14:	4619      	mov	r1, r3
 8004b16:	4610      	mov	r0, r2
 8004b18:	f000 fa88 	bl	800502c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
	...

08004b78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d001      	beq.n	8004b90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e044      	b.n	8004c1a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68da      	ldr	r2, [r3, #12]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f042 0201 	orr.w	r2, r2, #1
 8004ba6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a1e      	ldr	r2, [pc, #120]	; (8004c28 <HAL_TIM_Base_Start_IT+0xb0>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d018      	beq.n	8004be4 <HAL_TIM_Base_Start_IT+0x6c>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bba:	d013      	beq.n	8004be4 <HAL_TIM_Base_Start_IT+0x6c>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a1a      	ldr	r2, [pc, #104]	; (8004c2c <HAL_TIM_Base_Start_IT+0xb4>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d00e      	beq.n	8004be4 <HAL_TIM_Base_Start_IT+0x6c>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a19      	ldr	r2, [pc, #100]	; (8004c30 <HAL_TIM_Base_Start_IT+0xb8>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d009      	beq.n	8004be4 <HAL_TIM_Base_Start_IT+0x6c>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a17      	ldr	r2, [pc, #92]	; (8004c34 <HAL_TIM_Base_Start_IT+0xbc>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d004      	beq.n	8004be4 <HAL_TIM_Base_Start_IT+0x6c>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a16      	ldr	r2, [pc, #88]	; (8004c38 <HAL_TIM_Base_Start_IT+0xc0>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d111      	bne.n	8004c08 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f003 0307 	and.w	r3, r3, #7
 8004bee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2b06      	cmp	r3, #6
 8004bf4:	d010      	beq.n	8004c18 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f042 0201 	orr.w	r2, r2, #1
 8004c04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c06:	e007      	b.n	8004c18 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f042 0201 	orr.w	r2, r2, #1
 8004c16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	40010000 	.word	0x40010000
 8004c2c:	40000400 	.word	0x40000400
 8004c30:	40000800 	.word	0x40000800
 8004c34:	40000c00 	.word	0x40000c00
 8004c38:	40014000 	.word	0x40014000

08004c3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d122      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	f003 0302 	and.w	r3, r3, #2
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d11b      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f06f 0202 	mvn.w	r2, #2
 8004c68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	f003 0303 	and.w	r3, r3, #3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f9b5 	bl	8004fee <HAL_TIM_IC_CaptureCallback>
 8004c84:	e005      	b.n	8004c92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f9a7 	bl	8004fda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 f9b8 	bl	8005002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	f003 0304 	and.w	r3, r3, #4
 8004ca2:	2b04      	cmp	r3, #4
 8004ca4:	d122      	bne.n	8004cec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b04      	cmp	r3, #4
 8004cb2:	d11b      	bne.n	8004cec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f06f 0204 	mvn.w	r2, #4
 8004cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2202      	movs	r2, #2
 8004cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f98b 	bl	8004fee <HAL_TIM_IC_CaptureCallback>
 8004cd8:	e005      	b.n	8004ce6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f97d 	bl	8004fda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 f98e 	bl	8005002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	f003 0308 	and.w	r3, r3, #8
 8004cf6:	2b08      	cmp	r3, #8
 8004cf8:	d122      	bne.n	8004d40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f003 0308 	and.w	r3, r3, #8
 8004d04:	2b08      	cmp	r3, #8
 8004d06:	d11b      	bne.n	8004d40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f06f 0208 	mvn.w	r2, #8
 8004d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2204      	movs	r2, #4
 8004d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	69db      	ldr	r3, [r3, #28]
 8004d1e:	f003 0303 	and.w	r3, r3, #3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f961 	bl	8004fee <HAL_TIM_IC_CaptureCallback>
 8004d2c:	e005      	b.n	8004d3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f953 	bl	8004fda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f964 	bl	8005002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	f003 0310 	and.w	r3, r3, #16
 8004d4a:	2b10      	cmp	r3, #16
 8004d4c:	d122      	bne.n	8004d94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f003 0310 	and.w	r3, r3, #16
 8004d58:	2b10      	cmp	r3, #16
 8004d5a:	d11b      	bne.n	8004d94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f06f 0210 	mvn.w	r2, #16
 8004d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2208      	movs	r2, #8
 8004d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	69db      	ldr	r3, [r3, #28]
 8004d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f937 	bl	8004fee <HAL_TIM_IC_CaptureCallback>
 8004d80:	e005      	b.n	8004d8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f929 	bl	8004fda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 f93a 	bl	8005002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d10e      	bne.n	8004dc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d107      	bne.n	8004dc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f06f 0201 	mvn.w	r2, #1
 8004db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7fc f9de 	bl	800117c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dca:	2b80      	cmp	r3, #128	; 0x80
 8004dcc:	d10e      	bne.n	8004dec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd8:	2b80      	cmp	r3, #128	; 0x80
 8004dda:	d107      	bne.n	8004dec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 fab2 	bl	8005350 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df6:	2b40      	cmp	r3, #64	; 0x40
 8004df8:	d10e      	bne.n	8004e18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e04:	2b40      	cmp	r3, #64	; 0x40
 8004e06:	d107      	bne.n	8004e18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f8ff 	bl	8005016 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	f003 0320 	and.w	r3, r3, #32
 8004e22:	2b20      	cmp	r3, #32
 8004e24:	d10e      	bne.n	8004e44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f003 0320 	and.w	r3, r3, #32
 8004e30:	2b20      	cmp	r3, #32
 8004e32:	d107      	bne.n	8004e44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f06f 0220 	mvn.w	r2, #32
 8004e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 fa7c 	bl	800533c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e44:	bf00      	nop
 8004e46:	3708      	adds	r7, #8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e56:	2300      	movs	r3, #0
 8004e58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d101      	bne.n	8004e68 <HAL_TIM_ConfigClockSource+0x1c>
 8004e64:	2302      	movs	r3, #2
 8004e66:	e0b4      	b.n	8004fd2 <HAL_TIM_ConfigClockSource+0x186>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2202      	movs	r2, #2
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68ba      	ldr	r2, [r7, #8]
 8004e96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ea0:	d03e      	beq.n	8004f20 <HAL_TIM_ConfigClockSource+0xd4>
 8004ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ea6:	f200 8087 	bhi.w	8004fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eae:	f000 8086 	beq.w	8004fbe <HAL_TIM_ConfigClockSource+0x172>
 8004eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eb6:	d87f      	bhi.n	8004fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004eb8:	2b70      	cmp	r3, #112	; 0x70
 8004eba:	d01a      	beq.n	8004ef2 <HAL_TIM_ConfigClockSource+0xa6>
 8004ebc:	2b70      	cmp	r3, #112	; 0x70
 8004ebe:	d87b      	bhi.n	8004fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ec0:	2b60      	cmp	r3, #96	; 0x60
 8004ec2:	d050      	beq.n	8004f66 <HAL_TIM_ConfigClockSource+0x11a>
 8004ec4:	2b60      	cmp	r3, #96	; 0x60
 8004ec6:	d877      	bhi.n	8004fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ec8:	2b50      	cmp	r3, #80	; 0x50
 8004eca:	d03c      	beq.n	8004f46 <HAL_TIM_ConfigClockSource+0xfa>
 8004ecc:	2b50      	cmp	r3, #80	; 0x50
 8004ece:	d873      	bhi.n	8004fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ed0:	2b40      	cmp	r3, #64	; 0x40
 8004ed2:	d058      	beq.n	8004f86 <HAL_TIM_ConfigClockSource+0x13a>
 8004ed4:	2b40      	cmp	r3, #64	; 0x40
 8004ed6:	d86f      	bhi.n	8004fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ed8:	2b30      	cmp	r3, #48	; 0x30
 8004eda:	d064      	beq.n	8004fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8004edc:	2b30      	cmp	r3, #48	; 0x30
 8004ede:	d86b      	bhi.n	8004fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ee0:	2b20      	cmp	r3, #32
 8004ee2:	d060      	beq.n	8004fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8004ee4:	2b20      	cmp	r3, #32
 8004ee6:	d867      	bhi.n	8004fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d05c      	beq.n	8004fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8004eec:	2b10      	cmp	r3, #16
 8004eee:	d05a      	beq.n	8004fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8004ef0:	e062      	b.n	8004fb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6818      	ldr	r0, [r3, #0]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	6899      	ldr	r1, [r3, #8]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f000 f98d 	bl	8005220 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	609a      	str	r2, [r3, #8]
      break;
 8004f1e:	e04f      	b.n	8004fc0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6818      	ldr	r0, [r3, #0]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	6899      	ldr	r1, [r3, #8]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f000 f976 	bl	8005220 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689a      	ldr	r2, [r3, #8]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f42:	609a      	str	r2, [r3, #8]
      break;
 8004f44:	e03c      	b.n	8004fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6818      	ldr	r0, [r3, #0]
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	6859      	ldr	r1, [r3, #4]
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	461a      	mov	r2, r3
 8004f54:	f000 f8ea 	bl	800512c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2150      	movs	r1, #80	; 0x50
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 f943 	bl	80051ea <TIM_ITRx_SetConfig>
      break;
 8004f64:	e02c      	b.n	8004fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6818      	ldr	r0, [r3, #0]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	6859      	ldr	r1, [r3, #4]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	461a      	mov	r2, r3
 8004f74:	f000 f909 	bl	800518a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2160      	movs	r1, #96	; 0x60
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 f933 	bl	80051ea <TIM_ITRx_SetConfig>
      break;
 8004f84:	e01c      	b.n	8004fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6818      	ldr	r0, [r3, #0]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	6859      	ldr	r1, [r3, #4]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	461a      	mov	r2, r3
 8004f94:	f000 f8ca 	bl	800512c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2140      	movs	r1, #64	; 0x40
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 f923 	bl	80051ea <TIM_ITRx_SetConfig>
      break;
 8004fa4:	e00c      	b.n	8004fc0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4619      	mov	r1, r3
 8004fb0:	4610      	mov	r0, r2
 8004fb2:	f000 f91a 	bl	80051ea <TIM_ITRx_SetConfig>
      break;
 8004fb6:	e003      	b.n	8004fc0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	73fb      	strb	r3, [r7, #15]
      break;
 8004fbc:	e000      	b.n	8004fc0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004fbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b083      	sub	sp, #12
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fe2:	bf00      	nop
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b083      	sub	sp, #12
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ff6:	bf00      	nop
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800500a:	bf00      	nop
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005016:	b480      	push	{r7}
 8005018:	b083      	sub	sp, #12
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800501e:	bf00      	nop
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
	...

0800502c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a34      	ldr	r2, [pc, #208]	; (8005110 <TIM_Base_SetConfig+0xe4>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d00f      	beq.n	8005064 <TIM_Base_SetConfig+0x38>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800504a:	d00b      	beq.n	8005064 <TIM_Base_SetConfig+0x38>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a31      	ldr	r2, [pc, #196]	; (8005114 <TIM_Base_SetConfig+0xe8>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d007      	beq.n	8005064 <TIM_Base_SetConfig+0x38>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a30      	ldr	r2, [pc, #192]	; (8005118 <TIM_Base_SetConfig+0xec>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d003      	beq.n	8005064 <TIM_Base_SetConfig+0x38>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a2f      	ldr	r2, [pc, #188]	; (800511c <TIM_Base_SetConfig+0xf0>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d108      	bne.n	8005076 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	4313      	orrs	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a25      	ldr	r2, [pc, #148]	; (8005110 <TIM_Base_SetConfig+0xe4>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d01b      	beq.n	80050b6 <TIM_Base_SetConfig+0x8a>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005084:	d017      	beq.n	80050b6 <TIM_Base_SetConfig+0x8a>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a22      	ldr	r2, [pc, #136]	; (8005114 <TIM_Base_SetConfig+0xe8>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d013      	beq.n	80050b6 <TIM_Base_SetConfig+0x8a>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a21      	ldr	r2, [pc, #132]	; (8005118 <TIM_Base_SetConfig+0xec>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d00f      	beq.n	80050b6 <TIM_Base_SetConfig+0x8a>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a20      	ldr	r2, [pc, #128]	; (800511c <TIM_Base_SetConfig+0xf0>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d00b      	beq.n	80050b6 <TIM_Base_SetConfig+0x8a>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a1f      	ldr	r2, [pc, #124]	; (8005120 <TIM_Base_SetConfig+0xf4>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d007      	beq.n	80050b6 <TIM_Base_SetConfig+0x8a>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a1e      	ldr	r2, [pc, #120]	; (8005124 <TIM_Base_SetConfig+0xf8>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d003      	beq.n	80050b6 <TIM_Base_SetConfig+0x8a>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a1d      	ldr	r2, [pc, #116]	; (8005128 <TIM_Base_SetConfig+0xfc>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d108      	bne.n	80050c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	689a      	ldr	r2, [r3, #8]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a08      	ldr	r2, [pc, #32]	; (8005110 <TIM_Base_SetConfig+0xe4>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d103      	bne.n	80050fc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	691a      	ldr	r2, [r3, #16]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	615a      	str	r2, [r3, #20]
}
 8005102:	bf00      	nop
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	40010000 	.word	0x40010000
 8005114:	40000400 	.word	0x40000400
 8005118:	40000800 	.word	0x40000800
 800511c:	40000c00 	.word	0x40000c00
 8005120:	40014000 	.word	0x40014000
 8005124:	40014400 	.word	0x40014400
 8005128:	40014800 	.word	0x40014800

0800512c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800512c:	b480      	push	{r7}
 800512e:	b087      	sub	sp, #28
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6a1b      	ldr	r3, [r3, #32]
 800513c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	f023 0201 	bic.w	r2, r3, #1
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005156:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	011b      	lsls	r3, r3, #4
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	4313      	orrs	r3, r2
 8005160:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f023 030a 	bic.w	r3, r3, #10
 8005168:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	4313      	orrs	r3, r2
 8005170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	621a      	str	r2, [r3, #32]
}
 800517e:	bf00      	nop
 8005180:	371c      	adds	r7, #28
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800518a:	b480      	push	{r7}
 800518c:	b087      	sub	sp, #28
 800518e:	af00      	add	r7, sp, #0
 8005190:	60f8      	str	r0, [r7, #12]
 8005192:	60b9      	str	r1, [r7, #8]
 8005194:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	f023 0210 	bic.w	r2, r3, #16
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6a1b      	ldr	r3, [r3, #32]
 80051ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	031b      	lsls	r3, r3, #12
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	4313      	orrs	r3, r2
 80051be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	011b      	lsls	r3, r3, #4
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	621a      	str	r2, [r3, #32]
}
 80051de:	bf00      	nop
 80051e0:	371c      	adds	r7, #28
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b085      	sub	sp, #20
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
 80051f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005200:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4313      	orrs	r3, r2
 8005208:	f043 0307 	orr.w	r3, r3, #7
 800520c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	609a      	str	r2, [r3, #8]
}
 8005214:	bf00      	nop
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005220:	b480      	push	{r7}
 8005222:	b087      	sub	sp, #28
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
 800522c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800523a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	021a      	lsls	r2, r3, #8
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	431a      	orrs	r2, r3
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	4313      	orrs	r3, r2
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	4313      	orrs	r3, r2
 800524c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	609a      	str	r2, [r3, #8]
}
 8005254:	bf00      	nop
 8005256:	371c      	adds	r7, #28
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005270:	2b01      	cmp	r3, #1
 8005272:	d101      	bne.n	8005278 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005274:	2302      	movs	r3, #2
 8005276:	e050      	b.n	800531a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2202      	movs	r2, #2
 8005284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a1c      	ldr	r2, [pc, #112]	; (8005328 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d018      	beq.n	80052ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c4:	d013      	beq.n	80052ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a18      	ldr	r2, [pc, #96]	; (800532c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d00e      	beq.n	80052ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a16      	ldr	r2, [pc, #88]	; (8005330 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d009      	beq.n	80052ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a15      	ldr	r2, [pc, #84]	; (8005334 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d004      	beq.n	80052ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a13      	ldr	r2, [pc, #76]	; (8005338 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d10c      	bne.n	8005308 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	40010000 	.word	0x40010000
 800532c:	40000400 	.word	0x40000400
 8005330:	40000800 	.word	0x40000800
 8005334:	40000c00 	.word	0x40000c00
 8005338:	40014000 	.word	0x40014000

0800533c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e03f      	b.n	80053f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d106      	bne.n	8005390 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f7fc fe76 	bl	800207c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2224      	movs	r2, #36	; 0x24
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68da      	ldr	r2, [r3, #12]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f929 	bl	8005600 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	691a      	ldr	r2, [r3, #16]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	695a      	ldr	r2, [r3, #20]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68da      	ldr	r2, [r3, #12]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2220      	movs	r2, #32
 80053e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2220      	movs	r2, #32
 80053f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3708      	adds	r7, #8
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b08a      	sub	sp, #40	; 0x28
 8005402:	af02      	add	r7, sp, #8
 8005404:	60f8      	str	r0, [r7, #12]
 8005406:	60b9      	str	r1, [r7, #8]
 8005408:	603b      	str	r3, [r7, #0]
 800540a:	4613      	mov	r3, r2
 800540c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800540e:	2300      	movs	r3, #0
 8005410:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b20      	cmp	r3, #32
 800541c:	d17c      	bne.n	8005518 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d002      	beq.n	800542a <HAL_UART_Transmit+0x2c>
 8005424:	88fb      	ldrh	r3, [r7, #6]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e075      	b.n	800551a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005434:	2b01      	cmp	r3, #1
 8005436:	d101      	bne.n	800543c <HAL_UART_Transmit+0x3e>
 8005438:	2302      	movs	r3, #2
 800543a:	e06e      	b.n	800551a <HAL_UART_Transmit+0x11c>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2221      	movs	r2, #33	; 0x21
 800544e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005452:	f7fc fff7 	bl	8002444 <HAL_GetTick>
 8005456:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	88fa      	ldrh	r2, [r7, #6]
 800545c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	88fa      	ldrh	r2, [r7, #6]
 8005462:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800546c:	d108      	bne.n	8005480 <HAL_UART_Transmit+0x82>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d104      	bne.n	8005480 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005476:	2300      	movs	r3, #0
 8005478:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	61bb      	str	r3, [r7, #24]
 800547e:	e003      	b.n	8005488 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005484:	2300      	movs	r3, #0
 8005486:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005490:	e02a      	b.n	80054e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	2200      	movs	r2, #0
 800549a:	2180      	movs	r1, #128	; 0x80
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f000 f840 	bl	8005522 <UART_WaitOnFlagUntilTimeout>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e036      	b.n	800551a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10b      	bne.n	80054ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	881b      	ldrh	r3, [r3, #0]
 80054b6:	461a      	mov	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	3302      	adds	r3, #2
 80054c6:	61bb      	str	r3, [r7, #24]
 80054c8:	e007      	b.n	80054da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	781a      	ldrb	r2, [r3, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	3301      	adds	r3, #1
 80054d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054de:	b29b      	uxth	r3, r3
 80054e0:	3b01      	subs	r3, #1
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1cf      	bne.n	8005492 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	2200      	movs	r2, #0
 80054fa:	2140      	movs	r1, #64	; 0x40
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f000 f810 	bl	8005522 <UART_WaitOnFlagUntilTimeout>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e006      	b.n	800551a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2220      	movs	r2, #32
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005514:	2300      	movs	r3, #0
 8005516:	e000      	b.n	800551a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005518:	2302      	movs	r3, #2
  }
}
 800551a:	4618      	mov	r0, r3
 800551c:	3720      	adds	r7, #32
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b090      	sub	sp, #64	; 0x40
 8005526:	af00      	add	r7, sp, #0
 8005528:	60f8      	str	r0, [r7, #12]
 800552a:	60b9      	str	r1, [r7, #8]
 800552c:	603b      	str	r3, [r7, #0]
 800552e:	4613      	mov	r3, r2
 8005530:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005532:	e050      	b.n	80055d6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553a:	d04c      	beq.n	80055d6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800553c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800553e:	2b00      	cmp	r3, #0
 8005540:	d007      	beq.n	8005552 <UART_WaitOnFlagUntilTimeout+0x30>
 8005542:	f7fc ff7f 	bl	8002444 <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800554e:	429a      	cmp	r2, r3
 8005550:	d241      	bcs.n	80055d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	330c      	adds	r3, #12
 8005558:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555c:	e853 3f00 	ldrex	r3, [r3]
 8005560:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005568:	63fb      	str	r3, [r7, #60]	; 0x3c
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	330c      	adds	r3, #12
 8005570:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005572:	637a      	str	r2, [r7, #52]	; 0x34
 8005574:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005576:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005578:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800557a:	e841 2300 	strex	r3, r2, [r1]
 800557e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1e5      	bne.n	8005552 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	3314      	adds	r3, #20
 800558c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	e853 3f00 	ldrex	r3, [r3]
 8005594:	613b      	str	r3, [r7, #16]
   return(result);
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	f023 0301 	bic.w	r3, r3, #1
 800559c:	63bb      	str	r3, [r7, #56]	; 0x38
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	3314      	adds	r3, #20
 80055a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055a6:	623a      	str	r2, [r7, #32]
 80055a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055aa:	69f9      	ldr	r1, [r7, #28]
 80055ac:	6a3a      	ldr	r2, [r7, #32]
 80055ae:	e841 2300 	strex	r3, r2, [r1]
 80055b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1e5      	bne.n	8005586 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2220      	movs	r2, #32
 80055be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e00f      	b.n	80055f6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	4013      	ands	r3, r2
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	bf0c      	ite	eq
 80055e6:	2301      	moveq	r3, #1
 80055e8:	2300      	movne	r3, #0
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	461a      	mov	r2, r3
 80055ee:	79fb      	ldrb	r3, [r7, #7]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d09f      	beq.n	8005534 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3740      	adds	r7, #64	; 0x40
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
	...

08005600 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005604:	b0c0      	sub	sp, #256	; 0x100
 8005606:	af00      	add	r7, sp, #0
 8005608:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800560c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800561c:	68d9      	ldr	r1, [r3, #12]
 800561e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	ea40 0301 	orr.w	r3, r0, r1
 8005628:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800562a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800562e:	689a      	ldr	r2, [r3, #8]
 8005630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	431a      	orrs	r2, r3
 8005638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	431a      	orrs	r2, r3
 8005640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	4313      	orrs	r3, r2
 8005648:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800564c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005658:	f021 010c 	bic.w	r1, r1, #12
 800565c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005666:	430b      	orrs	r3, r1
 8005668:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800566a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800567a:	6999      	ldr	r1, [r3, #24]
 800567c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	ea40 0301 	orr.w	r3, r0, r1
 8005686:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	4b8f      	ldr	r3, [pc, #572]	; (80058cc <UART_SetConfig+0x2cc>)
 8005690:	429a      	cmp	r2, r3
 8005692:	d005      	beq.n	80056a0 <UART_SetConfig+0xa0>
 8005694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	4b8d      	ldr	r3, [pc, #564]	; (80058d0 <UART_SetConfig+0x2d0>)
 800569c:	429a      	cmp	r2, r3
 800569e:	d104      	bne.n	80056aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056a0:	f7ff fa06 	bl	8004ab0 <HAL_RCC_GetPCLK2Freq>
 80056a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80056a8:	e003      	b.n	80056b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056aa:	f7ff f9ed 	bl	8004a88 <HAL_RCC_GetPCLK1Freq>
 80056ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b6:	69db      	ldr	r3, [r3, #28]
 80056b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056bc:	f040 810c 	bne.w	80058d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056c4:	2200      	movs	r2, #0
 80056c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80056ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80056ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80056d2:	4622      	mov	r2, r4
 80056d4:	462b      	mov	r3, r5
 80056d6:	1891      	adds	r1, r2, r2
 80056d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80056da:	415b      	adcs	r3, r3
 80056dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80056e2:	4621      	mov	r1, r4
 80056e4:	eb12 0801 	adds.w	r8, r2, r1
 80056e8:	4629      	mov	r1, r5
 80056ea:	eb43 0901 	adc.w	r9, r3, r1
 80056ee:	f04f 0200 	mov.w	r2, #0
 80056f2:	f04f 0300 	mov.w	r3, #0
 80056f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005702:	4690      	mov	r8, r2
 8005704:	4699      	mov	r9, r3
 8005706:	4623      	mov	r3, r4
 8005708:	eb18 0303 	adds.w	r3, r8, r3
 800570c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005710:	462b      	mov	r3, r5
 8005712:	eb49 0303 	adc.w	r3, r9, r3
 8005716:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800571a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005726:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800572a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800572e:	460b      	mov	r3, r1
 8005730:	18db      	adds	r3, r3, r3
 8005732:	653b      	str	r3, [r7, #80]	; 0x50
 8005734:	4613      	mov	r3, r2
 8005736:	eb42 0303 	adc.w	r3, r2, r3
 800573a:	657b      	str	r3, [r7, #84]	; 0x54
 800573c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005740:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005744:	f7fb fa88 	bl	8000c58 <__aeabi_uldivmod>
 8005748:	4602      	mov	r2, r0
 800574a:	460b      	mov	r3, r1
 800574c:	4b61      	ldr	r3, [pc, #388]	; (80058d4 <UART_SetConfig+0x2d4>)
 800574e:	fba3 2302 	umull	r2, r3, r3, r2
 8005752:	095b      	lsrs	r3, r3, #5
 8005754:	011c      	lsls	r4, r3, #4
 8005756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800575a:	2200      	movs	r2, #0
 800575c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005760:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005764:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005768:	4642      	mov	r2, r8
 800576a:	464b      	mov	r3, r9
 800576c:	1891      	adds	r1, r2, r2
 800576e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005770:	415b      	adcs	r3, r3
 8005772:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005774:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005778:	4641      	mov	r1, r8
 800577a:	eb12 0a01 	adds.w	sl, r2, r1
 800577e:	4649      	mov	r1, r9
 8005780:	eb43 0b01 	adc.w	fp, r3, r1
 8005784:	f04f 0200 	mov.w	r2, #0
 8005788:	f04f 0300 	mov.w	r3, #0
 800578c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005790:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005794:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005798:	4692      	mov	sl, r2
 800579a:	469b      	mov	fp, r3
 800579c:	4643      	mov	r3, r8
 800579e:	eb1a 0303 	adds.w	r3, sl, r3
 80057a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057a6:	464b      	mov	r3, r9
 80057a8:	eb4b 0303 	adc.w	r3, fp, r3
 80057ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80057b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80057c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80057c4:	460b      	mov	r3, r1
 80057c6:	18db      	adds	r3, r3, r3
 80057c8:	643b      	str	r3, [r7, #64]	; 0x40
 80057ca:	4613      	mov	r3, r2
 80057cc:	eb42 0303 	adc.w	r3, r2, r3
 80057d0:	647b      	str	r3, [r7, #68]	; 0x44
 80057d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80057d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80057da:	f7fb fa3d 	bl	8000c58 <__aeabi_uldivmod>
 80057de:	4602      	mov	r2, r0
 80057e0:	460b      	mov	r3, r1
 80057e2:	4611      	mov	r1, r2
 80057e4:	4b3b      	ldr	r3, [pc, #236]	; (80058d4 <UART_SetConfig+0x2d4>)
 80057e6:	fba3 2301 	umull	r2, r3, r3, r1
 80057ea:	095b      	lsrs	r3, r3, #5
 80057ec:	2264      	movs	r2, #100	; 0x64
 80057ee:	fb02 f303 	mul.w	r3, r2, r3
 80057f2:	1acb      	subs	r3, r1, r3
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80057fa:	4b36      	ldr	r3, [pc, #216]	; (80058d4 <UART_SetConfig+0x2d4>)
 80057fc:	fba3 2302 	umull	r2, r3, r3, r2
 8005800:	095b      	lsrs	r3, r3, #5
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005808:	441c      	add	r4, r3
 800580a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800580e:	2200      	movs	r2, #0
 8005810:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005814:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005818:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800581c:	4642      	mov	r2, r8
 800581e:	464b      	mov	r3, r9
 8005820:	1891      	adds	r1, r2, r2
 8005822:	63b9      	str	r1, [r7, #56]	; 0x38
 8005824:	415b      	adcs	r3, r3
 8005826:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005828:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800582c:	4641      	mov	r1, r8
 800582e:	1851      	adds	r1, r2, r1
 8005830:	6339      	str	r1, [r7, #48]	; 0x30
 8005832:	4649      	mov	r1, r9
 8005834:	414b      	adcs	r3, r1
 8005836:	637b      	str	r3, [r7, #52]	; 0x34
 8005838:	f04f 0200 	mov.w	r2, #0
 800583c:	f04f 0300 	mov.w	r3, #0
 8005840:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005844:	4659      	mov	r1, fp
 8005846:	00cb      	lsls	r3, r1, #3
 8005848:	4651      	mov	r1, sl
 800584a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800584e:	4651      	mov	r1, sl
 8005850:	00ca      	lsls	r2, r1, #3
 8005852:	4610      	mov	r0, r2
 8005854:	4619      	mov	r1, r3
 8005856:	4603      	mov	r3, r0
 8005858:	4642      	mov	r2, r8
 800585a:	189b      	adds	r3, r3, r2
 800585c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005860:	464b      	mov	r3, r9
 8005862:	460a      	mov	r2, r1
 8005864:	eb42 0303 	adc.w	r3, r2, r3
 8005868:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800586c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005878:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800587c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005880:	460b      	mov	r3, r1
 8005882:	18db      	adds	r3, r3, r3
 8005884:	62bb      	str	r3, [r7, #40]	; 0x28
 8005886:	4613      	mov	r3, r2
 8005888:	eb42 0303 	adc.w	r3, r2, r3
 800588c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800588e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005892:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005896:	f7fb f9df 	bl	8000c58 <__aeabi_uldivmod>
 800589a:	4602      	mov	r2, r0
 800589c:	460b      	mov	r3, r1
 800589e:	4b0d      	ldr	r3, [pc, #52]	; (80058d4 <UART_SetConfig+0x2d4>)
 80058a0:	fba3 1302 	umull	r1, r3, r3, r2
 80058a4:	095b      	lsrs	r3, r3, #5
 80058a6:	2164      	movs	r1, #100	; 0x64
 80058a8:	fb01 f303 	mul.w	r3, r1, r3
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	3332      	adds	r3, #50	; 0x32
 80058b2:	4a08      	ldr	r2, [pc, #32]	; (80058d4 <UART_SetConfig+0x2d4>)
 80058b4:	fba2 2303 	umull	r2, r3, r2, r3
 80058b8:	095b      	lsrs	r3, r3, #5
 80058ba:	f003 0207 	and.w	r2, r3, #7
 80058be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4422      	add	r2, r4
 80058c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058c8:	e105      	b.n	8005ad6 <UART_SetConfig+0x4d6>
 80058ca:	bf00      	nop
 80058cc:	40011000 	.word	0x40011000
 80058d0:	40011400 	.word	0x40011400
 80058d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058dc:	2200      	movs	r2, #0
 80058de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80058e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80058e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80058ea:	4642      	mov	r2, r8
 80058ec:	464b      	mov	r3, r9
 80058ee:	1891      	adds	r1, r2, r2
 80058f0:	6239      	str	r1, [r7, #32]
 80058f2:	415b      	adcs	r3, r3
 80058f4:	627b      	str	r3, [r7, #36]	; 0x24
 80058f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058fa:	4641      	mov	r1, r8
 80058fc:	1854      	adds	r4, r2, r1
 80058fe:	4649      	mov	r1, r9
 8005900:	eb43 0501 	adc.w	r5, r3, r1
 8005904:	f04f 0200 	mov.w	r2, #0
 8005908:	f04f 0300 	mov.w	r3, #0
 800590c:	00eb      	lsls	r3, r5, #3
 800590e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005912:	00e2      	lsls	r2, r4, #3
 8005914:	4614      	mov	r4, r2
 8005916:	461d      	mov	r5, r3
 8005918:	4643      	mov	r3, r8
 800591a:	18e3      	adds	r3, r4, r3
 800591c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005920:	464b      	mov	r3, r9
 8005922:	eb45 0303 	adc.w	r3, r5, r3
 8005926:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800592a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005936:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800593a:	f04f 0200 	mov.w	r2, #0
 800593e:	f04f 0300 	mov.w	r3, #0
 8005942:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005946:	4629      	mov	r1, r5
 8005948:	008b      	lsls	r3, r1, #2
 800594a:	4621      	mov	r1, r4
 800594c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005950:	4621      	mov	r1, r4
 8005952:	008a      	lsls	r2, r1, #2
 8005954:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005958:	f7fb f97e 	bl	8000c58 <__aeabi_uldivmod>
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	4b60      	ldr	r3, [pc, #384]	; (8005ae4 <UART_SetConfig+0x4e4>)
 8005962:	fba3 2302 	umull	r2, r3, r3, r2
 8005966:	095b      	lsrs	r3, r3, #5
 8005968:	011c      	lsls	r4, r3, #4
 800596a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800596e:	2200      	movs	r2, #0
 8005970:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005974:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005978:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800597c:	4642      	mov	r2, r8
 800597e:	464b      	mov	r3, r9
 8005980:	1891      	adds	r1, r2, r2
 8005982:	61b9      	str	r1, [r7, #24]
 8005984:	415b      	adcs	r3, r3
 8005986:	61fb      	str	r3, [r7, #28]
 8005988:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800598c:	4641      	mov	r1, r8
 800598e:	1851      	adds	r1, r2, r1
 8005990:	6139      	str	r1, [r7, #16]
 8005992:	4649      	mov	r1, r9
 8005994:	414b      	adcs	r3, r1
 8005996:	617b      	str	r3, [r7, #20]
 8005998:	f04f 0200 	mov.w	r2, #0
 800599c:	f04f 0300 	mov.w	r3, #0
 80059a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059a4:	4659      	mov	r1, fp
 80059a6:	00cb      	lsls	r3, r1, #3
 80059a8:	4651      	mov	r1, sl
 80059aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059ae:	4651      	mov	r1, sl
 80059b0:	00ca      	lsls	r2, r1, #3
 80059b2:	4610      	mov	r0, r2
 80059b4:	4619      	mov	r1, r3
 80059b6:	4603      	mov	r3, r0
 80059b8:	4642      	mov	r2, r8
 80059ba:	189b      	adds	r3, r3, r2
 80059bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059c0:	464b      	mov	r3, r9
 80059c2:	460a      	mov	r2, r1
 80059c4:	eb42 0303 	adc.w	r3, r2, r3
 80059c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80059cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80059d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80059d8:	f04f 0200 	mov.w	r2, #0
 80059dc:	f04f 0300 	mov.w	r3, #0
 80059e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80059e4:	4649      	mov	r1, r9
 80059e6:	008b      	lsls	r3, r1, #2
 80059e8:	4641      	mov	r1, r8
 80059ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059ee:	4641      	mov	r1, r8
 80059f0:	008a      	lsls	r2, r1, #2
 80059f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80059f6:	f7fb f92f 	bl	8000c58 <__aeabi_uldivmod>
 80059fa:	4602      	mov	r2, r0
 80059fc:	460b      	mov	r3, r1
 80059fe:	4b39      	ldr	r3, [pc, #228]	; (8005ae4 <UART_SetConfig+0x4e4>)
 8005a00:	fba3 1302 	umull	r1, r3, r3, r2
 8005a04:	095b      	lsrs	r3, r3, #5
 8005a06:	2164      	movs	r1, #100	; 0x64
 8005a08:	fb01 f303 	mul.w	r3, r1, r3
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	011b      	lsls	r3, r3, #4
 8005a10:	3332      	adds	r3, #50	; 0x32
 8005a12:	4a34      	ldr	r2, [pc, #208]	; (8005ae4 <UART_SetConfig+0x4e4>)
 8005a14:	fba2 2303 	umull	r2, r3, r2, r3
 8005a18:	095b      	lsrs	r3, r3, #5
 8005a1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a1e:	441c      	add	r4, r3
 8005a20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a24:	2200      	movs	r2, #0
 8005a26:	673b      	str	r3, [r7, #112]	; 0x70
 8005a28:	677a      	str	r2, [r7, #116]	; 0x74
 8005a2a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005a2e:	4642      	mov	r2, r8
 8005a30:	464b      	mov	r3, r9
 8005a32:	1891      	adds	r1, r2, r2
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	415b      	adcs	r3, r3
 8005a38:	60fb      	str	r3, [r7, #12]
 8005a3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a3e:	4641      	mov	r1, r8
 8005a40:	1851      	adds	r1, r2, r1
 8005a42:	6039      	str	r1, [r7, #0]
 8005a44:	4649      	mov	r1, r9
 8005a46:	414b      	adcs	r3, r1
 8005a48:	607b      	str	r3, [r7, #4]
 8005a4a:	f04f 0200 	mov.w	r2, #0
 8005a4e:	f04f 0300 	mov.w	r3, #0
 8005a52:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a56:	4659      	mov	r1, fp
 8005a58:	00cb      	lsls	r3, r1, #3
 8005a5a:	4651      	mov	r1, sl
 8005a5c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a60:	4651      	mov	r1, sl
 8005a62:	00ca      	lsls	r2, r1, #3
 8005a64:	4610      	mov	r0, r2
 8005a66:	4619      	mov	r1, r3
 8005a68:	4603      	mov	r3, r0
 8005a6a:	4642      	mov	r2, r8
 8005a6c:	189b      	adds	r3, r3, r2
 8005a6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a70:	464b      	mov	r3, r9
 8005a72:	460a      	mov	r2, r1
 8005a74:	eb42 0303 	adc.w	r3, r2, r3
 8005a78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	663b      	str	r3, [r7, #96]	; 0x60
 8005a84:	667a      	str	r2, [r7, #100]	; 0x64
 8005a86:	f04f 0200 	mov.w	r2, #0
 8005a8a:	f04f 0300 	mov.w	r3, #0
 8005a8e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005a92:	4649      	mov	r1, r9
 8005a94:	008b      	lsls	r3, r1, #2
 8005a96:	4641      	mov	r1, r8
 8005a98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a9c:	4641      	mov	r1, r8
 8005a9e:	008a      	lsls	r2, r1, #2
 8005aa0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005aa4:	f7fb f8d8 	bl	8000c58 <__aeabi_uldivmod>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	460b      	mov	r3, r1
 8005aac:	4b0d      	ldr	r3, [pc, #52]	; (8005ae4 <UART_SetConfig+0x4e4>)
 8005aae:	fba3 1302 	umull	r1, r3, r3, r2
 8005ab2:	095b      	lsrs	r3, r3, #5
 8005ab4:	2164      	movs	r1, #100	; 0x64
 8005ab6:	fb01 f303 	mul.w	r3, r1, r3
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	011b      	lsls	r3, r3, #4
 8005abe:	3332      	adds	r3, #50	; 0x32
 8005ac0:	4a08      	ldr	r2, [pc, #32]	; (8005ae4 <UART_SetConfig+0x4e4>)
 8005ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac6:	095b      	lsrs	r3, r3, #5
 8005ac8:	f003 020f 	and.w	r2, r3, #15
 8005acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4422      	add	r2, r4
 8005ad4:	609a      	str	r2, [r3, #8]
}
 8005ad6:	bf00      	nop
 8005ad8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005adc:	46bd      	mov	sp, r7
 8005ade:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ae2:	bf00      	nop
 8005ae4:	51eb851f 	.word	0x51eb851f

08005ae8 <__assert_func>:
 8005ae8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005aea:	4614      	mov	r4, r2
 8005aec:	461a      	mov	r2, r3
 8005aee:	4b09      	ldr	r3, [pc, #36]	; (8005b14 <__assert_func+0x2c>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4605      	mov	r5, r0
 8005af4:	68d8      	ldr	r0, [r3, #12]
 8005af6:	b14c      	cbz	r4, 8005b0c <__assert_func+0x24>
 8005af8:	4b07      	ldr	r3, [pc, #28]	; (8005b18 <__assert_func+0x30>)
 8005afa:	9100      	str	r1, [sp, #0]
 8005afc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005b00:	4906      	ldr	r1, [pc, #24]	; (8005b1c <__assert_func+0x34>)
 8005b02:	462b      	mov	r3, r5
 8005b04:	f000 f814 	bl	8005b30 <fiprintf>
 8005b08:	f000 fef4 	bl	80068f4 <abort>
 8005b0c:	4b04      	ldr	r3, [pc, #16]	; (8005b20 <__assert_func+0x38>)
 8005b0e:	461c      	mov	r4, r3
 8005b10:	e7f3      	b.n	8005afa <__assert_func+0x12>
 8005b12:	bf00      	nop
 8005b14:	20000014 	.word	0x20000014
 8005b18:	08008adc 	.word	0x08008adc
 8005b1c:	08008ae9 	.word	0x08008ae9
 8005b20:	08008b17 	.word	0x08008b17

08005b24 <__errno>:
 8005b24:	4b01      	ldr	r3, [pc, #4]	; (8005b2c <__errno+0x8>)
 8005b26:	6818      	ldr	r0, [r3, #0]
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	20000014 	.word	0x20000014

08005b30 <fiprintf>:
 8005b30:	b40e      	push	{r1, r2, r3}
 8005b32:	b503      	push	{r0, r1, lr}
 8005b34:	4601      	mov	r1, r0
 8005b36:	ab03      	add	r3, sp, #12
 8005b38:	4805      	ldr	r0, [pc, #20]	; (8005b50 <fiprintf+0x20>)
 8005b3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b3e:	6800      	ldr	r0, [r0, #0]
 8005b40:	9301      	str	r3, [sp, #4]
 8005b42:	f000 f85d 	bl	8005c00 <_vfiprintf_r>
 8005b46:	b002      	add	sp, #8
 8005b48:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b4c:	b003      	add	sp, #12
 8005b4e:	4770      	bx	lr
 8005b50:	20000014 	.word	0x20000014

08005b54 <__libc_init_array>:
 8005b54:	b570      	push	{r4, r5, r6, lr}
 8005b56:	4d0d      	ldr	r5, [pc, #52]	; (8005b8c <__libc_init_array+0x38>)
 8005b58:	4c0d      	ldr	r4, [pc, #52]	; (8005b90 <__libc_init_array+0x3c>)
 8005b5a:	1b64      	subs	r4, r4, r5
 8005b5c:	10a4      	asrs	r4, r4, #2
 8005b5e:	2600      	movs	r6, #0
 8005b60:	42a6      	cmp	r6, r4
 8005b62:	d109      	bne.n	8005b78 <__libc_init_array+0x24>
 8005b64:	4d0b      	ldr	r5, [pc, #44]	; (8005b94 <__libc_init_array+0x40>)
 8005b66:	4c0c      	ldr	r4, [pc, #48]	; (8005b98 <__libc_init_array+0x44>)
 8005b68:	f002 fed0 	bl	800890c <_init>
 8005b6c:	1b64      	subs	r4, r4, r5
 8005b6e:	10a4      	asrs	r4, r4, #2
 8005b70:	2600      	movs	r6, #0
 8005b72:	42a6      	cmp	r6, r4
 8005b74:	d105      	bne.n	8005b82 <__libc_init_array+0x2e>
 8005b76:	bd70      	pop	{r4, r5, r6, pc}
 8005b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b7c:	4798      	blx	r3
 8005b7e:	3601      	adds	r6, #1
 8005b80:	e7ee      	b.n	8005b60 <__libc_init_array+0xc>
 8005b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b86:	4798      	blx	r3
 8005b88:	3601      	adds	r6, #1
 8005b8a:	e7f2      	b.n	8005b72 <__libc_init_array+0x1e>
 8005b8c:	08008ec0 	.word	0x08008ec0
 8005b90:	08008ec0 	.word	0x08008ec0
 8005b94:	08008ec0 	.word	0x08008ec0
 8005b98:	08008ec4 	.word	0x08008ec4

08005b9c <memset>:
 8005b9c:	4402      	add	r2, r0
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d100      	bne.n	8005ba6 <memset+0xa>
 8005ba4:	4770      	bx	lr
 8005ba6:	f803 1b01 	strb.w	r1, [r3], #1
 8005baa:	e7f9      	b.n	8005ba0 <memset+0x4>

08005bac <__sfputc_r>:
 8005bac:	6893      	ldr	r3, [r2, #8]
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	b410      	push	{r4}
 8005bb4:	6093      	str	r3, [r2, #8]
 8005bb6:	da08      	bge.n	8005bca <__sfputc_r+0x1e>
 8005bb8:	6994      	ldr	r4, [r2, #24]
 8005bba:	42a3      	cmp	r3, r4
 8005bbc:	db01      	blt.n	8005bc2 <__sfputc_r+0x16>
 8005bbe:	290a      	cmp	r1, #10
 8005bc0:	d103      	bne.n	8005bca <__sfputc_r+0x1e>
 8005bc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bc6:	f000 bdd5 	b.w	8006774 <__swbuf_r>
 8005bca:	6813      	ldr	r3, [r2, #0]
 8005bcc:	1c58      	adds	r0, r3, #1
 8005bce:	6010      	str	r0, [r2, #0]
 8005bd0:	7019      	strb	r1, [r3, #0]
 8005bd2:	4608      	mov	r0, r1
 8005bd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <__sfputs_r>:
 8005bda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bdc:	4606      	mov	r6, r0
 8005bde:	460f      	mov	r7, r1
 8005be0:	4614      	mov	r4, r2
 8005be2:	18d5      	adds	r5, r2, r3
 8005be4:	42ac      	cmp	r4, r5
 8005be6:	d101      	bne.n	8005bec <__sfputs_r+0x12>
 8005be8:	2000      	movs	r0, #0
 8005bea:	e007      	b.n	8005bfc <__sfputs_r+0x22>
 8005bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bf0:	463a      	mov	r2, r7
 8005bf2:	4630      	mov	r0, r6
 8005bf4:	f7ff ffda 	bl	8005bac <__sfputc_r>
 8005bf8:	1c43      	adds	r3, r0, #1
 8005bfa:	d1f3      	bne.n	8005be4 <__sfputs_r+0xa>
 8005bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c00 <_vfiprintf_r>:
 8005c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c04:	460d      	mov	r5, r1
 8005c06:	b09d      	sub	sp, #116	; 0x74
 8005c08:	4614      	mov	r4, r2
 8005c0a:	4698      	mov	r8, r3
 8005c0c:	4606      	mov	r6, r0
 8005c0e:	b118      	cbz	r0, 8005c18 <_vfiprintf_r+0x18>
 8005c10:	6983      	ldr	r3, [r0, #24]
 8005c12:	b90b      	cbnz	r3, 8005c18 <_vfiprintf_r+0x18>
 8005c14:	f001 fe08 	bl	8007828 <__sinit>
 8005c18:	4b89      	ldr	r3, [pc, #548]	; (8005e40 <_vfiprintf_r+0x240>)
 8005c1a:	429d      	cmp	r5, r3
 8005c1c:	d11b      	bne.n	8005c56 <_vfiprintf_r+0x56>
 8005c1e:	6875      	ldr	r5, [r6, #4]
 8005c20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c22:	07d9      	lsls	r1, r3, #31
 8005c24:	d405      	bmi.n	8005c32 <_vfiprintf_r+0x32>
 8005c26:	89ab      	ldrh	r3, [r5, #12]
 8005c28:	059a      	lsls	r2, r3, #22
 8005c2a:	d402      	bmi.n	8005c32 <_vfiprintf_r+0x32>
 8005c2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c2e:	f001 fe9e 	bl	800796e <__retarget_lock_acquire_recursive>
 8005c32:	89ab      	ldrh	r3, [r5, #12]
 8005c34:	071b      	lsls	r3, r3, #28
 8005c36:	d501      	bpl.n	8005c3c <_vfiprintf_r+0x3c>
 8005c38:	692b      	ldr	r3, [r5, #16]
 8005c3a:	b9eb      	cbnz	r3, 8005c78 <_vfiprintf_r+0x78>
 8005c3c:	4629      	mov	r1, r5
 8005c3e:	4630      	mov	r0, r6
 8005c40:	f000 fdea 	bl	8006818 <__swsetup_r>
 8005c44:	b1c0      	cbz	r0, 8005c78 <_vfiprintf_r+0x78>
 8005c46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c48:	07dc      	lsls	r4, r3, #31
 8005c4a:	d50e      	bpl.n	8005c6a <_vfiprintf_r+0x6a>
 8005c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c50:	b01d      	add	sp, #116	; 0x74
 8005c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c56:	4b7b      	ldr	r3, [pc, #492]	; (8005e44 <_vfiprintf_r+0x244>)
 8005c58:	429d      	cmp	r5, r3
 8005c5a:	d101      	bne.n	8005c60 <_vfiprintf_r+0x60>
 8005c5c:	68b5      	ldr	r5, [r6, #8]
 8005c5e:	e7df      	b.n	8005c20 <_vfiprintf_r+0x20>
 8005c60:	4b79      	ldr	r3, [pc, #484]	; (8005e48 <_vfiprintf_r+0x248>)
 8005c62:	429d      	cmp	r5, r3
 8005c64:	bf08      	it	eq
 8005c66:	68f5      	ldreq	r5, [r6, #12]
 8005c68:	e7da      	b.n	8005c20 <_vfiprintf_r+0x20>
 8005c6a:	89ab      	ldrh	r3, [r5, #12]
 8005c6c:	0598      	lsls	r0, r3, #22
 8005c6e:	d4ed      	bmi.n	8005c4c <_vfiprintf_r+0x4c>
 8005c70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c72:	f001 fe7d 	bl	8007970 <__retarget_lock_release_recursive>
 8005c76:	e7e9      	b.n	8005c4c <_vfiprintf_r+0x4c>
 8005c78:	2300      	movs	r3, #0
 8005c7a:	9309      	str	r3, [sp, #36]	; 0x24
 8005c7c:	2320      	movs	r3, #32
 8005c7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c82:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c86:	2330      	movs	r3, #48	; 0x30
 8005c88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005e4c <_vfiprintf_r+0x24c>
 8005c8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c90:	f04f 0901 	mov.w	r9, #1
 8005c94:	4623      	mov	r3, r4
 8005c96:	469a      	mov	sl, r3
 8005c98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c9c:	b10a      	cbz	r2, 8005ca2 <_vfiprintf_r+0xa2>
 8005c9e:	2a25      	cmp	r2, #37	; 0x25
 8005ca0:	d1f9      	bne.n	8005c96 <_vfiprintf_r+0x96>
 8005ca2:	ebba 0b04 	subs.w	fp, sl, r4
 8005ca6:	d00b      	beq.n	8005cc0 <_vfiprintf_r+0xc0>
 8005ca8:	465b      	mov	r3, fp
 8005caa:	4622      	mov	r2, r4
 8005cac:	4629      	mov	r1, r5
 8005cae:	4630      	mov	r0, r6
 8005cb0:	f7ff ff93 	bl	8005bda <__sfputs_r>
 8005cb4:	3001      	adds	r0, #1
 8005cb6:	f000 80aa 	beq.w	8005e0e <_vfiprintf_r+0x20e>
 8005cba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cbc:	445a      	add	r2, fp
 8005cbe:	9209      	str	r2, [sp, #36]	; 0x24
 8005cc0:	f89a 3000 	ldrb.w	r3, [sl]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f000 80a2 	beq.w	8005e0e <_vfiprintf_r+0x20e>
 8005cca:	2300      	movs	r3, #0
 8005ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8005cd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cd4:	f10a 0a01 	add.w	sl, sl, #1
 8005cd8:	9304      	str	r3, [sp, #16]
 8005cda:	9307      	str	r3, [sp, #28]
 8005cdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ce0:	931a      	str	r3, [sp, #104]	; 0x68
 8005ce2:	4654      	mov	r4, sl
 8005ce4:	2205      	movs	r2, #5
 8005ce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cea:	4858      	ldr	r0, [pc, #352]	; (8005e4c <_vfiprintf_r+0x24c>)
 8005cec:	f7fa fa80 	bl	80001f0 <memchr>
 8005cf0:	9a04      	ldr	r2, [sp, #16]
 8005cf2:	b9d8      	cbnz	r0, 8005d2c <_vfiprintf_r+0x12c>
 8005cf4:	06d1      	lsls	r1, r2, #27
 8005cf6:	bf44      	itt	mi
 8005cf8:	2320      	movmi	r3, #32
 8005cfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cfe:	0713      	lsls	r3, r2, #28
 8005d00:	bf44      	itt	mi
 8005d02:	232b      	movmi	r3, #43	; 0x2b
 8005d04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d08:	f89a 3000 	ldrb.w	r3, [sl]
 8005d0c:	2b2a      	cmp	r3, #42	; 0x2a
 8005d0e:	d015      	beq.n	8005d3c <_vfiprintf_r+0x13c>
 8005d10:	9a07      	ldr	r2, [sp, #28]
 8005d12:	4654      	mov	r4, sl
 8005d14:	2000      	movs	r0, #0
 8005d16:	f04f 0c0a 	mov.w	ip, #10
 8005d1a:	4621      	mov	r1, r4
 8005d1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d20:	3b30      	subs	r3, #48	; 0x30
 8005d22:	2b09      	cmp	r3, #9
 8005d24:	d94e      	bls.n	8005dc4 <_vfiprintf_r+0x1c4>
 8005d26:	b1b0      	cbz	r0, 8005d56 <_vfiprintf_r+0x156>
 8005d28:	9207      	str	r2, [sp, #28]
 8005d2a:	e014      	b.n	8005d56 <_vfiprintf_r+0x156>
 8005d2c:	eba0 0308 	sub.w	r3, r0, r8
 8005d30:	fa09 f303 	lsl.w	r3, r9, r3
 8005d34:	4313      	orrs	r3, r2
 8005d36:	9304      	str	r3, [sp, #16]
 8005d38:	46a2      	mov	sl, r4
 8005d3a:	e7d2      	b.n	8005ce2 <_vfiprintf_r+0xe2>
 8005d3c:	9b03      	ldr	r3, [sp, #12]
 8005d3e:	1d19      	adds	r1, r3, #4
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	9103      	str	r1, [sp, #12]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	bfbb      	ittet	lt
 8005d48:	425b      	neglt	r3, r3
 8005d4a:	f042 0202 	orrlt.w	r2, r2, #2
 8005d4e:	9307      	strge	r3, [sp, #28]
 8005d50:	9307      	strlt	r3, [sp, #28]
 8005d52:	bfb8      	it	lt
 8005d54:	9204      	strlt	r2, [sp, #16]
 8005d56:	7823      	ldrb	r3, [r4, #0]
 8005d58:	2b2e      	cmp	r3, #46	; 0x2e
 8005d5a:	d10c      	bne.n	8005d76 <_vfiprintf_r+0x176>
 8005d5c:	7863      	ldrb	r3, [r4, #1]
 8005d5e:	2b2a      	cmp	r3, #42	; 0x2a
 8005d60:	d135      	bne.n	8005dce <_vfiprintf_r+0x1ce>
 8005d62:	9b03      	ldr	r3, [sp, #12]
 8005d64:	1d1a      	adds	r2, r3, #4
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	9203      	str	r2, [sp, #12]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	bfb8      	it	lt
 8005d6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d72:	3402      	adds	r4, #2
 8005d74:	9305      	str	r3, [sp, #20]
 8005d76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005e5c <_vfiprintf_r+0x25c>
 8005d7a:	7821      	ldrb	r1, [r4, #0]
 8005d7c:	2203      	movs	r2, #3
 8005d7e:	4650      	mov	r0, sl
 8005d80:	f7fa fa36 	bl	80001f0 <memchr>
 8005d84:	b140      	cbz	r0, 8005d98 <_vfiprintf_r+0x198>
 8005d86:	2340      	movs	r3, #64	; 0x40
 8005d88:	eba0 000a 	sub.w	r0, r0, sl
 8005d8c:	fa03 f000 	lsl.w	r0, r3, r0
 8005d90:	9b04      	ldr	r3, [sp, #16]
 8005d92:	4303      	orrs	r3, r0
 8005d94:	3401      	adds	r4, #1
 8005d96:	9304      	str	r3, [sp, #16]
 8005d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d9c:	482c      	ldr	r0, [pc, #176]	; (8005e50 <_vfiprintf_r+0x250>)
 8005d9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005da2:	2206      	movs	r2, #6
 8005da4:	f7fa fa24 	bl	80001f0 <memchr>
 8005da8:	2800      	cmp	r0, #0
 8005daa:	d03f      	beq.n	8005e2c <_vfiprintf_r+0x22c>
 8005dac:	4b29      	ldr	r3, [pc, #164]	; (8005e54 <_vfiprintf_r+0x254>)
 8005dae:	bb1b      	cbnz	r3, 8005df8 <_vfiprintf_r+0x1f8>
 8005db0:	9b03      	ldr	r3, [sp, #12]
 8005db2:	3307      	adds	r3, #7
 8005db4:	f023 0307 	bic.w	r3, r3, #7
 8005db8:	3308      	adds	r3, #8
 8005dba:	9303      	str	r3, [sp, #12]
 8005dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dbe:	443b      	add	r3, r7
 8005dc0:	9309      	str	r3, [sp, #36]	; 0x24
 8005dc2:	e767      	b.n	8005c94 <_vfiprintf_r+0x94>
 8005dc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005dc8:	460c      	mov	r4, r1
 8005dca:	2001      	movs	r0, #1
 8005dcc:	e7a5      	b.n	8005d1a <_vfiprintf_r+0x11a>
 8005dce:	2300      	movs	r3, #0
 8005dd0:	3401      	adds	r4, #1
 8005dd2:	9305      	str	r3, [sp, #20]
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	f04f 0c0a 	mov.w	ip, #10
 8005dda:	4620      	mov	r0, r4
 8005ddc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005de0:	3a30      	subs	r2, #48	; 0x30
 8005de2:	2a09      	cmp	r2, #9
 8005de4:	d903      	bls.n	8005dee <_vfiprintf_r+0x1ee>
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d0c5      	beq.n	8005d76 <_vfiprintf_r+0x176>
 8005dea:	9105      	str	r1, [sp, #20]
 8005dec:	e7c3      	b.n	8005d76 <_vfiprintf_r+0x176>
 8005dee:	fb0c 2101 	mla	r1, ip, r1, r2
 8005df2:	4604      	mov	r4, r0
 8005df4:	2301      	movs	r3, #1
 8005df6:	e7f0      	b.n	8005dda <_vfiprintf_r+0x1da>
 8005df8:	ab03      	add	r3, sp, #12
 8005dfa:	9300      	str	r3, [sp, #0]
 8005dfc:	462a      	mov	r2, r5
 8005dfe:	4b16      	ldr	r3, [pc, #88]	; (8005e58 <_vfiprintf_r+0x258>)
 8005e00:	a904      	add	r1, sp, #16
 8005e02:	4630      	mov	r0, r6
 8005e04:	f000 f8cc 	bl	8005fa0 <_printf_float>
 8005e08:	4607      	mov	r7, r0
 8005e0a:	1c78      	adds	r0, r7, #1
 8005e0c:	d1d6      	bne.n	8005dbc <_vfiprintf_r+0x1bc>
 8005e0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e10:	07d9      	lsls	r1, r3, #31
 8005e12:	d405      	bmi.n	8005e20 <_vfiprintf_r+0x220>
 8005e14:	89ab      	ldrh	r3, [r5, #12]
 8005e16:	059a      	lsls	r2, r3, #22
 8005e18:	d402      	bmi.n	8005e20 <_vfiprintf_r+0x220>
 8005e1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e1c:	f001 fda8 	bl	8007970 <__retarget_lock_release_recursive>
 8005e20:	89ab      	ldrh	r3, [r5, #12]
 8005e22:	065b      	lsls	r3, r3, #25
 8005e24:	f53f af12 	bmi.w	8005c4c <_vfiprintf_r+0x4c>
 8005e28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e2a:	e711      	b.n	8005c50 <_vfiprintf_r+0x50>
 8005e2c:	ab03      	add	r3, sp, #12
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	462a      	mov	r2, r5
 8005e32:	4b09      	ldr	r3, [pc, #36]	; (8005e58 <_vfiprintf_r+0x258>)
 8005e34:	a904      	add	r1, sp, #16
 8005e36:	4630      	mov	r0, r6
 8005e38:	f000 fb56 	bl	80064e8 <_printf_i>
 8005e3c:	e7e4      	b.n	8005e08 <_vfiprintf_r+0x208>
 8005e3e:	bf00      	nop
 8005e40:	08008c14 	.word	0x08008c14
 8005e44:	08008c34 	.word	0x08008c34
 8005e48:	08008bf4 	.word	0x08008bf4
 8005e4c:	08008b1c 	.word	0x08008b1c
 8005e50:	08008b26 	.word	0x08008b26
 8005e54:	08005fa1 	.word	0x08005fa1
 8005e58:	08005bdb 	.word	0x08005bdb
 8005e5c:	08008b22 	.word	0x08008b22

08005e60 <__cvt>:
 8005e60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e64:	ec55 4b10 	vmov	r4, r5, d0
 8005e68:	2d00      	cmp	r5, #0
 8005e6a:	460e      	mov	r6, r1
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	462b      	mov	r3, r5
 8005e70:	bfbb      	ittet	lt
 8005e72:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005e76:	461d      	movlt	r5, r3
 8005e78:	2300      	movge	r3, #0
 8005e7a:	232d      	movlt	r3, #45	; 0x2d
 8005e7c:	700b      	strb	r3, [r1, #0]
 8005e7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e80:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005e84:	4691      	mov	r9, r2
 8005e86:	f023 0820 	bic.w	r8, r3, #32
 8005e8a:	bfbc      	itt	lt
 8005e8c:	4622      	movlt	r2, r4
 8005e8e:	4614      	movlt	r4, r2
 8005e90:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e94:	d005      	beq.n	8005ea2 <__cvt+0x42>
 8005e96:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005e9a:	d100      	bne.n	8005e9e <__cvt+0x3e>
 8005e9c:	3601      	adds	r6, #1
 8005e9e:	2102      	movs	r1, #2
 8005ea0:	e000      	b.n	8005ea4 <__cvt+0x44>
 8005ea2:	2103      	movs	r1, #3
 8005ea4:	ab03      	add	r3, sp, #12
 8005ea6:	9301      	str	r3, [sp, #4]
 8005ea8:	ab02      	add	r3, sp, #8
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	ec45 4b10 	vmov	d0, r4, r5
 8005eb0:	4653      	mov	r3, sl
 8005eb2:	4632      	mov	r2, r6
 8005eb4:	f000 fdb0 	bl	8006a18 <_dtoa_r>
 8005eb8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005ebc:	4607      	mov	r7, r0
 8005ebe:	d102      	bne.n	8005ec6 <__cvt+0x66>
 8005ec0:	f019 0f01 	tst.w	r9, #1
 8005ec4:	d022      	beq.n	8005f0c <__cvt+0xac>
 8005ec6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005eca:	eb07 0906 	add.w	r9, r7, r6
 8005ece:	d110      	bne.n	8005ef2 <__cvt+0x92>
 8005ed0:	783b      	ldrb	r3, [r7, #0]
 8005ed2:	2b30      	cmp	r3, #48	; 0x30
 8005ed4:	d10a      	bne.n	8005eec <__cvt+0x8c>
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	2300      	movs	r3, #0
 8005eda:	4620      	mov	r0, r4
 8005edc:	4629      	mov	r1, r5
 8005ede:	f7fa fdfb 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ee2:	b918      	cbnz	r0, 8005eec <__cvt+0x8c>
 8005ee4:	f1c6 0601 	rsb	r6, r6, #1
 8005ee8:	f8ca 6000 	str.w	r6, [sl]
 8005eec:	f8da 3000 	ldr.w	r3, [sl]
 8005ef0:	4499      	add	r9, r3
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	4620      	mov	r0, r4
 8005ef8:	4629      	mov	r1, r5
 8005efa:	f7fa fded 	bl	8000ad8 <__aeabi_dcmpeq>
 8005efe:	b108      	cbz	r0, 8005f04 <__cvt+0xa4>
 8005f00:	f8cd 900c 	str.w	r9, [sp, #12]
 8005f04:	2230      	movs	r2, #48	; 0x30
 8005f06:	9b03      	ldr	r3, [sp, #12]
 8005f08:	454b      	cmp	r3, r9
 8005f0a:	d307      	bcc.n	8005f1c <__cvt+0xbc>
 8005f0c:	9b03      	ldr	r3, [sp, #12]
 8005f0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f10:	1bdb      	subs	r3, r3, r7
 8005f12:	4638      	mov	r0, r7
 8005f14:	6013      	str	r3, [r2, #0]
 8005f16:	b004      	add	sp, #16
 8005f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f1c:	1c59      	adds	r1, r3, #1
 8005f1e:	9103      	str	r1, [sp, #12]
 8005f20:	701a      	strb	r2, [r3, #0]
 8005f22:	e7f0      	b.n	8005f06 <__cvt+0xa6>

08005f24 <__exponent>:
 8005f24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f26:	4603      	mov	r3, r0
 8005f28:	2900      	cmp	r1, #0
 8005f2a:	bfb8      	it	lt
 8005f2c:	4249      	neglt	r1, r1
 8005f2e:	f803 2b02 	strb.w	r2, [r3], #2
 8005f32:	bfb4      	ite	lt
 8005f34:	222d      	movlt	r2, #45	; 0x2d
 8005f36:	222b      	movge	r2, #43	; 0x2b
 8005f38:	2909      	cmp	r1, #9
 8005f3a:	7042      	strb	r2, [r0, #1]
 8005f3c:	dd2a      	ble.n	8005f94 <__exponent+0x70>
 8005f3e:	f10d 0407 	add.w	r4, sp, #7
 8005f42:	46a4      	mov	ip, r4
 8005f44:	270a      	movs	r7, #10
 8005f46:	46a6      	mov	lr, r4
 8005f48:	460a      	mov	r2, r1
 8005f4a:	fb91 f6f7 	sdiv	r6, r1, r7
 8005f4e:	fb07 1516 	mls	r5, r7, r6, r1
 8005f52:	3530      	adds	r5, #48	; 0x30
 8005f54:	2a63      	cmp	r2, #99	; 0x63
 8005f56:	f104 34ff 	add.w	r4, r4, #4294967295
 8005f5a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005f5e:	4631      	mov	r1, r6
 8005f60:	dcf1      	bgt.n	8005f46 <__exponent+0x22>
 8005f62:	3130      	adds	r1, #48	; 0x30
 8005f64:	f1ae 0502 	sub.w	r5, lr, #2
 8005f68:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005f6c:	1c44      	adds	r4, r0, #1
 8005f6e:	4629      	mov	r1, r5
 8005f70:	4561      	cmp	r1, ip
 8005f72:	d30a      	bcc.n	8005f8a <__exponent+0x66>
 8005f74:	f10d 0209 	add.w	r2, sp, #9
 8005f78:	eba2 020e 	sub.w	r2, r2, lr
 8005f7c:	4565      	cmp	r5, ip
 8005f7e:	bf88      	it	hi
 8005f80:	2200      	movhi	r2, #0
 8005f82:	4413      	add	r3, r2
 8005f84:	1a18      	subs	r0, r3, r0
 8005f86:	b003      	add	sp, #12
 8005f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f8e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005f92:	e7ed      	b.n	8005f70 <__exponent+0x4c>
 8005f94:	2330      	movs	r3, #48	; 0x30
 8005f96:	3130      	adds	r1, #48	; 0x30
 8005f98:	7083      	strb	r3, [r0, #2]
 8005f9a:	70c1      	strb	r1, [r0, #3]
 8005f9c:	1d03      	adds	r3, r0, #4
 8005f9e:	e7f1      	b.n	8005f84 <__exponent+0x60>

08005fa0 <_printf_float>:
 8005fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fa4:	ed2d 8b02 	vpush	{d8}
 8005fa8:	b08d      	sub	sp, #52	; 0x34
 8005faa:	460c      	mov	r4, r1
 8005fac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005fb0:	4616      	mov	r6, r2
 8005fb2:	461f      	mov	r7, r3
 8005fb4:	4605      	mov	r5, r0
 8005fb6:	f001 fcd5 	bl	8007964 <_localeconv_r>
 8005fba:	f8d0 a000 	ldr.w	sl, [r0]
 8005fbe:	4650      	mov	r0, sl
 8005fc0:	f7fa f90e 	bl	80001e0 <strlen>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	930a      	str	r3, [sp, #40]	; 0x28
 8005fc8:	6823      	ldr	r3, [r4, #0]
 8005fca:	9305      	str	r3, [sp, #20]
 8005fcc:	f8d8 3000 	ldr.w	r3, [r8]
 8005fd0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005fd4:	3307      	adds	r3, #7
 8005fd6:	f023 0307 	bic.w	r3, r3, #7
 8005fda:	f103 0208 	add.w	r2, r3, #8
 8005fde:	f8c8 2000 	str.w	r2, [r8]
 8005fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005fea:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005fee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005ff2:	9307      	str	r3, [sp, #28]
 8005ff4:	f8cd 8018 	str.w	r8, [sp, #24]
 8005ff8:	ee08 0a10 	vmov	s16, r0
 8005ffc:	4b9f      	ldr	r3, [pc, #636]	; (800627c <_printf_float+0x2dc>)
 8005ffe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006002:	f04f 32ff 	mov.w	r2, #4294967295
 8006006:	f7fa fd99 	bl	8000b3c <__aeabi_dcmpun>
 800600a:	bb88      	cbnz	r0, 8006070 <_printf_float+0xd0>
 800600c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006010:	4b9a      	ldr	r3, [pc, #616]	; (800627c <_printf_float+0x2dc>)
 8006012:	f04f 32ff 	mov.w	r2, #4294967295
 8006016:	f7fa fd73 	bl	8000b00 <__aeabi_dcmple>
 800601a:	bb48      	cbnz	r0, 8006070 <_printf_float+0xd0>
 800601c:	2200      	movs	r2, #0
 800601e:	2300      	movs	r3, #0
 8006020:	4640      	mov	r0, r8
 8006022:	4649      	mov	r1, r9
 8006024:	f7fa fd62 	bl	8000aec <__aeabi_dcmplt>
 8006028:	b110      	cbz	r0, 8006030 <_printf_float+0x90>
 800602a:	232d      	movs	r3, #45	; 0x2d
 800602c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006030:	4b93      	ldr	r3, [pc, #588]	; (8006280 <_printf_float+0x2e0>)
 8006032:	4894      	ldr	r0, [pc, #592]	; (8006284 <_printf_float+0x2e4>)
 8006034:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006038:	bf94      	ite	ls
 800603a:	4698      	movls	r8, r3
 800603c:	4680      	movhi	r8, r0
 800603e:	2303      	movs	r3, #3
 8006040:	6123      	str	r3, [r4, #16]
 8006042:	9b05      	ldr	r3, [sp, #20]
 8006044:	f023 0204 	bic.w	r2, r3, #4
 8006048:	6022      	str	r2, [r4, #0]
 800604a:	f04f 0900 	mov.w	r9, #0
 800604e:	9700      	str	r7, [sp, #0]
 8006050:	4633      	mov	r3, r6
 8006052:	aa0b      	add	r2, sp, #44	; 0x2c
 8006054:	4621      	mov	r1, r4
 8006056:	4628      	mov	r0, r5
 8006058:	f000 f9d8 	bl	800640c <_printf_common>
 800605c:	3001      	adds	r0, #1
 800605e:	f040 8090 	bne.w	8006182 <_printf_float+0x1e2>
 8006062:	f04f 30ff 	mov.w	r0, #4294967295
 8006066:	b00d      	add	sp, #52	; 0x34
 8006068:	ecbd 8b02 	vpop	{d8}
 800606c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006070:	4642      	mov	r2, r8
 8006072:	464b      	mov	r3, r9
 8006074:	4640      	mov	r0, r8
 8006076:	4649      	mov	r1, r9
 8006078:	f7fa fd60 	bl	8000b3c <__aeabi_dcmpun>
 800607c:	b140      	cbz	r0, 8006090 <_printf_float+0xf0>
 800607e:	464b      	mov	r3, r9
 8006080:	2b00      	cmp	r3, #0
 8006082:	bfbc      	itt	lt
 8006084:	232d      	movlt	r3, #45	; 0x2d
 8006086:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800608a:	487f      	ldr	r0, [pc, #508]	; (8006288 <_printf_float+0x2e8>)
 800608c:	4b7f      	ldr	r3, [pc, #508]	; (800628c <_printf_float+0x2ec>)
 800608e:	e7d1      	b.n	8006034 <_printf_float+0x94>
 8006090:	6863      	ldr	r3, [r4, #4]
 8006092:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006096:	9206      	str	r2, [sp, #24]
 8006098:	1c5a      	adds	r2, r3, #1
 800609a:	d13f      	bne.n	800611c <_printf_float+0x17c>
 800609c:	2306      	movs	r3, #6
 800609e:	6063      	str	r3, [r4, #4]
 80060a0:	9b05      	ldr	r3, [sp, #20]
 80060a2:	6861      	ldr	r1, [r4, #4]
 80060a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80060a8:	2300      	movs	r3, #0
 80060aa:	9303      	str	r3, [sp, #12]
 80060ac:	ab0a      	add	r3, sp, #40	; 0x28
 80060ae:	e9cd b301 	strd	fp, r3, [sp, #4]
 80060b2:	ab09      	add	r3, sp, #36	; 0x24
 80060b4:	ec49 8b10 	vmov	d0, r8, r9
 80060b8:	9300      	str	r3, [sp, #0]
 80060ba:	6022      	str	r2, [r4, #0]
 80060bc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80060c0:	4628      	mov	r0, r5
 80060c2:	f7ff fecd 	bl	8005e60 <__cvt>
 80060c6:	9b06      	ldr	r3, [sp, #24]
 80060c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060ca:	2b47      	cmp	r3, #71	; 0x47
 80060cc:	4680      	mov	r8, r0
 80060ce:	d108      	bne.n	80060e2 <_printf_float+0x142>
 80060d0:	1cc8      	adds	r0, r1, #3
 80060d2:	db02      	blt.n	80060da <_printf_float+0x13a>
 80060d4:	6863      	ldr	r3, [r4, #4]
 80060d6:	4299      	cmp	r1, r3
 80060d8:	dd41      	ble.n	800615e <_printf_float+0x1be>
 80060da:	f1ab 0b02 	sub.w	fp, fp, #2
 80060de:	fa5f fb8b 	uxtb.w	fp, fp
 80060e2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80060e6:	d820      	bhi.n	800612a <_printf_float+0x18a>
 80060e8:	3901      	subs	r1, #1
 80060ea:	465a      	mov	r2, fp
 80060ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80060f0:	9109      	str	r1, [sp, #36]	; 0x24
 80060f2:	f7ff ff17 	bl	8005f24 <__exponent>
 80060f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060f8:	1813      	adds	r3, r2, r0
 80060fa:	2a01      	cmp	r2, #1
 80060fc:	4681      	mov	r9, r0
 80060fe:	6123      	str	r3, [r4, #16]
 8006100:	dc02      	bgt.n	8006108 <_printf_float+0x168>
 8006102:	6822      	ldr	r2, [r4, #0]
 8006104:	07d2      	lsls	r2, r2, #31
 8006106:	d501      	bpl.n	800610c <_printf_float+0x16c>
 8006108:	3301      	adds	r3, #1
 800610a:	6123      	str	r3, [r4, #16]
 800610c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006110:	2b00      	cmp	r3, #0
 8006112:	d09c      	beq.n	800604e <_printf_float+0xae>
 8006114:	232d      	movs	r3, #45	; 0x2d
 8006116:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800611a:	e798      	b.n	800604e <_printf_float+0xae>
 800611c:	9a06      	ldr	r2, [sp, #24]
 800611e:	2a47      	cmp	r2, #71	; 0x47
 8006120:	d1be      	bne.n	80060a0 <_printf_float+0x100>
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1bc      	bne.n	80060a0 <_printf_float+0x100>
 8006126:	2301      	movs	r3, #1
 8006128:	e7b9      	b.n	800609e <_printf_float+0xfe>
 800612a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800612e:	d118      	bne.n	8006162 <_printf_float+0x1c2>
 8006130:	2900      	cmp	r1, #0
 8006132:	6863      	ldr	r3, [r4, #4]
 8006134:	dd0b      	ble.n	800614e <_printf_float+0x1ae>
 8006136:	6121      	str	r1, [r4, #16]
 8006138:	b913      	cbnz	r3, 8006140 <_printf_float+0x1a0>
 800613a:	6822      	ldr	r2, [r4, #0]
 800613c:	07d0      	lsls	r0, r2, #31
 800613e:	d502      	bpl.n	8006146 <_printf_float+0x1a6>
 8006140:	3301      	adds	r3, #1
 8006142:	440b      	add	r3, r1
 8006144:	6123      	str	r3, [r4, #16]
 8006146:	65a1      	str	r1, [r4, #88]	; 0x58
 8006148:	f04f 0900 	mov.w	r9, #0
 800614c:	e7de      	b.n	800610c <_printf_float+0x16c>
 800614e:	b913      	cbnz	r3, 8006156 <_printf_float+0x1b6>
 8006150:	6822      	ldr	r2, [r4, #0]
 8006152:	07d2      	lsls	r2, r2, #31
 8006154:	d501      	bpl.n	800615a <_printf_float+0x1ba>
 8006156:	3302      	adds	r3, #2
 8006158:	e7f4      	b.n	8006144 <_printf_float+0x1a4>
 800615a:	2301      	movs	r3, #1
 800615c:	e7f2      	b.n	8006144 <_printf_float+0x1a4>
 800615e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006162:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006164:	4299      	cmp	r1, r3
 8006166:	db05      	blt.n	8006174 <_printf_float+0x1d4>
 8006168:	6823      	ldr	r3, [r4, #0]
 800616a:	6121      	str	r1, [r4, #16]
 800616c:	07d8      	lsls	r0, r3, #31
 800616e:	d5ea      	bpl.n	8006146 <_printf_float+0x1a6>
 8006170:	1c4b      	adds	r3, r1, #1
 8006172:	e7e7      	b.n	8006144 <_printf_float+0x1a4>
 8006174:	2900      	cmp	r1, #0
 8006176:	bfd4      	ite	le
 8006178:	f1c1 0202 	rsble	r2, r1, #2
 800617c:	2201      	movgt	r2, #1
 800617e:	4413      	add	r3, r2
 8006180:	e7e0      	b.n	8006144 <_printf_float+0x1a4>
 8006182:	6823      	ldr	r3, [r4, #0]
 8006184:	055a      	lsls	r2, r3, #21
 8006186:	d407      	bmi.n	8006198 <_printf_float+0x1f8>
 8006188:	6923      	ldr	r3, [r4, #16]
 800618a:	4642      	mov	r2, r8
 800618c:	4631      	mov	r1, r6
 800618e:	4628      	mov	r0, r5
 8006190:	47b8      	blx	r7
 8006192:	3001      	adds	r0, #1
 8006194:	d12c      	bne.n	80061f0 <_printf_float+0x250>
 8006196:	e764      	b.n	8006062 <_printf_float+0xc2>
 8006198:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800619c:	f240 80e0 	bls.w	8006360 <_printf_float+0x3c0>
 80061a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80061a4:	2200      	movs	r2, #0
 80061a6:	2300      	movs	r3, #0
 80061a8:	f7fa fc96 	bl	8000ad8 <__aeabi_dcmpeq>
 80061ac:	2800      	cmp	r0, #0
 80061ae:	d034      	beq.n	800621a <_printf_float+0x27a>
 80061b0:	4a37      	ldr	r2, [pc, #220]	; (8006290 <_printf_float+0x2f0>)
 80061b2:	2301      	movs	r3, #1
 80061b4:	4631      	mov	r1, r6
 80061b6:	4628      	mov	r0, r5
 80061b8:	47b8      	blx	r7
 80061ba:	3001      	adds	r0, #1
 80061bc:	f43f af51 	beq.w	8006062 <_printf_float+0xc2>
 80061c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061c4:	429a      	cmp	r2, r3
 80061c6:	db02      	blt.n	80061ce <_printf_float+0x22e>
 80061c8:	6823      	ldr	r3, [r4, #0]
 80061ca:	07d8      	lsls	r0, r3, #31
 80061cc:	d510      	bpl.n	80061f0 <_printf_float+0x250>
 80061ce:	ee18 3a10 	vmov	r3, s16
 80061d2:	4652      	mov	r2, sl
 80061d4:	4631      	mov	r1, r6
 80061d6:	4628      	mov	r0, r5
 80061d8:	47b8      	blx	r7
 80061da:	3001      	adds	r0, #1
 80061dc:	f43f af41 	beq.w	8006062 <_printf_float+0xc2>
 80061e0:	f04f 0800 	mov.w	r8, #0
 80061e4:	f104 091a 	add.w	r9, r4, #26
 80061e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061ea:	3b01      	subs	r3, #1
 80061ec:	4543      	cmp	r3, r8
 80061ee:	dc09      	bgt.n	8006204 <_printf_float+0x264>
 80061f0:	6823      	ldr	r3, [r4, #0]
 80061f2:	079b      	lsls	r3, r3, #30
 80061f4:	f100 8105 	bmi.w	8006402 <_printf_float+0x462>
 80061f8:	68e0      	ldr	r0, [r4, #12]
 80061fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061fc:	4298      	cmp	r0, r3
 80061fe:	bfb8      	it	lt
 8006200:	4618      	movlt	r0, r3
 8006202:	e730      	b.n	8006066 <_printf_float+0xc6>
 8006204:	2301      	movs	r3, #1
 8006206:	464a      	mov	r2, r9
 8006208:	4631      	mov	r1, r6
 800620a:	4628      	mov	r0, r5
 800620c:	47b8      	blx	r7
 800620e:	3001      	adds	r0, #1
 8006210:	f43f af27 	beq.w	8006062 <_printf_float+0xc2>
 8006214:	f108 0801 	add.w	r8, r8, #1
 8006218:	e7e6      	b.n	80061e8 <_printf_float+0x248>
 800621a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800621c:	2b00      	cmp	r3, #0
 800621e:	dc39      	bgt.n	8006294 <_printf_float+0x2f4>
 8006220:	4a1b      	ldr	r2, [pc, #108]	; (8006290 <_printf_float+0x2f0>)
 8006222:	2301      	movs	r3, #1
 8006224:	4631      	mov	r1, r6
 8006226:	4628      	mov	r0, r5
 8006228:	47b8      	blx	r7
 800622a:	3001      	adds	r0, #1
 800622c:	f43f af19 	beq.w	8006062 <_printf_float+0xc2>
 8006230:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006234:	4313      	orrs	r3, r2
 8006236:	d102      	bne.n	800623e <_printf_float+0x29e>
 8006238:	6823      	ldr	r3, [r4, #0]
 800623a:	07d9      	lsls	r1, r3, #31
 800623c:	d5d8      	bpl.n	80061f0 <_printf_float+0x250>
 800623e:	ee18 3a10 	vmov	r3, s16
 8006242:	4652      	mov	r2, sl
 8006244:	4631      	mov	r1, r6
 8006246:	4628      	mov	r0, r5
 8006248:	47b8      	blx	r7
 800624a:	3001      	adds	r0, #1
 800624c:	f43f af09 	beq.w	8006062 <_printf_float+0xc2>
 8006250:	f04f 0900 	mov.w	r9, #0
 8006254:	f104 0a1a 	add.w	sl, r4, #26
 8006258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800625a:	425b      	negs	r3, r3
 800625c:	454b      	cmp	r3, r9
 800625e:	dc01      	bgt.n	8006264 <_printf_float+0x2c4>
 8006260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006262:	e792      	b.n	800618a <_printf_float+0x1ea>
 8006264:	2301      	movs	r3, #1
 8006266:	4652      	mov	r2, sl
 8006268:	4631      	mov	r1, r6
 800626a:	4628      	mov	r0, r5
 800626c:	47b8      	blx	r7
 800626e:	3001      	adds	r0, #1
 8006270:	f43f aef7 	beq.w	8006062 <_printf_float+0xc2>
 8006274:	f109 0901 	add.w	r9, r9, #1
 8006278:	e7ee      	b.n	8006258 <_printf_float+0x2b8>
 800627a:	bf00      	nop
 800627c:	7fefffff 	.word	0x7fefffff
 8006280:	08008b2d 	.word	0x08008b2d
 8006284:	08008b31 	.word	0x08008b31
 8006288:	08008b39 	.word	0x08008b39
 800628c:	08008b35 	.word	0x08008b35
 8006290:	08008b3d 	.word	0x08008b3d
 8006294:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006296:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006298:	429a      	cmp	r2, r3
 800629a:	bfa8      	it	ge
 800629c:	461a      	movge	r2, r3
 800629e:	2a00      	cmp	r2, #0
 80062a0:	4691      	mov	r9, r2
 80062a2:	dc37      	bgt.n	8006314 <_printf_float+0x374>
 80062a4:	f04f 0b00 	mov.w	fp, #0
 80062a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80062ac:	f104 021a 	add.w	r2, r4, #26
 80062b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80062b2:	9305      	str	r3, [sp, #20]
 80062b4:	eba3 0309 	sub.w	r3, r3, r9
 80062b8:	455b      	cmp	r3, fp
 80062ba:	dc33      	bgt.n	8006324 <_printf_float+0x384>
 80062bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062c0:	429a      	cmp	r2, r3
 80062c2:	db3b      	blt.n	800633c <_printf_float+0x39c>
 80062c4:	6823      	ldr	r3, [r4, #0]
 80062c6:	07da      	lsls	r2, r3, #31
 80062c8:	d438      	bmi.n	800633c <_printf_float+0x39c>
 80062ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062cc:	9a05      	ldr	r2, [sp, #20]
 80062ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80062d0:	1a9a      	subs	r2, r3, r2
 80062d2:	eba3 0901 	sub.w	r9, r3, r1
 80062d6:	4591      	cmp	r9, r2
 80062d8:	bfa8      	it	ge
 80062da:	4691      	movge	r9, r2
 80062dc:	f1b9 0f00 	cmp.w	r9, #0
 80062e0:	dc35      	bgt.n	800634e <_printf_float+0x3ae>
 80062e2:	f04f 0800 	mov.w	r8, #0
 80062e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80062ea:	f104 0a1a 	add.w	sl, r4, #26
 80062ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062f2:	1a9b      	subs	r3, r3, r2
 80062f4:	eba3 0309 	sub.w	r3, r3, r9
 80062f8:	4543      	cmp	r3, r8
 80062fa:	f77f af79 	ble.w	80061f0 <_printf_float+0x250>
 80062fe:	2301      	movs	r3, #1
 8006300:	4652      	mov	r2, sl
 8006302:	4631      	mov	r1, r6
 8006304:	4628      	mov	r0, r5
 8006306:	47b8      	blx	r7
 8006308:	3001      	adds	r0, #1
 800630a:	f43f aeaa 	beq.w	8006062 <_printf_float+0xc2>
 800630e:	f108 0801 	add.w	r8, r8, #1
 8006312:	e7ec      	b.n	80062ee <_printf_float+0x34e>
 8006314:	4613      	mov	r3, r2
 8006316:	4631      	mov	r1, r6
 8006318:	4642      	mov	r2, r8
 800631a:	4628      	mov	r0, r5
 800631c:	47b8      	blx	r7
 800631e:	3001      	adds	r0, #1
 8006320:	d1c0      	bne.n	80062a4 <_printf_float+0x304>
 8006322:	e69e      	b.n	8006062 <_printf_float+0xc2>
 8006324:	2301      	movs	r3, #1
 8006326:	4631      	mov	r1, r6
 8006328:	4628      	mov	r0, r5
 800632a:	9205      	str	r2, [sp, #20]
 800632c:	47b8      	blx	r7
 800632e:	3001      	adds	r0, #1
 8006330:	f43f ae97 	beq.w	8006062 <_printf_float+0xc2>
 8006334:	9a05      	ldr	r2, [sp, #20]
 8006336:	f10b 0b01 	add.w	fp, fp, #1
 800633a:	e7b9      	b.n	80062b0 <_printf_float+0x310>
 800633c:	ee18 3a10 	vmov	r3, s16
 8006340:	4652      	mov	r2, sl
 8006342:	4631      	mov	r1, r6
 8006344:	4628      	mov	r0, r5
 8006346:	47b8      	blx	r7
 8006348:	3001      	adds	r0, #1
 800634a:	d1be      	bne.n	80062ca <_printf_float+0x32a>
 800634c:	e689      	b.n	8006062 <_printf_float+0xc2>
 800634e:	9a05      	ldr	r2, [sp, #20]
 8006350:	464b      	mov	r3, r9
 8006352:	4442      	add	r2, r8
 8006354:	4631      	mov	r1, r6
 8006356:	4628      	mov	r0, r5
 8006358:	47b8      	blx	r7
 800635a:	3001      	adds	r0, #1
 800635c:	d1c1      	bne.n	80062e2 <_printf_float+0x342>
 800635e:	e680      	b.n	8006062 <_printf_float+0xc2>
 8006360:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006362:	2a01      	cmp	r2, #1
 8006364:	dc01      	bgt.n	800636a <_printf_float+0x3ca>
 8006366:	07db      	lsls	r3, r3, #31
 8006368:	d538      	bpl.n	80063dc <_printf_float+0x43c>
 800636a:	2301      	movs	r3, #1
 800636c:	4642      	mov	r2, r8
 800636e:	4631      	mov	r1, r6
 8006370:	4628      	mov	r0, r5
 8006372:	47b8      	blx	r7
 8006374:	3001      	adds	r0, #1
 8006376:	f43f ae74 	beq.w	8006062 <_printf_float+0xc2>
 800637a:	ee18 3a10 	vmov	r3, s16
 800637e:	4652      	mov	r2, sl
 8006380:	4631      	mov	r1, r6
 8006382:	4628      	mov	r0, r5
 8006384:	47b8      	blx	r7
 8006386:	3001      	adds	r0, #1
 8006388:	f43f ae6b 	beq.w	8006062 <_printf_float+0xc2>
 800638c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006390:	2200      	movs	r2, #0
 8006392:	2300      	movs	r3, #0
 8006394:	f7fa fba0 	bl	8000ad8 <__aeabi_dcmpeq>
 8006398:	b9d8      	cbnz	r0, 80063d2 <_printf_float+0x432>
 800639a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800639c:	f108 0201 	add.w	r2, r8, #1
 80063a0:	3b01      	subs	r3, #1
 80063a2:	4631      	mov	r1, r6
 80063a4:	4628      	mov	r0, r5
 80063a6:	47b8      	blx	r7
 80063a8:	3001      	adds	r0, #1
 80063aa:	d10e      	bne.n	80063ca <_printf_float+0x42a>
 80063ac:	e659      	b.n	8006062 <_printf_float+0xc2>
 80063ae:	2301      	movs	r3, #1
 80063b0:	4652      	mov	r2, sl
 80063b2:	4631      	mov	r1, r6
 80063b4:	4628      	mov	r0, r5
 80063b6:	47b8      	blx	r7
 80063b8:	3001      	adds	r0, #1
 80063ba:	f43f ae52 	beq.w	8006062 <_printf_float+0xc2>
 80063be:	f108 0801 	add.w	r8, r8, #1
 80063c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063c4:	3b01      	subs	r3, #1
 80063c6:	4543      	cmp	r3, r8
 80063c8:	dcf1      	bgt.n	80063ae <_printf_float+0x40e>
 80063ca:	464b      	mov	r3, r9
 80063cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80063d0:	e6dc      	b.n	800618c <_printf_float+0x1ec>
 80063d2:	f04f 0800 	mov.w	r8, #0
 80063d6:	f104 0a1a 	add.w	sl, r4, #26
 80063da:	e7f2      	b.n	80063c2 <_printf_float+0x422>
 80063dc:	2301      	movs	r3, #1
 80063de:	4642      	mov	r2, r8
 80063e0:	e7df      	b.n	80063a2 <_printf_float+0x402>
 80063e2:	2301      	movs	r3, #1
 80063e4:	464a      	mov	r2, r9
 80063e6:	4631      	mov	r1, r6
 80063e8:	4628      	mov	r0, r5
 80063ea:	47b8      	blx	r7
 80063ec:	3001      	adds	r0, #1
 80063ee:	f43f ae38 	beq.w	8006062 <_printf_float+0xc2>
 80063f2:	f108 0801 	add.w	r8, r8, #1
 80063f6:	68e3      	ldr	r3, [r4, #12]
 80063f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80063fa:	1a5b      	subs	r3, r3, r1
 80063fc:	4543      	cmp	r3, r8
 80063fe:	dcf0      	bgt.n	80063e2 <_printf_float+0x442>
 8006400:	e6fa      	b.n	80061f8 <_printf_float+0x258>
 8006402:	f04f 0800 	mov.w	r8, #0
 8006406:	f104 0919 	add.w	r9, r4, #25
 800640a:	e7f4      	b.n	80063f6 <_printf_float+0x456>

0800640c <_printf_common>:
 800640c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006410:	4616      	mov	r6, r2
 8006412:	4699      	mov	r9, r3
 8006414:	688a      	ldr	r2, [r1, #8]
 8006416:	690b      	ldr	r3, [r1, #16]
 8006418:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800641c:	4293      	cmp	r3, r2
 800641e:	bfb8      	it	lt
 8006420:	4613      	movlt	r3, r2
 8006422:	6033      	str	r3, [r6, #0]
 8006424:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006428:	4607      	mov	r7, r0
 800642a:	460c      	mov	r4, r1
 800642c:	b10a      	cbz	r2, 8006432 <_printf_common+0x26>
 800642e:	3301      	adds	r3, #1
 8006430:	6033      	str	r3, [r6, #0]
 8006432:	6823      	ldr	r3, [r4, #0]
 8006434:	0699      	lsls	r1, r3, #26
 8006436:	bf42      	ittt	mi
 8006438:	6833      	ldrmi	r3, [r6, #0]
 800643a:	3302      	addmi	r3, #2
 800643c:	6033      	strmi	r3, [r6, #0]
 800643e:	6825      	ldr	r5, [r4, #0]
 8006440:	f015 0506 	ands.w	r5, r5, #6
 8006444:	d106      	bne.n	8006454 <_printf_common+0x48>
 8006446:	f104 0a19 	add.w	sl, r4, #25
 800644a:	68e3      	ldr	r3, [r4, #12]
 800644c:	6832      	ldr	r2, [r6, #0]
 800644e:	1a9b      	subs	r3, r3, r2
 8006450:	42ab      	cmp	r3, r5
 8006452:	dc26      	bgt.n	80064a2 <_printf_common+0x96>
 8006454:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006458:	1e13      	subs	r3, r2, #0
 800645a:	6822      	ldr	r2, [r4, #0]
 800645c:	bf18      	it	ne
 800645e:	2301      	movne	r3, #1
 8006460:	0692      	lsls	r2, r2, #26
 8006462:	d42b      	bmi.n	80064bc <_printf_common+0xb0>
 8006464:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006468:	4649      	mov	r1, r9
 800646a:	4638      	mov	r0, r7
 800646c:	47c0      	blx	r8
 800646e:	3001      	adds	r0, #1
 8006470:	d01e      	beq.n	80064b0 <_printf_common+0xa4>
 8006472:	6823      	ldr	r3, [r4, #0]
 8006474:	68e5      	ldr	r5, [r4, #12]
 8006476:	6832      	ldr	r2, [r6, #0]
 8006478:	f003 0306 	and.w	r3, r3, #6
 800647c:	2b04      	cmp	r3, #4
 800647e:	bf08      	it	eq
 8006480:	1aad      	subeq	r5, r5, r2
 8006482:	68a3      	ldr	r3, [r4, #8]
 8006484:	6922      	ldr	r2, [r4, #16]
 8006486:	bf0c      	ite	eq
 8006488:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800648c:	2500      	movne	r5, #0
 800648e:	4293      	cmp	r3, r2
 8006490:	bfc4      	itt	gt
 8006492:	1a9b      	subgt	r3, r3, r2
 8006494:	18ed      	addgt	r5, r5, r3
 8006496:	2600      	movs	r6, #0
 8006498:	341a      	adds	r4, #26
 800649a:	42b5      	cmp	r5, r6
 800649c:	d11a      	bne.n	80064d4 <_printf_common+0xc8>
 800649e:	2000      	movs	r0, #0
 80064a0:	e008      	b.n	80064b4 <_printf_common+0xa8>
 80064a2:	2301      	movs	r3, #1
 80064a4:	4652      	mov	r2, sl
 80064a6:	4649      	mov	r1, r9
 80064a8:	4638      	mov	r0, r7
 80064aa:	47c0      	blx	r8
 80064ac:	3001      	adds	r0, #1
 80064ae:	d103      	bne.n	80064b8 <_printf_common+0xac>
 80064b0:	f04f 30ff 	mov.w	r0, #4294967295
 80064b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064b8:	3501      	adds	r5, #1
 80064ba:	e7c6      	b.n	800644a <_printf_common+0x3e>
 80064bc:	18e1      	adds	r1, r4, r3
 80064be:	1c5a      	adds	r2, r3, #1
 80064c0:	2030      	movs	r0, #48	; 0x30
 80064c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064c6:	4422      	add	r2, r4
 80064c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064d0:	3302      	adds	r3, #2
 80064d2:	e7c7      	b.n	8006464 <_printf_common+0x58>
 80064d4:	2301      	movs	r3, #1
 80064d6:	4622      	mov	r2, r4
 80064d8:	4649      	mov	r1, r9
 80064da:	4638      	mov	r0, r7
 80064dc:	47c0      	blx	r8
 80064de:	3001      	adds	r0, #1
 80064e0:	d0e6      	beq.n	80064b0 <_printf_common+0xa4>
 80064e2:	3601      	adds	r6, #1
 80064e4:	e7d9      	b.n	800649a <_printf_common+0x8e>
	...

080064e8 <_printf_i>:
 80064e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064ec:	7e0f      	ldrb	r7, [r1, #24]
 80064ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064f0:	2f78      	cmp	r7, #120	; 0x78
 80064f2:	4691      	mov	r9, r2
 80064f4:	4680      	mov	r8, r0
 80064f6:	460c      	mov	r4, r1
 80064f8:	469a      	mov	sl, r3
 80064fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80064fe:	d807      	bhi.n	8006510 <_printf_i+0x28>
 8006500:	2f62      	cmp	r7, #98	; 0x62
 8006502:	d80a      	bhi.n	800651a <_printf_i+0x32>
 8006504:	2f00      	cmp	r7, #0
 8006506:	f000 80d8 	beq.w	80066ba <_printf_i+0x1d2>
 800650a:	2f58      	cmp	r7, #88	; 0x58
 800650c:	f000 80a3 	beq.w	8006656 <_printf_i+0x16e>
 8006510:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006514:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006518:	e03a      	b.n	8006590 <_printf_i+0xa8>
 800651a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800651e:	2b15      	cmp	r3, #21
 8006520:	d8f6      	bhi.n	8006510 <_printf_i+0x28>
 8006522:	a101      	add	r1, pc, #4	; (adr r1, 8006528 <_printf_i+0x40>)
 8006524:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006528:	08006581 	.word	0x08006581
 800652c:	08006595 	.word	0x08006595
 8006530:	08006511 	.word	0x08006511
 8006534:	08006511 	.word	0x08006511
 8006538:	08006511 	.word	0x08006511
 800653c:	08006511 	.word	0x08006511
 8006540:	08006595 	.word	0x08006595
 8006544:	08006511 	.word	0x08006511
 8006548:	08006511 	.word	0x08006511
 800654c:	08006511 	.word	0x08006511
 8006550:	08006511 	.word	0x08006511
 8006554:	080066a1 	.word	0x080066a1
 8006558:	080065c5 	.word	0x080065c5
 800655c:	08006683 	.word	0x08006683
 8006560:	08006511 	.word	0x08006511
 8006564:	08006511 	.word	0x08006511
 8006568:	080066c3 	.word	0x080066c3
 800656c:	08006511 	.word	0x08006511
 8006570:	080065c5 	.word	0x080065c5
 8006574:	08006511 	.word	0x08006511
 8006578:	08006511 	.word	0x08006511
 800657c:	0800668b 	.word	0x0800668b
 8006580:	682b      	ldr	r3, [r5, #0]
 8006582:	1d1a      	adds	r2, r3, #4
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	602a      	str	r2, [r5, #0]
 8006588:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800658c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006590:	2301      	movs	r3, #1
 8006592:	e0a3      	b.n	80066dc <_printf_i+0x1f4>
 8006594:	6820      	ldr	r0, [r4, #0]
 8006596:	6829      	ldr	r1, [r5, #0]
 8006598:	0606      	lsls	r6, r0, #24
 800659a:	f101 0304 	add.w	r3, r1, #4
 800659e:	d50a      	bpl.n	80065b6 <_printf_i+0xce>
 80065a0:	680e      	ldr	r6, [r1, #0]
 80065a2:	602b      	str	r3, [r5, #0]
 80065a4:	2e00      	cmp	r6, #0
 80065a6:	da03      	bge.n	80065b0 <_printf_i+0xc8>
 80065a8:	232d      	movs	r3, #45	; 0x2d
 80065aa:	4276      	negs	r6, r6
 80065ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065b0:	485e      	ldr	r0, [pc, #376]	; (800672c <_printf_i+0x244>)
 80065b2:	230a      	movs	r3, #10
 80065b4:	e019      	b.n	80065ea <_printf_i+0x102>
 80065b6:	680e      	ldr	r6, [r1, #0]
 80065b8:	602b      	str	r3, [r5, #0]
 80065ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80065be:	bf18      	it	ne
 80065c0:	b236      	sxthne	r6, r6
 80065c2:	e7ef      	b.n	80065a4 <_printf_i+0xbc>
 80065c4:	682b      	ldr	r3, [r5, #0]
 80065c6:	6820      	ldr	r0, [r4, #0]
 80065c8:	1d19      	adds	r1, r3, #4
 80065ca:	6029      	str	r1, [r5, #0]
 80065cc:	0601      	lsls	r1, r0, #24
 80065ce:	d501      	bpl.n	80065d4 <_printf_i+0xec>
 80065d0:	681e      	ldr	r6, [r3, #0]
 80065d2:	e002      	b.n	80065da <_printf_i+0xf2>
 80065d4:	0646      	lsls	r6, r0, #25
 80065d6:	d5fb      	bpl.n	80065d0 <_printf_i+0xe8>
 80065d8:	881e      	ldrh	r6, [r3, #0]
 80065da:	4854      	ldr	r0, [pc, #336]	; (800672c <_printf_i+0x244>)
 80065dc:	2f6f      	cmp	r7, #111	; 0x6f
 80065de:	bf0c      	ite	eq
 80065e0:	2308      	moveq	r3, #8
 80065e2:	230a      	movne	r3, #10
 80065e4:	2100      	movs	r1, #0
 80065e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065ea:	6865      	ldr	r5, [r4, #4]
 80065ec:	60a5      	str	r5, [r4, #8]
 80065ee:	2d00      	cmp	r5, #0
 80065f0:	bfa2      	ittt	ge
 80065f2:	6821      	ldrge	r1, [r4, #0]
 80065f4:	f021 0104 	bicge.w	r1, r1, #4
 80065f8:	6021      	strge	r1, [r4, #0]
 80065fa:	b90e      	cbnz	r6, 8006600 <_printf_i+0x118>
 80065fc:	2d00      	cmp	r5, #0
 80065fe:	d04d      	beq.n	800669c <_printf_i+0x1b4>
 8006600:	4615      	mov	r5, r2
 8006602:	fbb6 f1f3 	udiv	r1, r6, r3
 8006606:	fb03 6711 	mls	r7, r3, r1, r6
 800660a:	5dc7      	ldrb	r7, [r0, r7]
 800660c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006610:	4637      	mov	r7, r6
 8006612:	42bb      	cmp	r3, r7
 8006614:	460e      	mov	r6, r1
 8006616:	d9f4      	bls.n	8006602 <_printf_i+0x11a>
 8006618:	2b08      	cmp	r3, #8
 800661a:	d10b      	bne.n	8006634 <_printf_i+0x14c>
 800661c:	6823      	ldr	r3, [r4, #0]
 800661e:	07de      	lsls	r6, r3, #31
 8006620:	d508      	bpl.n	8006634 <_printf_i+0x14c>
 8006622:	6923      	ldr	r3, [r4, #16]
 8006624:	6861      	ldr	r1, [r4, #4]
 8006626:	4299      	cmp	r1, r3
 8006628:	bfde      	ittt	le
 800662a:	2330      	movle	r3, #48	; 0x30
 800662c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006630:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006634:	1b52      	subs	r2, r2, r5
 8006636:	6122      	str	r2, [r4, #16]
 8006638:	f8cd a000 	str.w	sl, [sp]
 800663c:	464b      	mov	r3, r9
 800663e:	aa03      	add	r2, sp, #12
 8006640:	4621      	mov	r1, r4
 8006642:	4640      	mov	r0, r8
 8006644:	f7ff fee2 	bl	800640c <_printf_common>
 8006648:	3001      	adds	r0, #1
 800664a:	d14c      	bne.n	80066e6 <_printf_i+0x1fe>
 800664c:	f04f 30ff 	mov.w	r0, #4294967295
 8006650:	b004      	add	sp, #16
 8006652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006656:	4835      	ldr	r0, [pc, #212]	; (800672c <_printf_i+0x244>)
 8006658:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800665c:	6829      	ldr	r1, [r5, #0]
 800665e:	6823      	ldr	r3, [r4, #0]
 8006660:	f851 6b04 	ldr.w	r6, [r1], #4
 8006664:	6029      	str	r1, [r5, #0]
 8006666:	061d      	lsls	r5, r3, #24
 8006668:	d514      	bpl.n	8006694 <_printf_i+0x1ac>
 800666a:	07df      	lsls	r7, r3, #31
 800666c:	bf44      	itt	mi
 800666e:	f043 0320 	orrmi.w	r3, r3, #32
 8006672:	6023      	strmi	r3, [r4, #0]
 8006674:	b91e      	cbnz	r6, 800667e <_printf_i+0x196>
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	f023 0320 	bic.w	r3, r3, #32
 800667c:	6023      	str	r3, [r4, #0]
 800667e:	2310      	movs	r3, #16
 8006680:	e7b0      	b.n	80065e4 <_printf_i+0xfc>
 8006682:	6823      	ldr	r3, [r4, #0]
 8006684:	f043 0320 	orr.w	r3, r3, #32
 8006688:	6023      	str	r3, [r4, #0]
 800668a:	2378      	movs	r3, #120	; 0x78
 800668c:	4828      	ldr	r0, [pc, #160]	; (8006730 <_printf_i+0x248>)
 800668e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006692:	e7e3      	b.n	800665c <_printf_i+0x174>
 8006694:	0659      	lsls	r1, r3, #25
 8006696:	bf48      	it	mi
 8006698:	b2b6      	uxthmi	r6, r6
 800669a:	e7e6      	b.n	800666a <_printf_i+0x182>
 800669c:	4615      	mov	r5, r2
 800669e:	e7bb      	b.n	8006618 <_printf_i+0x130>
 80066a0:	682b      	ldr	r3, [r5, #0]
 80066a2:	6826      	ldr	r6, [r4, #0]
 80066a4:	6961      	ldr	r1, [r4, #20]
 80066a6:	1d18      	adds	r0, r3, #4
 80066a8:	6028      	str	r0, [r5, #0]
 80066aa:	0635      	lsls	r5, r6, #24
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	d501      	bpl.n	80066b4 <_printf_i+0x1cc>
 80066b0:	6019      	str	r1, [r3, #0]
 80066b2:	e002      	b.n	80066ba <_printf_i+0x1d2>
 80066b4:	0670      	lsls	r0, r6, #25
 80066b6:	d5fb      	bpl.n	80066b0 <_printf_i+0x1c8>
 80066b8:	8019      	strh	r1, [r3, #0]
 80066ba:	2300      	movs	r3, #0
 80066bc:	6123      	str	r3, [r4, #16]
 80066be:	4615      	mov	r5, r2
 80066c0:	e7ba      	b.n	8006638 <_printf_i+0x150>
 80066c2:	682b      	ldr	r3, [r5, #0]
 80066c4:	1d1a      	adds	r2, r3, #4
 80066c6:	602a      	str	r2, [r5, #0]
 80066c8:	681d      	ldr	r5, [r3, #0]
 80066ca:	6862      	ldr	r2, [r4, #4]
 80066cc:	2100      	movs	r1, #0
 80066ce:	4628      	mov	r0, r5
 80066d0:	f7f9 fd8e 	bl	80001f0 <memchr>
 80066d4:	b108      	cbz	r0, 80066da <_printf_i+0x1f2>
 80066d6:	1b40      	subs	r0, r0, r5
 80066d8:	6060      	str	r0, [r4, #4]
 80066da:	6863      	ldr	r3, [r4, #4]
 80066dc:	6123      	str	r3, [r4, #16]
 80066de:	2300      	movs	r3, #0
 80066e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066e4:	e7a8      	b.n	8006638 <_printf_i+0x150>
 80066e6:	6923      	ldr	r3, [r4, #16]
 80066e8:	462a      	mov	r2, r5
 80066ea:	4649      	mov	r1, r9
 80066ec:	4640      	mov	r0, r8
 80066ee:	47d0      	blx	sl
 80066f0:	3001      	adds	r0, #1
 80066f2:	d0ab      	beq.n	800664c <_printf_i+0x164>
 80066f4:	6823      	ldr	r3, [r4, #0]
 80066f6:	079b      	lsls	r3, r3, #30
 80066f8:	d413      	bmi.n	8006722 <_printf_i+0x23a>
 80066fa:	68e0      	ldr	r0, [r4, #12]
 80066fc:	9b03      	ldr	r3, [sp, #12]
 80066fe:	4298      	cmp	r0, r3
 8006700:	bfb8      	it	lt
 8006702:	4618      	movlt	r0, r3
 8006704:	e7a4      	b.n	8006650 <_printf_i+0x168>
 8006706:	2301      	movs	r3, #1
 8006708:	4632      	mov	r2, r6
 800670a:	4649      	mov	r1, r9
 800670c:	4640      	mov	r0, r8
 800670e:	47d0      	blx	sl
 8006710:	3001      	adds	r0, #1
 8006712:	d09b      	beq.n	800664c <_printf_i+0x164>
 8006714:	3501      	adds	r5, #1
 8006716:	68e3      	ldr	r3, [r4, #12]
 8006718:	9903      	ldr	r1, [sp, #12]
 800671a:	1a5b      	subs	r3, r3, r1
 800671c:	42ab      	cmp	r3, r5
 800671e:	dcf2      	bgt.n	8006706 <_printf_i+0x21e>
 8006720:	e7eb      	b.n	80066fa <_printf_i+0x212>
 8006722:	2500      	movs	r5, #0
 8006724:	f104 0619 	add.w	r6, r4, #25
 8006728:	e7f5      	b.n	8006716 <_printf_i+0x22e>
 800672a:	bf00      	nop
 800672c:	08008b3f 	.word	0x08008b3f
 8006730:	08008b50 	.word	0x08008b50

08006734 <siprintf>:
 8006734:	b40e      	push	{r1, r2, r3}
 8006736:	b500      	push	{lr}
 8006738:	b09c      	sub	sp, #112	; 0x70
 800673a:	ab1d      	add	r3, sp, #116	; 0x74
 800673c:	9002      	str	r0, [sp, #8]
 800673e:	9006      	str	r0, [sp, #24]
 8006740:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006744:	4809      	ldr	r0, [pc, #36]	; (800676c <siprintf+0x38>)
 8006746:	9107      	str	r1, [sp, #28]
 8006748:	9104      	str	r1, [sp, #16]
 800674a:	4909      	ldr	r1, [pc, #36]	; (8006770 <siprintf+0x3c>)
 800674c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006750:	9105      	str	r1, [sp, #20]
 8006752:	6800      	ldr	r0, [r0, #0]
 8006754:	9301      	str	r3, [sp, #4]
 8006756:	a902      	add	r1, sp, #8
 8006758:	f001 fea4 	bl	80084a4 <_svfiprintf_r>
 800675c:	9b02      	ldr	r3, [sp, #8]
 800675e:	2200      	movs	r2, #0
 8006760:	701a      	strb	r2, [r3, #0]
 8006762:	b01c      	add	sp, #112	; 0x70
 8006764:	f85d eb04 	ldr.w	lr, [sp], #4
 8006768:	b003      	add	sp, #12
 800676a:	4770      	bx	lr
 800676c:	20000014 	.word	0x20000014
 8006770:	ffff0208 	.word	0xffff0208

08006774 <__swbuf_r>:
 8006774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006776:	460e      	mov	r6, r1
 8006778:	4614      	mov	r4, r2
 800677a:	4605      	mov	r5, r0
 800677c:	b118      	cbz	r0, 8006786 <__swbuf_r+0x12>
 800677e:	6983      	ldr	r3, [r0, #24]
 8006780:	b90b      	cbnz	r3, 8006786 <__swbuf_r+0x12>
 8006782:	f001 f851 	bl	8007828 <__sinit>
 8006786:	4b21      	ldr	r3, [pc, #132]	; (800680c <__swbuf_r+0x98>)
 8006788:	429c      	cmp	r4, r3
 800678a:	d12b      	bne.n	80067e4 <__swbuf_r+0x70>
 800678c:	686c      	ldr	r4, [r5, #4]
 800678e:	69a3      	ldr	r3, [r4, #24]
 8006790:	60a3      	str	r3, [r4, #8]
 8006792:	89a3      	ldrh	r3, [r4, #12]
 8006794:	071a      	lsls	r2, r3, #28
 8006796:	d52f      	bpl.n	80067f8 <__swbuf_r+0x84>
 8006798:	6923      	ldr	r3, [r4, #16]
 800679a:	b36b      	cbz	r3, 80067f8 <__swbuf_r+0x84>
 800679c:	6923      	ldr	r3, [r4, #16]
 800679e:	6820      	ldr	r0, [r4, #0]
 80067a0:	1ac0      	subs	r0, r0, r3
 80067a2:	6963      	ldr	r3, [r4, #20]
 80067a4:	b2f6      	uxtb	r6, r6
 80067a6:	4283      	cmp	r3, r0
 80067a8:	4637      	mov	r7, r6
 80067aa:	dc04      	bgt.n	80067b6 <__swbuf_r+0x42>
 80067ac:	4621      	mov	r1, r4
 80067ae:	4628      	mov	r0, r5
 80067b0:	f000 ffa6 	bl	8007700 <_fflush_r>
 80067b4:	bb30      	cbnz	r0, 8006804 <__swbuf_r+0x90>
 80067b6:	68a3      	ldr	r3, [r4, #8]
 80067b8:	3b01      	subs	r3, #1
 80067ba:	60a3      	str	r3, [r4, #8]
 80067bc:	6823      	ldr	r3, [r4, #0]
 80067be:	1c5a      	adds	r2, r3, #1
 80067c0:	6022      	str	r2, [r4, #0]
 80067c2:	701e      	strb	r6, [r3, #0]
 80067c4:	6963      	ldr	r3, [r4, #20]
 80067c6:	3001      	adds	r0, #1
 80067c8:	4283      	cmp	r3, r0
 80067ca:	d004      	beq.n	80067d6 <__swbuf_r+0x62>
 80067cc:	89a3      	ldrh	r3, [r4, #12]
 80067ce:	07db      	lsls	r3, r3, #31
 80067d0:	d506      	bpl.n	80067e0 <__swbuf_r+0x6c>
 80067d2:	2e0a      	cmp	r6, #10
 80067d4:	d104      	bne.n	80067e0 <__swbuf_r+0x6c>
 80067d6:	4621      	mov	r1, r4
 80067d8:	4628      	mov	r0, r5
 80067da:	f000 ff91 	bl	8007700 <_fflush_r>
 80067de:	b988      	cbnz	r0, 8006804 <__swbuf_r+0x90>
 80067e0:	4638      	mov	r0, r7
 80067e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067e4:	4b0a      	ldr	r3, [pc, #40]	; (8006810 <__swbuf_r+0x9c>)
 80067e6:	429c      	cmp	r4, r3
 80067e8:	d101      	bne.n	80067ee <__swbuf_r+0x7a>
 80067ea:	68ac      	ldr	r4, [r5, #8]
 80067ec:	e7cf      	b.n	800678e <__swbuf_r+0x1a>
 80067ee:	4b09      	ldr	r3, [pc, #36]	; (8006814 <__swbuf_r+0xa0>)
 80067f0:	429c      	cmp	r4, r3
 80067f2:	bf08      	it	eq
 80067f4:	68ec      	ldreq	r4, [r5, #12]
 80067f6:	e7ca      	b.n	800678e <__swbuf_r+0x1a>
 80067f8:	4621      	mov	r1, r4
 80067fa:	4628      	mov	r0, r5
 80067fc:	f000 f80c 	bl	8006818 <__swsetup_r>
 8006800:	2800      	cmp	r0, #0
 8006802:	d0cb      	beq.n	800679c <__swbuf_r+0x28>
 8006804:	f04f 37ff 	mov.w	r7, #4294967295
 8006808:	e7ea      	b.n	80067e0 <__swbuf_r+0x6c>
 800680a:	bf00      	nop
 800680c:	08008c14 	.word	0x08008c14
 8006810:	08008c34 	.word	0x08008c34
 8006814:	08008bf4 	.word	0x08008bf4

08006818 <__swsetup_r>:
 8006818:	4b32      	ldr	r3, [pc, #200]	; (80068e4 <__swsetup_r+0xcc>)
 800681a:	b570      	push	{r4, r5, r6, lr}
 800681c:	681d      	ldr	r5, [r3, #0]
 800681e:	4606      	mov	r6, r0
 8006820:	460c      	mov	r4, r1
 8006822:	b125      	cbz	r5, 800682e <__swsetup_r+0x16>
 8006824:	69ab      	ldr	r3, [r5, #24]
 8006826:	b913      	cbnz	r3, 800682e <__swsetup_r+0x16>
 8006828:	4628      	mov	r0, r5
 800682a:	f000 fffd 	bl	8007828 <__sinit>
 800682e:	4b2e      	ldr	r3, [pc, #184]	; (80068e8 <__swsetup_r+0xd0>)
 8006830:	429c      	cmp	r4, r3
 8006832:	d10f      	bne.n	8006854 <__swsetup_r+0x3c>
 8006834:	686c      	ldr	r4, [r5, #4]
 8006836:	89a3      	ldrh	r3, [r4, #12]
 8006838:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800683c:	0719      	lsls	r1, r3, #28
 800683e:	d42c      	bmi.n	800689a <__swsetup_r+0x82>
 8006840:	06dd      	lsls	r5, r3, #27
 8006842:	d411      	bmi.n	8006868 <__swsetup_r+0x50>
 8006844:	2309      	movs	r3, #9
 8006846:	6033      	str	r3, [r6, #0]
 8006848:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800684c:	81a3      	strh	r3, [r4, #12]
 800684e:	f04f 30ff 	mov.w	r0, #4294967295
 8006852:	e03e      	b.n	80068d2 <__swsetup_r+0xba>
 8006854:	4b25      	ldr	r3, [pc, #148]	; (80068ec <__swsetup_r+0xd4>)
 8006856:	429c      	cmp	r4, r3
 8006858:	d101      	bne.n	800685e <__swsetup_r+0x46>
 800685a:	68ac      	ldr	r4, [r5, #8]
 800685c:	e7eb      	b.n	8006836 <__swsetup_r+0x1e>
 800685e:	4b24      	ldr	r3, [pc, #144]	; (80068f0 <__swsetup_r+0xd8>)
 8006860:	429c      	cmp	r4, r3
 8006862:	bf08      	it	eq
 8006864:	68ec      	ldreq	r4, [r5, #12]
 8006866:	e7e6      	b.n	8006836 <__swsetup_r+0x1e>
 8006868:	0758      	lsls	r0, r3, #29
 800686a:	d512      	bpl.n	8006892 <__swsetup_r+0x7a>
 800686c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800686e:	b141      	cbz	r1, 8006882 <__swsetup_r+0x6a>
 8006870:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006874:	4299      	cmp	r1, r3
 8006876:	d002      	beq.n	800687e <__swsetup_r+0x66>
 8006878:	4630      	mov	r0, r6
 800687a:	f001 fca9 	bl	80081d0 <_free_r>
 800687e:	2300      	movs	r3, #0
 8006880:	6363      	str	r3, [r4, #52]	; 0x34
 8006882:	89a3      	ldrh	r3, [r4, #12]
 8006884:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006888:	81a3      	strh	r3, [r4, #12]
 800688a:	2300      	movs	r3, #0
 800688c:	6063      	str	r3, [r4, #4]
 800688e:	6923      	ldr	r3, [r4, #16]
 8006890:	6023      	str	r3, [r4, #0]
 8006892:	89a3      	ldrh	r3, [r4, #12]
 8006894:	f043 0308 	orr.w	r3, r3, #8
 8006898:	81a3      	strh	r3, [r4, #12]
 800689a:	6923      	ldr	r3, [r4, #16]
 800689c:	b94b      	cbnz	r3, 80068b2 <__swsetup_r+0x9a>
 800689e:	89a3      	ldrh	r3, [r4, #12]
 80068a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80068a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068a8:	d003      	beq.n	80068b2 <__swsetup_r+0x9a>
 80068aa:	4621      	mov	r1, r4
 80068ac:	4630      	mov	r0, r6
 80068ae:	f001 f885 	bl	80079bc <__smakebuf_r>
 80068b2:	89a0      	ldrh	r0, [r4, #12]
 80068b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068b8:	f010 0301 	ands.w	r3, r0, #1
 80068bc:	d00a      	beq.n	80068d4 <__swsetup_r+0xbc>
 80068be:	2300      	movs	r3, #0
 80068c0:	60a3      	str	r3, [r4, #8]
 80068c2:	6963      	ldr	r3, [r4, #20]
 80068c4:	425b      	negs	r3, r3
 80068c6:	61a3      	str	r3, [r4, #24]
 80068c8:	6923      	ldr	r3, [r4, #16]
 80068ca:	b943      	cbnz	r3, 80068de <__swsetup_r+0xc6>
 80068cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80068d0:	d1ba      	bne.n	8006848 <__swsetup_r+0x30>
 80068d2:	bd70      	pop	{r4, r5, r6, pc}
 80068d4:	0781      	lsls	r1, r0, #30
 80068d6:	bf58      	it	pl
 80068d8:	6963      	ldrpl	r3, [r4, #20]
 80068da:	60a3      	str	r3, [r4, #8]
 80068dc:	e7f4      	b.n	80068c8 <__swsetup_r+0xb0>
 80068de:	2000      	movs	r0, #0
 80068e0:	e7f7      	b.n	80068d2 <__swsetup_r+0xba>
 80068e2:	bf00      	nop
 80068e4:	20000014 	.word	0x20000014
 80068e8:	08008c14 	.word	0x08008c14
 80068ec:	08008c34 	.word	0x08008c34
 80068f0:	08008bf4 	.word	0x08008bf4

080068f4 <abort>:
 80068f4:	b508      	push	{r3, lr}
 80068f6:	2006      	movs	r0, #6
 80068f8:	f001 ff0c 	bl	8008714 <raise>
 80068fc:	2001      	movs	r0, #1
 80068fe:	f7fb fc51 	bl	80021a4 <_exit>

08006902 <quorem>:
 8006902:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006906:	6903      	ldr	r3, [r0, #16]
 8006908:	690c      	ldr	r4, [r1, #16]
 800690a:	42a3      	cmp	r3, r4
 800690c:	4607      	mov	r7, r0
 800690e:	f2c0 8081 	blt.w	8006a14 <quorem+0x112>
 8006912:	3c01      	subs	r4, #1
 8006914:	f101 0814 	add.w	r8, r1, #20
 8006918:	f100 0514 	add.w	r5, r0, #20
 800691c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006920:	9301      	str	r3, [sp, #4]
 8006922:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006926:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800692a:	3301      	adds	r3, #1
 800692c:	429a      	cmp	r2, r3
 800692e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006932:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006936:	fbb2 f6f3 	udiv	r6, r2, r3
 800693a:	d331      	bcc.n	80069a0 <quorem+0x9e>
 800693c:	f04f 0e00 	mov.w	lr, #0
 8006940:	4640      	mov	r0, r8
 8006942:	46ac      	mov	ip, r5
 8006944:	46f2      	mov	sl, lr
 8006946:	f850 2b04 	ldr.w	r2, [r0], #4
 800694a:	b293      	uxth	r3, r2
 800694c:	fb06 e303 	mla	r3, r6, r3, lr
 8006950:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006954:	b29b      	uxth	r3, r3
 8006956:	ebaa 0303 	sub.w	r3, sl, r3
 800695a:	f8dc a000 	ldr.w	sl, [ip]
 800695e:	0c12      	lsrs	r2, r2, #16
 8006960:	fa13 f38a 	uxtah	r3, r3, sl
 8006964:	fb06 e202 	mla	r2, r6, r2, lr
 8006968:	9300      	str	r3, [sp, #0]
 800696a:	9b00      	ldr	r3, [sp, #0]
 800696c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006970:	b292      	uxth	r2, r2
 8006972:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006976:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800697a:	f8bd 3000 	ldrh.w	r3, [sp]
 800697e:	4581      	cmp	r9, r0
 8006980:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006984:	f84c 3b04 	str.w	r3, [ip], #4
 8006988:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800698c:	d2db      	bcs.n	8006946 <quorem+0x44>
 800698e:	f855 300b 	ldr.w	r3, [r5, fp]
 8006992:	b92b      	cbnz	r3, 80069a0 <quorem+0x9e>
 8006994:	9b01      	ldr	r3, [sp, #4]
 8006996:	3b04      	subs	r3, #4
 8006998:	429d      	cmp	r5, r3
 800699a:	461a      	mov	r2, r3
 800699c:	d32e      	bcc.n	80069fc <quorem+0xfa>
 800699e:	613c      	str	r4, [r7, #16]
 80069a0:	4638      	mov	r0, r7
 80069a2:	f001 fafd 	bl	8007fa0 <__mcmp>
 80069a6:	2800      	cmp	r0, #0
 80069a8:	db24      	blt.n	80069f4 <quorem+0xf2>
 80069aa:	3601      	adds	r6, #1
 80069ac:	4628      	mov	r0, r5
 80069ae:	f04f 0c00 	mov.w	ip, #0
 80069b2:	f858 2b04 	ldr.w	r2, [r8], #4
 80069b6:	f8d0 e000 	ldr.w	lr, [r0]
 80069ba:	b293      	uxth	r3, r2
 80069bc:	ebac 0303 	sub.w	r3, ip, r3
 80069c0:	0c12      	lsrs	r2, r2, #16
 80069c2:	fa13 f38e 	uxtah	r3, r3, lr
 80069c6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80069ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069d4:	45c1      	cmp	r9, r8
 80069d6:	f840 3b04 	str.w	r3, [r0], #4
 80069da:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80069de:	d2e8      	bcs.n	80069b2 <quorem+0xb0>
 80069e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069e8:	b922      	cbnz	r2, 80069f4 <quorem+0xf2>
 80069ea:	3b04      	subs	r3, #4
 80069ec:	429d      	cmp	r5, r3
 80069ee:	461a      	mov	r2, r3
 80069f0:	d30a      	bcc.n	8006a08 <quorem+0x106>
 80069f2:	613c      	str	r4, [r7, #16]
 80069f4:	4630      	mov	r0, r6
 80069f6:	b003      	add	sp, #12
 80069f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069fc:	6812      	ldr	r2, [r2, #0]
 80069fe:	3b04      	subs	r3, #4
 8006a00:	2a00      	cmp	r2, #0
 8006a02:	d1cc      	bne.n	800699e <quorem+0x9c>
 8006a04:	3c01      	subs	r4, #1
 8006a06:	e7c7      	b.n	8006998 <quorem+0x96>
 8006a08:	6812      	ldr	r2, [r2, #0]
 8006a0a:	3b04      	subs	r3, #4
 8006a0c:	2a00      	cmp	r2, #0
 8006a0e:	d1f0      	bne.n	80069f2 <quorem+0xf0>
 8006a10:	3c01      	subs	r4, #1
 8006a12:	e7eb      	b.n	80069ec <quorem+0xea>
 8006a14:	2000      	movs	r0, #0
 8006a16:	e7ee      	b.n	80069f6 <quorem+0xf4>

08006a18 <_dtoa_r>:
 8006a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a1c:	ed2d 8b04 	vpush	{d8-d9}
 8006a20:	ec57 6b10 	vmov	r6, r7, d0
 8006a24:	b093      	sub	sp, #76	; 0x4c
 8006a26:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006a28:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006a2c:	9106      	str	r1, [sp, #24]
 8006a2e:	ee10 aa10 	vmov	sl, s0
 8006a32:	4604      	mov	r4, r0
 8006a34:	9209      	str	r2, [sp, #36]	; 0x24
 8006a36:	930c      	str	r3, [sp, #48]	; 0x30
 8006a38:	46bb      	mov	fp, r7
 8006a3a:	b975      	cbnz	r5, 8006a5a <_dtoa_r+0x42>
 8006a3c:	2010      	movs	r0, #16
 8006a3e:	f000 fffd 	bl	8007a3c <malloc>
 8006a42:	4602      	mov	r2, r0
 8006a44:	6260      	str	r0, [r4, #36]	; 0x24
 8006a46:	b920      	cbnz	r0, 8006a52 <_dtoa_r+0x3a>
 8006a48:	4ba7      	ldr	r3, [pc, #668]	; (8006ce8 <_dtoa_r+0x2d0>)
 8006a4a:	21ea      	movs	r1, #234	; 0xea
 8006a4c:	48a7      	ldr	r0, [pc, #668]	; (8006cec <_dtoa_r+0x2d4>)
 8006a4e:	f7ff f84b 	bl	8005ae8 <__assert_func>
 8006a52:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006a56:	6005      	str	r5, [r0, #0]
 8006a58:	60c5      	str	r5, [r0, #12]
 8006a5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a5c:	6819      	ldr	r1, [r3, #0]
 8006a5e:	b151      	cbz	r1, 8006a76 <_dtoa_r+0x5e>
 8006a60:	685a      	ldr	r2, [r3, #4]
 8006a62:	604a      	str	r2, [r1, #4]
 8006a64:	2301      	movs	r3, #1
 8006a66:	4093      	lsls	r3, r2
 8006a68:	608b      	str	r3, [r1, #8]
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	f001 f856 	bl	8007b1c <_Bfree>
 8006a70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a72:	2200      	movs	r2, #0
 8006a74:	601a      	str	r2, [r3, #0]
 8006a76:	1e3b      	subs	r3, r7, #0
 8006a78:	bfaa      	itet	ge
 8006a7a:	2300      	movge	r3, #0
 8006a7c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006a80:	f8c8 3000 	strge.w	r3, [r8]
 8006a84:	4b9a      	ldr	r3, [pc, #616]	; (8006cf0 <_dtoa_r+0x2d8>)
 8006a86:	bfbc      	itt	lt
 8006a88:	2201      	movlt	r2, #1
 8006a8a:	f8c8 2000 	strlt.w	r2, [r8]
 8006a8e:	ea33 030b 	bics.w	r3, r3, fp
 8006a92:	d11b      	bne.n	8006acc <_dtoa_r+0xb4>
 8006a94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a96:	f242 730f 	movw	r3, #9999	; 0x270f
 8006a9a:	6013      	str	r3, [r2, #0]
 8006a9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006aa0:	4333      	orrs	r3, r6
 8006aa2:	f000 8592 	beq.w	80075ca <_dtoa_r+0xbb2>
 8006aa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006aa8:	b963      	cbnz	r3, 8006ac4 <_dtoa_r+0xac>
 8006aaa:	4b92      	ldr	r3, [pc, #584]	; (8006cf4 <_dtoa_r+0x2dc>)
 8006aac:	e022      	b.n	8006af4 <_dtoa_r+0xdc>
 8006aae:	4b92      	ldr	r3, [pc, #584]	; (8006cf8 <_dtoa_r+0x2e0>)
 8006ab0:	9301      	str	r3, [sp, #4]
 8006ab2:	3308      	adds	r3, #8
 8006ab4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006ab6:	6013      	str	r3, [r2, #0]
 8006ab8:	9801      	ldr	r0, [sp, #4]
 8006aba:	b013      	add	sp, #76	; 0x4c
 8006abc:	ecbd 8b04 	vpop	{d8-d9}
 8006ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ac4:	4b8b      	ldr	r3, [pc, #556]	; (8006cf4 <_dtoa_r+0x2dc>)
 8006ac6:	9301      	str	r3, [sp, #4]
 8006ac8:	3303      	adds	r3, #3
 8006aca:	e7f3      	b.n	8006ab4 <_dtoa_r+0x9c>
 8006acc:	2200      	movs	r2, #0
 8006ace:	2300      	movs	r3, #0
 8006ad0:	4650      	mov	r0, sl
 8006ad2:	4659      	mov	r1, fp
 8006ad4:	f7fa f800 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ad8:	ec4b ab19 	vmov	d9, sl, fp
 8006adc:	4680      	mov	r8, r0
 8006ade:	b158      	cbz	r0, 8006af8 <_dtoa_r+0xe0>
 8006ae0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	6013      	str	r3, [r2, #0]
 8006ae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f000 856b 	beq.w	80075c4 <_dtoa_r+0xbac>
 8006aee:	4883      	ldr	r0, [pc, #524]	; (8006cfc <_dtoa_r+0x2e4>)
 8006af0:	6018      	str	r0, [r3, #0]
 8006af2:	1e43      	subs	r3, r0, #1
 8006af4:	9301      	str	r3, [sp, #4]
 8006af6:	e7df      	b.n	8006ab8 <_dtoa_r+0xa0>
 8006af8:	ec4b ab10 	vmov	d0, sl, fp
 8006afc:	aa10      	add	r2, sp, #64	; 0x40
 8006afe:	a911      	add	r1, sp, #68	; 0x44
 8006b00:	4620      	mov	r0, r4
 8006b02:	f001 faf3 	bl	80080ec <__d2b>
 8006b06:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006b0a:	ee08 0a10 	vmov	s16, r0
 8006b0e:	2d00      	cmp	r5, #0
 8006b10:	f000 8084 	beq.w	8006c1c <_dtoa_r+0x204>
 8006b14:	ee19 3a90 	vmov	r3, s19
 8006b18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b1c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006b20:	4656      	mov	r6, sl
 8006b22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006b26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006b2a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006b2e:	4b74      	ldr	r3, [pc, #464]	; (8006d00 <_dtoa_r+0x2e8>)
 8006b30:	2200      	movs	r2, #0
 8006b32:	4630      	mov	r0, r6
 8006b34:	4639      	mov	r1, r7
 8006b36:	f7f9 fbaf 	bl	8000298 <__aeabi_dsub>
 8006b3a:	a365      	add	r3, pc, #404	; (adr r3, 8006cd0 <_dtoa_r+0x2b8>)
 8006b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b40:	f7f9 fd62 	bl	8000608 <__aeabi_dmul>
 8006b44:	a364      	add	r3, pc, #400	; (adr r3, 8006cd8 <_dtoa_r+0x2c0>)
 8006b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4a:	f7f9 fba7 	bl	800029c <__adddf3>
 8006b4e:	4606      	mov	r6, r0
 8006b50:	4628      	mov	r0, r5
 8006b52:	460f      	mov	r7, r1
 8006b54:	f7f9 fcee 	bl	8000534 <__aeabi_i2d>
 8006b58:	a361      	add	r3, pc, #388	; (adr r3, 8006ce0 <_dtoa_r+0x2c8>)
 8006b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5e:	f7f9 fd53 	bl	8000608 <__aeabi_dmul>
 8006b62:	4602      	mov	r2, r0
 8006b64:	460b      	mov	r3, r1
 8006b66:	4630      	mov	r0, r6
 8006b68:	4639      	mov	r1, r7
 8006b6a:	f7f9 fb97 	bl	800029c <__adddf3>
 8006b6e:	4606      	mov	r6, r0
 8006b70:	460f      	mov	r7, r1
 8006b72:	f7f9 fff9 	bl	8000b68 <__aeabi_d2iz>
 8006b76:	2200      	movs	r2, #0
 8006b78:	9000      	str	r0, [sp, #0]
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	4630      	mov	r0, r6
 8006b7e:	4639      	mov	r1, r7
 8006b80:	f7f9 ffb4 	bl	8000aec <__aeabi_dcmplt>
 8006b84:	b150      	cbz	r0, 8006b9c <_dtoa_r+0x184>
 8006b86:	9800      	ldr	r0, [sp, #0]
 8006b88:	f7f9 fcd4 	bl	8000534 <__aeabi_i2d>
 8006b8c:	4632      	mov	r2, r6
 8006b8e:	463b      	mov	r3, r7
 8006b90:	f7f9 ffa2 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b94:	b910      	cbnz	r0, 8006b9c <_dtoa_r+0x184>
 8006b96:	9b00      	ldr	r3, [sp, #0]
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	9b00      	ldr	r3, [sp, #0]
 8006b9e:	2b16      	cmp	r3, #22
 8006ba0:	d85a      	bhi.n	8006c58 <_dtoa_r+0x240>
 8006ba2:	9a00      	ldr	r2, [sp, #0]
 8006ba4:	4b57      	ldr	r3, [pc, #348]	; (8006d04 <_dtoa_r+0x2ec>)
 8006ba6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bae:	ec51 0b19 	vmov	r0, r1, d9
 8006bb2:	f7f9 ff9b 	bl	8000aec <__aeabi_dcmplt>
 8006bb6:	2800      	cmp	r0, #0
 8006bb8:	d050      	beq.n	8006c5c <_dtoa_r+0x244>
 8006bba:	9b00      	ldr	r3, [sp, #0]
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006bc6:	1b5d      	subs	r5, r3, r5
 8006bc8:	1e6b      	subs	r3, r5, #1
 8006bca:	9305      	str	r3, [sp, #20]
 8006bcc:	bf45      	ittet	mi
 8006bce:	f1c5 0301 	rsbmi	r3, r5, #1
 8006bd2:	9304      	strmi	r3, [sp, #16]
 8006bd4:	2300      	movpl	r3, #0
 8006bd6:	2300      	movmi	r3, #0
 8006bd8:	bf4c      	ite	mi
 8006bda:	9305      	strmi	r3, [sp, #20]
 8006bdc:	9304      	strpl	r3, [sp, #16]
 8006bde:	9b00      	ldr	r3, [sp, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	db3d      	blt.n	8006c60 <_dtoa_r+0x248>
 8006be4:	9b05      	ldr	r3, [sp, #20]
 8006be6:	9a00      	ldr	r2, [sp, #0]
 8006be8:	920a      	str	r2, [sp, #40]	; 0x28
 8006bea:	4413      	add	r3, r2
 8006bec:	9305      	str	r3, [sp, #20]
 8006bee:	2300      	movs	r3, #0
 8006bf0:	9307      	str	r3, [sp, #28]
 8006bf2:	9b06      	ldr	r3, [sp, #24]
 8006bf4:	2b09      	cmp	r3, #9
 8006bf6:	f200 8089 	bhi.w	8006d0c <_dtoa_r+0x2f4>
 8006bfa:	2b05      	cmp	r3, #5
 8006bfc:	bfc4      	itt	gt
 8006bfe:	3b04      	subgt	r3, #4
 8006c00:	9306      	strgt	r3, [sp, #24]
 8006c02:	9b06      	ldr	r3, [sp, #24]
 8006c04:	f1a3 0302 	sub.w	r3, r3, #2
 8006c08:	bfcc      	ite	gt
 8006c0a:	2500      	movgt	r5, #0
 8006c0c:	2501      	movle	r5, #1
 8006c0e:	2b03      	cmp	r3, #3
 8006c10:	f200 8087 	bhi.w	8006d22 <_dtoa_r+0x30a>
 8006c14:	e8df f003 	tbb	[pc, r3]
 8006c18:	59383a2d 	.word	0x59383a2d
 8006c1c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006c20:	441d      	add	r5, r3
 8006c22:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006c26:	2b20      	cmp	r3, #32
 8006c28:	bfc1      	itttt	gt
 8006c2a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006c2e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006c32:	fa0b f303 	lslgt.w	r3, fp, r3
 8006c36:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006c3a:	bfda      	itte	le
 8006c3c:	f1c3 0320 	rsble	r3, r3, #32
 8006c40:	fa06 f003 	lslle.w	r0, r6, r3
 8006c44:	4318      	orrgt	r0, r3
 8006c46:	f7f9 fc65 	bl	8000514 <__aeabi_ui2d>
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	4606      	mov	r6, r0
 8006c4e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006c52:	3d01      	subs	r5, #1
 8006c54:	930e      	str	r3, [sp, #56]	; 0x38
 8006c56:	e76a      	b.n	8006b2e <_dtoa_r+0x116>
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e7b2      	b.n	8006bc2 <_dtoa_r+0x1aa>
 8006c5c:	900b      	str	r0, [sp, #44]	; 0x2c
 8006c5e:	e7b1      	b.n	8006bc4 <_dtoa_r+0x1ac>
 8006c60:	9b04      	ldr	r3, [sp, #16]
 8006c62:	9a00      	ldr	r2, [sp, #0]
 8006c64:	1a9b      	subs	r3, r3, r2
 8006c66:	9304      	str	r3, [sp, #16]
 8006c68:	4253      	negs	r3, r2
 8006c6a:	9307      	str	r3, [sp, #28]
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	930a      	str	r3, [sp, #40]	; 0x28
 8006c70:	e7bf      	b.n	8006bf2 <_dtoa_r+0x1da>
 8006c72:	2300      	movs	r3, #0
 8006c74:	9308      	str	r3, [sp, #32]
 8006c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	dc55      	bgt.n	8006d28 <_dtoa_r+0x310>
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006c82:	461a      	mov	r2, r3
 8006c84:	9209      	str	r2, [sp, #36]	; 0x24
 8006c86:	e00c      	b.n	8006ca2 <_dtoa_r+0x28a>
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e7f3      	b.n	8006c74 <_dtoa_r+0x25c>
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c90:	9308      	str	r3, [sp, #32]
 8006c92:	9b00      	ldr	r3, [sp, #0]
 8006c94:	4413      	add	r3, r2
 8006c96:	9302      	str	r3, [sp, #8]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	9303      	str	r3, [sp, #12]
 8006c9e:	bfb8      	it	lt
 8006ca0:	2301      	movlt	r3, #1
 8006ca2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	6042      	str	r2, [r0, #4]
 8006ca8:	2204      	movs	r2, #4
 8006caa:	f102 0614 	add.w	r6, r2, #20
 8006cae:	429e      	cmp	r6, r3
 8006cb0:	6841      	ldr	r1, [r0, #4]
 8006cb2:	d93d      	bls.n	8006d30 <_dtoa_r+0x318>
 8006cb4:	4620      	mov	r0, r4
 8006cb6:	f000 fef1 	bl	8007a9c <_Balloc>
 8006cba:	9001      	str	r0, [sp, #4]
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	d13b      	bne.n	8006d38 <_dtoa_r+0x320>
 8006cc0:	4b11      	ldr	r3, [pc, #68]	; (8006d08 <_dtoa_r+0x2f0>)
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006cc8:	e6c0      	b.n	8006a4c <_dtoa_r+0x34>
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e7df      	b.n	8006c8e <_dtoa_r+0x276>
 8006cce:	bf00      	nop
 8006cd0:	636f4361 	.word	0x636f4361
 8006cd4:	3fd287a7 	.word	0x3fd287a7
 8006cd8:	8b60c8b3 	.word	0x8b60c8b3
 8006cdc:	3fc68a28 	.word	0x3fc68a28
 8006ce0:	509f79fb 	.word	0x509f79fb
 8006ce4:	3fd34413 	.word	0x3fd34413
 8006ce8:	08008b6e 	.word	0x08008b6e
 8006cec:	08008b85 	.word	0x08008b85
 8006cf0:	7ff00000 	.word	0x7ff00000
 8006cf4:	08008b6a 	.word	0x08008b6a
 8006cf8:	08008b61 	.word	0x08008b61
 8006cfc:	08008b3e 	.word	0x08008b3e
 8006d00:	3ff80000 	.word	0x3ff80000
 8006d04:	08008cd8 	.word	0x08008cd8
 8006d08:	08008be0 	.word	0x08008be0
 8006d0c:	2501      	movs	r5, #1
 8006d0e:	2300      	movs	r3, #0
 8006d10:	9306      	str	r3, [sp, #24]
 8006d12:	9508      	str	r5, [sp, #32]
 8006d14:	f04f 33ff 	mov.w	r3, #4294967295
 8006d18:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	2312      	movs	r3, #18
 8006d20:	e7b0      	b.n	8006c84 <_dtoa_r+0x26c>
 8006d22:	2301      	movs	r3, #1
 8006d24:	9308      	str	r3, [sp, #32]
 8006d26:	e7f5      	b.n	8006d14 <_dtoa_r+0x2fc>
 8006d28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d2a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006d2e:	e7b8      	b.n	8006ca2 <_dtoa_r+0x28a>
 8006d30:	3101      	adds	r1, #1
 8006d32:	6041      	str	r1, [r0, #4]
 8006d34:	0052      	lsls	r2, r2, #1
 8006d36:	e7b8      	b.n	8006caa <_dtoa_r+0x292>
 8006d38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d3a:	9a01      	ldr	r2, [sp, #4]
 8006d3c:	601a      	str	r2, [r3, #0]
 8006d3e:	9b03      	ldr	r3, [sp, #12]
 8006d40:	2b0e      	cmp	r3, #14
 8006d42:	f200 809d 	bhi.w	8006e80 <_dtoa_r+0x468>
 8006d46:	2d00      	cmp	r5, #0
 8006d48:	f000 809a 	beq.w	8006e80 <_dtoa_r+0x468>
 8006d4c:	9b00      	ldr	r3, [sp, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	dd32      	ble.n	8006db8 <_dtoa_r+0x3a0>
 8006d52:	4ab7      	ldr	r2, [pc, #732]	; (8007030 <_dtoa_r+0x618>)
 8006d54:	f003 030f 	and.w	r3, r3, #15
 8006d58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006d5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d60:	9b00      	ldr	r3, [sp, #0]
 8006d62:	05d8      	lsls	r0, r3, #23
 8006d64:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006d68:	d516      	bpl.n	8006d98 <_dtoa_r+0x380>
 8006d6a:	4bb2      	ldr	r3, [pc, #712]	; (8007034 <_dtoa_r+0x61c>)
 8006d6c:	ec51 0b19 	vmov	r0, r1, d9
 8006d70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d74:	f7f9 fd72 	bl	800085c <__aeabi_ddiv>
 8006d78:	f007 070f 	and.w	r7, r7, #15
 8006d7c:	4682      	mov	sl, r0
 8006d7e:	468b      	mov	fp, r1
 8006d80:	2503      	movs	r5, #3
 8006d82:	4eac      	ldr	r6, [pc, #688]	; (8007034 <_dtoa_r+0x61c>)
 8006d84:	b957      	cbnz	r7, 8006d9c <_dtoa_r+0x384>
 8006d86:	4642      	mov	r2, r8
 8006d88:	464b      	mov	r3, r9
 8006d8a:	4650      	mov	r0, sl
 8006d8c:	4659      	mov	r1, fp
 8006d8e:	f7f9 fd65 	bl	800085c <__aeabi_ddiv>
 8006d92:	4682      	mov	sl, r0
 8006d94:	468b      	mov	fp, r1
 8006d96:	e028      	b.n	8006dea <_dtoa_r+0x3d2>
 8006d98:	2502      	movs	r5, #2
 8006d9a:	e7f2      	b.n	8006d82 <_dtoa_r+0x36a>
 8006d9c:	07f9      	lsls	r1, r7, #31
 8006d9e:	d508      	bpl.n	8006db2 <_dtoa_r+0x39a>
 8006da0:	4640      	mov	r0, r8
 8006da2:	4649      	mov	r1, r9
 8006da4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006da8:	f7f9 fc2e 	bl	8000608 <__aeabi_dmul>
 8006dac:	3501      	adds	r5, #1
 8006dae:	4680      	mov	r8, r0
 8006db0:	4689      	mov	r9, r1
 8006db2:	107f      	asrs	r7, r7, #1
 8006db4:	3608      	adds	r6, #8
 8006db6:	e7e5      	b.n	8006d84 <_dtoa_r+0x36c>
 8006db8:	f000 809b 	beq.w	8006ef2 <_dtoa_r+0x4da>
 8006dbc:	9b00      	ldr	r3, [sp, #0]
 8006dbe:	4f9d      	ldr	r7, [pc, #628]	; (8007034 <_dtoa_r+0x61c>)
 8006dc0:	425e      	negs	r6, r3
 8006dc2:	4b9b      	ldr	r3, [pc, #620]	; (8007030 <_dtoa_r+0x618>)
 8006dc4:	f006 020f 	and.w	r2, r6, #15
 8006dc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd0:	ec51 0b19 	vmov	r0, r1, d9
 8006dd4:	f7f9 fc18 	bl	8000608 <__aeabi_dmul>
 8006dd8:	1136      	asrs	r6, r6, #4
 8006dda:	4682      	mov	sl, r0
 8006ddc:	468b      	mov	fp, r1
 8006dde:	2300      	movs	r3, #0
 8006de0:	2502      	movs	r5, #2
 8006de2:	2e00      	cmp	r6, #0
 8006de4:	d17a      	bne.n	8006edc <_dtoa_r+0x4c4>
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d1d3      	bne.n	8006d92 <_dtoa_r+0x37a>
 8006dea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f000 8082 	beq.w	8006ef6 <_dtoa_r+0x4de>
 8006df2:	4b91      	ldr	r3, [pc, #580]	; (8007038 <_dtoa_r+0x620>)
 8006df4:	2200      	movs	r2, #0
 8006df6:	4650      	mov	r0, sl
 8006df8:	4659      	mov	r1, fp
 8006dfa:	f7f9 fe77 	bl	8000aec <__aeabi_dcmplt>
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	d079      	beq.n	8006ef6 <_dtoa_r+0x4de>
 8006e02:	9b03      	ldr	r3, [sp, #12]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d076      	beq.n	8006ef6 <_dtoa_r+0x4de>
 8006e08:	9b02      	ldr	r3, [sp, #8]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	dd36      	ble.n	8006e7c <_dtoa_r+0x464>
 8006e0e:	9b00      	ldr	r3, [sp, #0]
 8006e10:	4650      	mov	r0, sl
 8006e12:	4659      	mov	r1, fp
 8006e14:	1e5f      	subs	r7, r3, #1
 8006e16:	2200      	movs	r2, #0
 8006e18:	4b88      	ldr	r3, [pc, #544]	; (800703c <_dtoa_r+0x624>)
 8006e1a:	f7f9 fbf5 	bl	8000608 <__aeabi_dmul>
 8006e1e:	9e02      	ldr	r6, [sp, #8]
 8006e20:	4682      	mov	sl, r0
 8006e22:	468b      	mov	fp, r1
 8006e24:	3501      	adds	r5, #1
 8006e26:	4628      	mov	r0, r5
 8006e28:	f7f9 fb84 	bl	8000534 <__aeabi_i2d>
 8006e2c:	4652      	mov	r2, sl
 8006e2e:	465b      	mov	r3, fp
 8006e30:	f7f9 fbea 	bl	8000608 <__aeabi_dmul>
 8006e34:	4b82      	ldr	r3, [pc, #520]	; (8007040 <_dtoa_r+0x628>)
 8006e36:	2200      	movs	r2, #0
 8006e38:	f7f9 fa30 	bl	800029c <__adddf3>
 8006e3c:	46d0      	mov	r8, sl
 8006e3e:	46d9      	mov	r9, fp
 8006e40:	4682      	mov	sl, r0
 8006e42:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006e46:	2e00      	cmp	r6, #0
 8006e48:	d158      	bne.n	8006efc <_dtoa_r+0x4e4>
 8006e4a:	4b7e      	ldr	r3, [pc, #504]	; (8007044 <_dtoa_r+0x62c>)
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	4640      	mov	r0, r8
 8006e50:	4649      	mov	r1, r9
 8006e52:	f7f9 fa21 	bl	8000298 <__aeabi_dsub>
 8006e56:	4652      	mov	r2, sl
 8006e58:	465b      	mov	r3, fp
 8006e5a:	4680      	mov	r8, r0
 8006e5c:	4689      	mov	r9, r1
 8006e5e:	f7f9 fe63 	bl	8000b28 <__aeabi_dcmpgt>
 8006e62:	2800      	cmp	r0, #0
 8006e64:	f040 8295 	bne.w	8007392 <_dtoa_r+0x97a>
 8006e68:	4652      	mov	r2, sl
 8006e6a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006e6e:	4640      	mov	r0, r8
 8006e70:	4649      	mov	r1, r9
 8006e72:	f7f9 fe3b 	bl	8000aec <__aeabi_dcmplt>
 8006e76:	2800      	cmp	r0, #0
 8006e78:	f040 8289 	bne.w	800738e <_dtoa_r+0x976>
 8006e7c:	ec5b ab19 	vmov	sl, fp, d9
 8006e80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f2c0 8148 	blt.w	8007118 <_dtoa_r+0x700>
 8006e88:	9a00      	ldr	r2, [sp, #0]
 8006e8a:	2a0e      	cmp	r2, #14
 8006e8c:	f300 8144 	bgt.w	8007118 <_dtoa_r+0x700>
 8006e90:	4b67      	ldr	r3, [pc, #412]	; (8007030 <_dtoa_r+0x618>)
 8006e92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e96:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f280 80d5 	bge.w	800704c <_dtoa_r+0x634>
 8006ea2:	9b03      	ldr	r3, [sp, #12]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f300 80d1 	bgt.w	800704c <_dtoa_r+0x634>
 8006eaa:	f040 826f 	bne.w	800738c <_dtoa_r+0x974>
 8006eae:	4b65      	ldr	r3, [pc, #404]	; (8007044 <_dtoa_r+0x62c>)
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	4640      	mov	r0, r8
 8006eb4:	4649      	mov	r1, r9
 8006eb6:	f7f9 fba7 	bl	8000608 <__aeabi_dmul>
 8006eba:	4652      	mov	r2, sl
 8006ebc:	465b      	mov	r3, fp
 8006ebe:	f7f9 fe29 	bl	8000b14 <__aeabi_dcmpge>
 8006ec2:	9e03      	ldr	r6, [sp, #12]
 8006ec4:	4637      	mov	r7, r6
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	f040 8245 	bne.w	8007356 <_dtoa_r+0x93e>
 8006ecc:	9d01      	ldr	r5, [sp, #4]
 8006ece:	2331      	movs	r3, #49	; 0x31
 8006ed0:	f805 3b01 	strb.w	r3, [r5], #1
 8006ed4:	9b00      	ldr	r3, [sp, #0]
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	9300      	str	r3, [sp, #0]
 8006eda:	e240      	b.n	800735e <_dtoa_r+0x946>
 8006edc:	07f2      	lsls	r2, r6, #31
 8006ede:	d505      	bpl.n	8006eec <_dtoa_r+0x4d4>
 8006ee0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ee4:	f7f9 fb90 	bl	8000608 <__aeabi_dmul>
 8006ee8:	3501      	adds	r5, #1
 8006eea:	2301      	movs	r3, #1
 8006eec:	1076      	asrs	r6, r6, #1
 8006eee:	3708      	adds	r7, #8
 8006ef0:	e777      	b.n	8006de2 <_dtoa_r+0x3ca>
 8006ef2:	2502      	movs	r5, #2
 8006ef4:	e779      	b.n	8006dea <_dtoa_r+0x3d2>
 8006ef6:	9f00      	ldr	r7, [sp, #0]
 8006ef8:	9e03      	ldr	r6, [sp, #12]
 8006efa:	e794      	b.n	8006e26 <_dtoa_r+0x40e>
 8006efc:	9901      	ldr	r1, [sp, #4]
 8006efe:	4b4c      	ldr	r3, [pc, #304]	; (8007030 <_dtoa_r+0x618>)
 8006f00:	4431      	add	r1, r6
 8006f02:	910d      	str	r1, [sp, #52]	; 0x34
 8006f04:	9908      	ldr	r1, [sp, #32]
 8006f06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006f0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f0e:	2900      	cmp	r1, #0
 8006f10:	d043      	beq.n	8006f9a <_dtoa_r+0x582>
 8006f12:	494d      	ldr	r1, [pc, #308]	; (8007048 <_dtoa_r+0x630>)
 8006f14:	2000      	movs	r0, #0
 8006f16:	f7f9 fca1 	bl	800085c <__aeabi_ddiv>
 8006f1a:	4652      	mov	r2, sl
 8006f1c:	465b      	mov	r3, fp
 8006f1e:	f7f9 f9bb 	bl	8000298 <__aeabi_dsub>
 8006f22:	9d01      	ldr	r5, [sp, #4]
 8006f24:	4682      	mov	sl, r0
 8006f26:	468b      	mov	fp, r1
 8006f28:	4649      	mov	r1, r9
 8006f2a:	4640      	mov	r0, r8
 8006f2c:	f7f9 fe1c 	bl	8000b68 <__aeabi_d2iz>
 8006f30:	4606      	mov	r6, r0
 8006f32:	f7f9 faff 	bl	8000534 <__aeabi_i2d>
 8006f36:	4602      	mov	r2, r0
 8006f38:	460b      	mov	r3, r1
 8006f3a:	4640      	mov	r0, r8
 8006f3c:	4649      	mov	r1, r9
 8006f3e:	f7f9 f9ab 	bl	8000298 <__aeabi_dsub>
 8006f42:	3630      	adds	r6, #48	; 0x30
 8006f44:	f805 6b01 	strb.w	r6, [r5], #1
 8006f48:	4652      	mov	r2, sl
 8006f4a:	465b      	mov	r3, fp
 8006f4c:	4680      	mov	r8, r0
 8006f4e:	4689      	mov	r9, r1
 8006f50:	f7f9 fdcc 	bl	8000aec <__aeabi_dcmplt>
 8006f54:	2800      	cmp	r0, #0
 8006f56:	d163      	bne.n	8007020 <_dtoa_r+0x608>
 8006f58:	4642      	mov	r2, r8
 8006f5a:	464b      	mov	r3, r9
 8006f5c:	4936      	ldr	r1, [pc, #216]	; (8007038 <_dtoa_r+0x620>)
 8006f5e:	2000      	movs	r0, #0
 8006f60:	f7f9 f99a 	bl	8000298 <__aeabi_dsub>
 8006f64:	4652      	mov	r2, sl
 8006f66:	465b      	mov	r3, fp
 8006f68:	f7f9 fdc0 	bl	8000aec <__aeabi_dcmplt>
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	f040 80b5 	bne.w	80070dc <_dtoa_r+0x6c4>
 8006f72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f74:	429d      	cmp	r5, r3
 8006f76:	d081      	beq.n	8006e7c <_dtoa_r+0x464>
 8006f78:	4b30      	ldr	r3, [pc, #192]	; (800703c <_dtoa_r+0x624>)
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	4650      	mov	r0, sl
 8006f7e:	4659      	mov	r1, fp
 8006f80:	f7f9 fb42 	bl	8000608 <__aeabi_dmul>
 8006f84:	4b2d      	ldr	r3, [pc, #180]	; (800703c <_dtoa_r+0x624>)
 8006f86:	4682      	mov	sl, r0
 8006f88:	468b      	mov	fp, r1
 8006f8a:	4640      	mov	r0, r8
 8006f8c:	4649      	mov	r1, r9
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f7f9 fb3a 	bl	8000608 <__aeabi_dmul>
 8006f94:	4680      	mov	r8, r0
 8006f96:	4689      	mov	r9, r1
 8006f98:	e7c6      	b.n	8006f28 <_dtoa_r+0x510>
 8006f9a:	4650      	mov	r0, sl
 8006f9c:	4659      	mov	r1, fp
 8006f9e:	f7f9 fb33 	bl	8000608 <__aeabi_dmul>
 8006fa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fa4:	9d01      	ldr	r5, [sp, #4]
 8006fa6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fa8:	4682      	mov	sl, r0
 8006faa:	468b      	mov	fp, r1
 8006fac:	4649      	mov	r1, r9
 8006fae:	4640      	mov	r0, r8
 8006fb0:	f7f9 fdda 	bl	8000b68 <__aeabi_d2iz>
 8006fb4:	4606      	mov	r6, r0
 8006fb6:	f7f9 fabd 	bl	8000534 <__aeabi_i2d>
 8006fba:	3630      	adds	r6, #48	; 0x30
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	4640      	mov	r0, r8
 8006fc2:	4649      	mov	r1, r9
 8006fc4:	f7f9 f968 	bl	8000298 <__aeabi_dsub>
 8006fc8:	f805 6b01 	strb.w	r6, [r5], #1
 8006fcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fce:	429d      	cmp	r5, r3
 8006fd0:	4680      	mov	r8, r0
 8006fd2:	4689      	mov	r9, r1
 8006fd4:	f04f 0200 	mov.w	r2, #0
 8006fd8:	d124      	bne.n	8007024 <_dtoa_r+0x60c>
 8006fda:	4b1b      	ldr	r3, [pc, #108]	; (8007048 <_dtoa_r+0x630>)
 8006fdc:	4650      	mov	r0, sl
 8006fde:	4659      	mov	r1, fp
 8006fe0:	f7f9 f95c 	bl	800029c <__adddf3>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	4640      	mov	r0, r8
 8006fea:	4649      	mov	r1, r9
 8006fec:	f7f9 fd9c 	bl	8000b28 <__aeabi_dcmpgt>
 8006ff0:	2800      	cmp	r0, #0
 8006ff2:	d173      	bne.n	80070dc <_dtoa_r+0x6c4>
 8006ff4:	4652      	mov	r2, sl
 8006ff6:	465b      	mov	r3, fp
 8006ff8:	4913      	ldr	r1, [pc, #76]	; (8007048 <_dtoa_r+0x630>)
 8006ffa:	2000      	movs	r0, #0
 8006ffc:	f7f9 f94c 	bl	8000298 <__aeabi_dsub>
 8007000:	4602      	mov	r2, r0
 8007002:	460b      	mov	r3, r1
 8007004:	4640      	mov	r0, r8
 8007006:	4649      	mov	r1, r9
 8007008:	f7f9 fd70 	bl	8000aec <__aeabi_dcmplt>
 800700c:	2800      	cmp	r0, #0
 800700e:	f43f af35 	beq.w	8006e7c <_dtoa_r+0x464>
 8007012:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007014:	1e6b      	subs	r3, r5, #1
 8007016:	930f      	str	r3, [sp, #60]	; 0x3c
 8007018:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800701c:	2b30      	cmp	r3, #48	; 0x30
 800701e:	d0f8      	beq.n	8007012 <_dtoa_r+0x5fa>
 8007020:	9700      	str	r7, [sp, #0]
 8007022:	e049      	b.n	80070b8 <_dtoa_r+0x6a0>
 8007024:	4b05      	ldr	r3, [pc, #20]	; (800703c <_dtoa_r+0x624>)
 8007026:	f7f9 faef 	bl	8000608 <__aeabi_dmul>
 800702a:	4680      	mov	r8, r0
 800702c:	4689      	mov	r9, r1
 800702e:	e7bd      	b.n	8006fac <_dtoa_r+0x594>
 8007030:	08008cd8 	.word	0x08008cd8
 8007034:	08008cb0 	.word	0x08008cb0
 8007038:	3ff00000 	.word	0x3ff00000
 800703c:	40240000 	.word	0x40240000
 8007040:	401c0000 	.word	0x401c0000
 8007044:	40140000 	.word	0x40140000
 8007048:	3fe00000 	.word	0x3fe00000
 800704c:	9d01      	ldr	r5, [sp, #4]
 800704e:	4656      	mov	r6, sl
 8007050:	465f      	mov	r7, fp
 8007052:	4642      	mov	r2, r8
 8007054:	464b      	mov	r3, r9
 8007056:	4630      	mov	r0, r6
 8007058:	4639      	mov	r1, r7
 800705a:	f7f9 fbff 	bl	800085c <__aeabi_ddiv>
 800705e:	f7f9 fd83 	bl	8000b68 <__aeabi_d2iz>
 8007062:	4682      	mov	sl, r0
 8007064:	f7f9 fa66 	bl	8000534 <__aeabi_i2d>
 8007068:	4642      	mov	r2, r8
 800706a:	464b      	mov	r3, r9
 800706c:	f7f9 facc 	bl	8000608 <__aeabi_dmul>
 8007070:	4602      	mov	r2, r0
 8007072:	460b      	mov	r3, r1
 8007074:	4630      	mov	r0, r6
 8007076:	4639      	mov	r1, r7
 8007078:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800707c:	f7f9 f90c 	bl	8000298 <__aeabi_dsub>
 8007080:	f805 6b01 	strb.w	r6, [r5], #1
 8007084:	9e01      	ldr	r6, [sp, #4]
 8007086:	9f03      	ldr	r7, [sp, #12]
 8007088:	1bae      	subs	r6, r5, r6
 800708a:	42b7      	cmp	r7, r6
 800708c:	4602      	mov	r2, r0
 800708e:	460b      	mov	r3, r1
 8007090:	d135      	bne.n	80070fe <_dtoa_r+0x6e6>
 8007092:	f7f9 f903 	bl	800029c <__adddf3>
 8007096:	4642      	mov	r2, r8
 8007098:	464b      	mov	r3, r9
 800709a:	4606      	mov	r6, r0
 800709c:	460f      	mov	r7, r1
 800709e:	f7f9 fd43 	bl	8000b28 <__aeabi_dcmpgt>
 80070a2:	b9d0      	cbnz	r0, 80070da <_dtoa_r+0x6c2>
 80070a4:	4642      	mov	r2, r8
 80070a6:	464b      	mov	r3, r9
 80070a8:	4630      	mov	r0, r6
 80070aa:	4639      	mov	r1, r7
 80070ac:	f7f9 fd14 	bl	8000ad8 <__aeabi_dcmpeq>
 80070b0:	b110      	cbz	r0, 80070b8 <_dtoa_r+0x6a0>
 80070b2:	f01a 0f01 	tst.w	sl, #1
 80070b6:	d110      	bne.n	80070da <_dtoa_r+0x6c2>
 80070b8:	4620      	mov	r0, r4
 80070ba:	ee18 1a10 	vmov	r1, s16
 80070be:	f000 fd2d 	bl	8007b1c <_Bfree>
 80070c2:	2300      	movs	r3, #0
 80070c4:	9800      	ldr	r0, [sp, #0]
 80070c6:	702b      	strb	r3, [r5, #0]
 80070c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070ca:	3001      	adds	r0, #1
 80070cc:	6018      	str	r0, [r3, #0]
 80070ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f43f acf1 	beq.w	8006ab8 <_dtoa_r+0xa0>
 80070d6:	601d      	str	r5, [r3, #0]
 80070d8:	e4ee      	b.n	8006ab8 <_dtoa_r+0xa0>
 80070da:	9f00      	ldr	r7, [sp, #0]
 80070dc:	462b      	mov	r3, r5
 80070de:	461d      	mov	r5, r3
 80070e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070e4:	2a39      	cmp	r2, #57	; 0x39
 80070e6:	d106      	bne.n	80070f6 <_dtoa_r+0x6de>
 80070e8:	9a01      	ldr	r2, [sp, #4]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d1f7      	bne.n	80070de <_dtoa_r+0x6c6>
 80070ee:	9901      	ldr	r1, [sp, #4]
 80070f0:	2230      	movs	r2, #48	; 0x30
 80070f2:	3701      	adds	r7, #1
 80070f4:	700a      	strb	r2, [r1, #0]
 80070f6:	781a      	ldrb	r2, [r3, #0]
 80070f8:	3201      	adds	r2, #1
 80070fa:	701a      	strb	r2, [r3, #0]
 80070fc:	e790      	b.n	8007020 <_dtoa_r+0x608>
 80070fe:	4ba6      	ldr	r3, [pc, #664]	; (8007398 <_dtoa_r+0x980>)
 8007100:	2200      	movs	r2, #0
 8007102:	f7f9 fa81 	bl	8000608 <__aeabi_dmul>
 8007106:	2200      	movs	r2, #0
 8007108:	2300      	movs	r3, #0
 800710a:	4606      	mov	r6, r0
 800710c:	460f      	mov	r7, r1
 800710e:	f7f9 fce3 	bl	8000ad8 <__aeabi_dcmpeq>
 8007112:	2800      	cmp	r0, #0
 8007114:	d09d      	beq.n	8007052 <_dtoa_r+0x63a>
 8007116:	e7cf      	b.n	80070b8 <_dtoa_r+0x6a0>
 8007118:	9a08      	ldr	r2, [sp, #32]
 800711a:	2a00      	cmp	r2, #0
 800711c:	f000 80d7 	beq.w	80072ce <_dtoa_r+0x8b6>
 8007120:	9a06      	ldr	r2, [sp, #24]
 8007122:	2a01      	cmp	r2, #1
 8007124:	f300 80ba 	bgt.w	800729c <_dtoa_r+0x884>
 8007128:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800712a:	2a00      	cmp	r2, #0
 800712c:	f000 80b2 	beq.w	8007294 <_dtoa_r+0x87c>
 8007130:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007134:	9e07      	ldr	r6, [sp, #28]
 8007136:	9d04      	ldr	r5, [sp, #16]
 8007138:	9a04      	ldr	r2, [sp, #16]
 800713a:	441a      	add	r2, r3
 800713c:	9204      	str	r2, [sp, #16]
 800713e:	9a05      	ldr	r2, [sp, #20]
 8007140:	2101      	movs	r1, #1
 8007142:	441a      	add	r2, r3
 8007144:	4620      	mov	r0, r4
 8007146:	9205      	str	r2, [sp, #20]
 8007148:	f000 fda0 	bl	8007c8c <__i2b>
 800714c:	4607      	mov	r7, r0
 800714e:	2d00      	cmp	r5, #0
 8007150:	dd0c      	ble.n	800716c <_dtoa_r+0x754>
 8007152:	9b05      	ldr	r3, [sp, #20]
 8007154:	2b00      	cmp	r3, #0
 8007156:	dd09      	ble.n	800716c <_dtoa_r+0x754>
 8007158:	42ab      	cmp	r3, r5
 800715a:	9a04      	ldr	r2, [sp, #16]
 800715c:	bfa8      	it	ge
 800715e:	462b      	movge	r3, r5
 8007160:	1ad2      	subs	r2, r2, r3
 8007162:	9204      	str	r2, [sp, #16]
 8007164:	9a05      	ldr	r2, [sp, #20]
 8007166:	1aed      	subs	r5, r5, r3
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	9305      	str	r3, [sp, #20]
 800716c:	9b07      	ldr	r3, [sp, #28]
 800716e:	b31b      	cbz	r3, 80071b8 <_dtoa_r+0x7a0>
 8007170:	9b08      	ldr	r3, [sp, #32]
 8007172:	2b00      	cmp	r3, #0
 8007174:	f000 80af 	beq.w	80072d6 <_dtoa_r+0x8be>
 8007178:	2e00      	cmp	r6, #0
 800717a:	dd13      	ble.n	80071a4 <_dtoa_r+0x78c>
 800717c:	4639      	mov	r1, r7
 800717e:	4632      	mov	r2, r6
 8007180:	4620      	mov	r0, r4
 8007182:	f000 fe43 	bl	8007e0c <__pow5mult>
 8007186:	ee18 2a10 	vmov	r2, s16
 800718a:	4601      	mov	r1, r0
 800718c:	4607      	mov	r7, r0
 800718e:	4620      	mov	r0, r4
 8007190:	f000 fd92 	bl	8007cb8 <__multiply>
 8007194:	ee18 1a10 	vmov	r1, s16
 8007198:	4680      	mov	r8, r0
 800719a:	4620      	mov	r0, r4
 800719c:	f000 fcbe 	bl	8007b1c <_Bfree>
 80071a0:	ee08 8a10 	vmov	s16, r8
 80071a4:	9b07      	ldr	r3, [sp, #28]
 80071a6:	1b9a      	subs	r2, r3, r6
 80071a8:	d006      	beq.n	80071b8 <_dtoa_r+0x7a0>
 80071aa:	ee18 1a10 	vmov	r1, s16
 80071ae:	4620      	mov	r0, r4
 80071b0:	f000 fe2c 	bl	8007e0c <__pow5mult>
 80071b4:	ee08 0a10 	vmov	s16, r0
 80071b8:	2101      	movs	r1, #1
 80071ba:	4620      	mov	r0, r4
 80071bc:	f000 fd66 	bl	8007c8c <__i2b>
 80071c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	4606      	mov	r6, r0
 80071c6:	f340 8088 	ble.w	80072da <_dtoa_r+0x8c2>
 80071ca:	461a      	mov	r2, r3
 80071cc:	4601      	mov	r1, r0
 80071ce:	4620      	mov	r0, r4
 80071d0:	f000 fe1c 	bl	8007e0c <__pow5mult>
 80071d4:	9b06      	ldr	r3, [sp, #24]
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	4606      	mov	r6, r0
 80071da:	f340 8081 	ble.w	80072e0 <_dtoa_r+0x8c8>
 80071de:	f04f 0800 	mov.w	r8, #0
 80071e2:	6933      	ldr	r3, [r6, #16]
 80071e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80071e8:	6918      	ldr	r0, [r3, #16]
 80071ea:	f000 fcff 	bl	8007bec <__hi0bits>
 80071ee:	f1c0 0020 	rsb	r0, r0, #32
 80071f2:	9b05      	ldr	r3, [sp, #20]
 80071f4:	4418      	add	r0, r3
 80071f6:	f010 001f 	ands.w	r0, r0, #31
 80071fa:	f000 8092 	beq.w	8007322 <_dtoa_r+0x90a>
 80071fe:	f1c0 0320 	rsb	r3, r0, #32
 8007202:	2b04      	cmp	r3, #4
 8007204:	f340 808a 	ble.w	800731c <_dtoa_r+0x904>
 8007208:	f1c0 001c 	rsb	r0, r0, #28
 800720c:	9b04      	ldr	r3, [sp, #16]
 800720e:	4403      	add	r3, r0
 8007210:	9304      	str	r3, [sp, #16]
 8007212:	9b05      	ldr	r3, [sp, #20]
 8007214:	4403      	add	r3, r0
 8007216:	4405      	add	r5, r0
 8007218:	9305      	str	r3, [sp, #20]
 800721a:	9b04      	ldr	r3, [sp, #16]
 800721c:	2b00      	cmp	r3, #0
 800721e:	dd07      	ble.n	8007230 <_dtoa_r+0x818>
 8007220:	ee18 1a10 	vmov	r1, s16
 8007224:	461a      	mov	r2, r3
 8007226:	4620      	mov	r0, r4
 8007228:	f000 fe4a 	bl	8007ec0 <__lshift>
 800722c:	ee08 0a10 	vmov	s16, r0
 8007230:	9b05      	ldr	r3, [sp, #20]
 8007232:	2b00      	cmp	r3, #0
 8007234:	dd05      	ble.n	8007242 <_dtoa_r+0x82a>
 8007236:	4631      	mov	r1, r6
 8007238:	461a      	mov	r2, r3
 800723a:	4620      	mov	r0, r4
 800723c:	f000 fe40 	bl	8007ec0 <__lshift>
 8007240:	4606      	mov	r6, r0
 8007242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007244:	2b00      	cmp	r3, #0
 8007246:	d06e      	beq.n	8007326 <_dtoa_r+0x90e>
 8007248:	ee18 0a10 	vmov	r0, s16
 800724c:	4631      	mov	r1, r6
 800724e:	f000 fea7 	bl	8007fa0 <__mcmp>
 8007252:	2800      	cmp	r0, #0
 8007254:	da67      	bge.n	8007326 <_dtoa_r+0x90e>
 8007256:	9b00      	ldr	r3, [sp, #0]
 8007258:	3b01      	subs	r3, #1
 800725a:	ee18 1a10 	vmov	r1, s16
 800725e:	9300      	str	r3, [sp, #0]
 8007260:	220a      	movs	r2, #10
 8007262:	2300      	movs	r3, #0
 8007264:	4620      	mov	r0, r4
 8007266:	f000 fc7b 	bl	8007b60 <__multadd>
 800726a:	9b08      	ldr	r3, [sp, #32]
 800726c:	ee08 0a10 	vmov	s16, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	f000 81b1 	beq.w	80075d8 <_dtoa_r+0xbc0>
 8007276:	2300      	movs	r3, #0
 8007278:	4639      	mov	r1, r7
 800727a:	220a      	movs	r2, #10
 800727c:	4620      	mov	r0, r4
 800727e:	f000 fc6f 	bl	8007b60 <__multadd>
 8007282:	9b02      	ldr	r3, [sp, #8]
 8007284:	2b00      	cmp	r3, #0
 8007286:	4607      	mov	r7, r0
 8007288:	f300 808e 	bgt.w	80073a8 <_dtoa_r+0x990>
 800728c:	9b06      	ldr	r3, [sp, #24]
 800728e:	2b02      	cmp	r3, #2
 8007290:	dc51      	bgt.n	8007336 <_dtoa_r+0x91e>
 8007292:	e089      	b.n	80073a8 <_dtoa_r+0x990>
 8007294:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007296:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800729a:	e74b      	b.n	8007134 <_dtoa_r+0x71c>
 800729c:	9b03      	ldr	r3, [sp, #12]
 800729e:	1e5e      	subs	r6, r3, #1
 80072a0:	9b07      	ldr	r3, [sp, #28]
 80072a2:	42b3      	cmp	r3, r6
 80072a4:	bfbf      	itttt	lt
 80072a6:	9b07      	ldrlt	r3, [sp, #28]
 80072a8:	9607      	strlt	r6, [sp, #28]
 80072aa:	1af2      	sublt	r2, r6, r3
 80072ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80072ae:	bfb6      	itet	lt
 80072b0:	189b      	addlt	r3, r3, r2
 80072b2:	1b9e      	subge	r6, r3, r6
 80072b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80072b6:	9b03      	ldr	r3, [sp, #12]
 80072b8:	bfb8      	it	lt
 80072ba:	2600      	movlt	r6, #0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	bfb7      	itett	lt
 80072c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80072c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80072c8:	1a9d      	sublt	r5, r3, r2
 80072ca:	2300      	movlt	r3, #0
 80072cc:	e734      	b.n	8007138 <_dtoa_r+0x720>
 80072ce:	9e07      	ldr	r6, [sp, #28]
 80072d0:	9d04      	ldr	r5, [sp, #16]
 80072d2:	9f08      	ldr	r7, [sp, #32]
 80072d4:	e73b      	b.n	800714e <_dtoa_r+0x736>
 80072d6:	9a07      	ldr	r2, [sp, #28]
 80072d8:	e767      	b.n	80071aa <_dtoa_r+0x792>
 80072da:	9b06      	ldr	r3, [sp, #24]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	dc18      	bgt.n	8007312 <_dtoa_r+0x8fa>
 80072e0:	f1ba 0f00 	cmp.w	sl, #0
 80072e4:	d115      	bne.n	8007312 <_dtoa_r+0x8fa>
 80072e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80072ea:	b993      	cbnz	r3, 8007312 <_dtoa_r+0x8fa>
 80072ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80072f0:	0d1b      	lsrs	r3, r3, #20
 80072f2:	051b      	lsls	r3, r3, #20
 80072f4:	b183      	cbz	r3, 8007318 <_dtoa_r+0x900>
 80072f6:	9b04      	ldr	r3, [sp, #16]
 80072f8:	3301      	adds	r3, #1
 80072fa:	9304      	str	r3, [sp, #16]
 80072fc:	9b05      	ldr	r3, [sp, #20]
 80072fe:	3301      	adds	r3, #1
 8007300:	9305      	str	r3, [sp, #20]
 8007302:	f04f 0801 	mov.w	r8, #1
 8007306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007308:	2b00      	cmp	r3, #0
 800730a:	f47f af6a 	bne.w	80071e2 <_dtoa_r+0x7ca>
 800730e:	2001      	movs	r0, #1
 8007310:	e76f      	b.n	80071f2 <_dtoa_r+0x7da>
 8007312:	f04f 0800 	mov.w	r8, #0
 8007316:	e7f6      	b.n	8007306 <_dtoa_r+0x8ee>
 8007318:	4698      	mov	r8, r3
 800731a:	e7f4      	b.n	8007306 <_dtoa_r+0x8ee>
 800731c:	f43f af7d 	beq.w	800721a <_dtoa_r+0x802>
 8007320:	4618      	mov	r0, r3
 8007322:	301c      	adds	r0, #28
 8007324:	e772      	b.n	800720c <_dtoa_r+0x7f4>
 8007326:	9b03      	ldr	r3, [sp, #12]
 8007328:	2b00      	cmp	r3, #0
 800732a:	dc37      	bgt.n	800739c <_dtoa_r+0x984>
 800732c:	9b06      	ldr	r3, [sp, #24]
 800732e:	2b02      	cmp	r3, #2
 8007330:	dd34      	ble.n	800739c <_dtoa_r+0x984>
 8007332:	9b03      	ldr	r3, [sp, #12]
 8007334:	9302      	str	r3, [sp, #8]
 8007336:	9b02      	ldr	r3, [sp, #8]
 8007338:	b96b      	cbnz	r3, 8007356 <_dtoa_r+0x93e>
 800733a:	4631      	mov	r1, r6
 800733c:	2205      	movs	r2, #5
 800733e:	4620      	mov	r0, r4
 8007340:	f000 fc0e 	bl	8007b60 <__multadd>
 8007344:	4601      	mov	r1, r0
 8007346:	4606      	mov	r6, r0
 8007348:	ee18 0a10 	vmov	r0, s16
 800734c:	f000 fe28 	bl	8007fa0 <__mcmp>
 8007350:	2800      	cmp	r0, #0
 8007352:	f73f adbb 	bgt.w	8006ecc <_dtoa_r+0x4b4>
 8007356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007358:	9d01      	ldr	r5, [sp, #4]
 800735a:	43db      	mvns	r3, r3
 800735c:	9300      	str	r3, [sp, #0]
 800735e:	f04f 0800 	mov.w	r8, #0
 8007362:	4631      	mov	r1, r6
 8007364:	4620      	mov	r0, r4
 8007366:	f000 fbd9 	bl	8007b1c <_Bfree>
 800736a:	2f00      	cmp	r7, #0
 800736c:	f43f aea4 	beq.w	80070b8 <_dtoa_r+0x6a0>
 8007370:	f1b8 0f00 	cmp.w	r8, #0
 8007374:	d005      	beq.n	8007382 <_dtoa_r+0x96a>
 8007376:	45b8      	cmp	r8, r7
 8007378:	d003      	beq.n	8007382 <_dtoa_r+0x96a>
 800737a:	4641      	mov	r1, r8
 800737c:	4620      	mov	r0, r4
 800737e:	f000 fbcd 	bl	8007b1c <_Bfree>
 8007382:	4639      	mov	r1, r7
 8007384:	4620      	mov	r0, r4
 8007386:	f000 fbc9 	bl	8007b1c <_Bfree>
 800738a:	e695      	b.n	80070b8 <_dtoa_r+0x6a0>
 800738c:	2600      	movs	r6, #0
 800738e:	4637      	mov	r7, r6
 8007390:	e7e1      	b.n	8007356 <_dtoa_r+0x93e>
 8007392:	9700      	str	r7, [sp, #0]
 8007394:	4637      	mov	r7, r6
 8007396:	e599      	b.n	8006ecc <_dtoa_r+0x4b4>
 8007398:	40240000 	.word	0x40240000
 800739c:	9b08      	ldr	r3, [sp, #32]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f000 80ca 	beq.w	8007538 <_dtoa_r+0xb20>
 80073a4:	9b03      	ldr	r3, [sp, #12]
 80073a6:	9302      	str	r3, [sp, #8]
 80073a8:	2d00      	cmp	r5, #0
 80073aa:	dd05      	ble.n	80073b8 <_dtoa_r+0x9a0>
 80073ac:	4639      	mov	r1, r7
 80073ae:	462a      	mov	r2, r5
 80073b0:	4620      	mov	r0, r4
 80073b2:	f000 fd85 	bl	8007ec0 <__lshift>
 80073b6:	4607      	mov	r7, r0
 80073b8:	f1b8 0f00 	cmp.w	r8, #0
 80073bc:	d05b      	beq.n	8007476 <_dtoa_r+0xa5e>
 80073be:	6879      	ldr	r1, [r7, #4]
 80073c0:	4620      	mov	r0, r4
 80073c2:	f000 fb6b 	bl	8007a9c <_Balloc>
 80073c6:	4605      	mov	r5, r0
 80073c8:	b928      	cbnz	r0, 80073d6 <_dtoa_r+0x9be>
 80073ca:	4b87      	ldr	r3, [pc, #540]	; (80075e8 <_dtoa_r+0xbd0>)
 80073cc:	4602      	mov	r2, r0
 80073ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80073d2:	f7ff bb3b 	b.w	8006a4c <_dtoa_r+0x34>
 80073d6:	693a      	ldr	r2, [r7, #16]
 80073d8:	3202      	adds	r2, #2
 80073da:	0092      	lsls	r2, r2, #2
 80073dc:	f107 010c 	add.w	r1, r7, #12
 80073e0:	300c      	adds	r0, #12
 80073e2:	f000 fb33 	bl	8007a4c <memcpy>
 80073e6:	2201      	movs	r2, #1
 80073e8:	4629      	mov	r1, r5
 80073ea:	4620      	mov	r0, r4
 80073ec:	f000 fd68 	bl	8007ec0 <__lshift>
 80073f0:	9b01      	ldr	r3, [sp, #4]
 80073f2:	f103 0901 	add.w	r9, r3, #1
 80073f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80073fa:	4413      	add	r3, r2
 80073fc:	9305      	str	r3, [sp, #20]
 80073fe:	f00a 0301 	and.w	r3, sl, #1
 8007402:	46b8      	mov	r8, r7
 8007404:	9304      	str	r3, [sp, #16]
 8007406:	4607      	mov	r7, r0
 8007408:	4631      	mov	r1, r6
 800740a:	ee18 0a10 	vmov	r0, s16
 800740e:	f7ff fa78 	bl	8006902 <quorem>
 8007412:	4641      	mov	r1, r8
 8007414:	9002      	str	r0, [sp, #8]
 8007416:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800741a:	ee18 0a10 	vmov	r0, s16
 800741e:	f000 fdbf 	bl	8007fa0 <__mcmp>
 8007422:	463a      	mov	r2, r7
 8007424:	9003      	str	r0, [sp, #12]
 8007426:	4631      	mov	r1, r6
 8007428:	4620      	mov	r0, r4
 800742a:	f000 fdd5 	bl	8007fd8 <__mdiff>
 800742e:	68c2      	ldr	r2, [r0, #12]
 8007430:	f109 3bff 	add.w	fp, r9, #4294967295
 8007434:	4605      	mov	r5, r0
 8007436:	bb02      	cbnz	r2, 800747a <_dtoa_r+0xa62>
 8007438:	4601      	mov	r1, r0
 800743a:	ee18 0a10 	vmov	r0, s16
 800743e:	f000 fdaf 	bl	8007fa0 <__mcmp>
 8007442:	4602      	mov	r2, r0
 8007444:	4629      	mov	r1, r5
 8007446:	4620      	mov	r0, r4
 8007448:	9207      	str	r2, [sp, #28]
 800744a:	f000 fb67 	bl	8007b1c <_Bfree>
 800744e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007452:	ea43 0102 	orr.w	r1, r3, r2
 8007456:	9b04      	ldr	r3, [sp, #16]
 8007458:	430b      	orrs	r3, r1
 800745a:	464d      	mov	r5, r9
 800745c:	d10f      	bne.n	800747e <_dtoa_r+0xa66>
 800745e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007462:	d02a      	beq.n	80074ba <_dtoa_r+0xaa2>
 8007464:	9b03      	ldr	r3, [sp, #12]
 8007466:	2b00      	cmp	r3, #0
 8007468:	dd02      	ble.n	8007470 <_dtoa_r+0xa58>
 800746a:	9b02      	ldr	r3, [sp, #8]
 800746c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007470:	f88b a000 	strb.w	sl, [fp]
 8007474:	e775      	b.n	8007362 <_dtoa_r+0x94a>
 8007476:	4638      	mov	r0, r7
 8007478:	e7ba      	b.n	80073f0 <_dtoa_r+0x9d8>
 800747a:	2201      	movs	r2, #1
 800747c:	e7e2      	b.n	8007444 <_dtoa_r+0xa2c>
 800747e:	9b03      	ldr	r3, [sp, #12]
 8007480:	2b00      	cmp	r3, #0
 8007482:	db04      	blt.n	800748e <_dtoa_r+0xa76>
 8007484:	9906      	ldr	r1, [sp, #24]
 8007486:	430b      	orrs	r3, r1
 8007488:	9904      	ldr	r1, [sp, #16]
 800748a:	430b      	orrs	r3, r1
 800748c:	d122      	bne.n	80074d4 <_dtoa_r+0xabc>
 800748e:	2a00      	cmp	r2, #0
 8007490:	ddee      	ble.n	8007470 <_dtoa_r+0xa58>
 8007492:	ee18 1a10 	vmov	r1, s16
 8007496:	2201      	movs	r2, #1
 8007498:	4620      	mov	r0, r4
 800749a:	f000 fd11 	bl	8007ec0 <__lshift>
 800749e:	4631      	mov	r1, r6
 80074a0:	ee08 0a10 	vmov	s16, r0
 80074a4:	f000 fd7c 	bl	8007fa0 <__mcmp>
 80074a8:	2800      	cmp	r0, #0
 80074aa:	dc03      	bgt.n	80074b4 <_dtoa_r+0xa9c>
 80074ac:	d1e0      	bne.n	8007470 <_dtoa_r+0xa58>
 80074ae:	f01a 0f01 	tst.w	sl, #1
 80074b2:	d0dd      	beq.n	8007470 <_dtoa_r+0xa58>
 80074b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80074b8:	d1d7      	bne.n	800746a <_dtoa_r+0xa52>
 80074ba:	2339      	movs	r3, #57	; 0x39
 80074bc:	f88b 3000 	strb.w	r3, [fp]
 80074c0:	462b      	mov	r3, r5
 80074c2:	461d      	mov	r5, r3
 80074c4:	3b01      	subs	r3, #1
 80074c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80074ca:	2a39      	cmp	r2, #57	; 0x39
 80074cc:	d071      	beq.n	80075b2 <_dtoa_r+0xb9a>
 80074ce:	3201      	adds	r2, #1
 80074d0:	701a      	strb	r2, [r3, #0]
 80074d2:	e746      	b.n	8007362 <_dtoa_r+0x94a>
 80074d4:	2a00      	cmp	r2, #0
 80074d6:	dd07      	ble.n	80074e8 <_dtoa_r+0xad0>
 80074d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80074dc:	d0ed      	beq.n	80074ba <_dtoa_r+0xaa2>
 80074de:	f10a 0301 	add.w	r3, sl, #1
 80074e2:	f88b 3000 	strb.w	r3, [fp]
 80074e6:	e73c      	b.n	8007362 <_dtoa_r+0x94a>
 80074e8:	9b05      	ldr	r3, [sp, #20]
 80074ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 80074ee:	4599      	cmp	r9, r3
 80074f0:	d047      	beq.n	8007582 <_dtoa_r+0xb6a>
 80074f2:	ee18 1a10 	vmov	r1, s16
 80074f6:	2300      	movs	r3, #0
 80074f8:	220a      	movs	r2, #10
 80074fa:	4620      	mov	r0, r4
 80074fc:	f000 fb30 	bl	8007b60 <__multadd>
 8007500:	45b8      	cmp	r8, r7
 8007502:	ee08 0a10 	vmov	s16, r0
 8007506:	f04f 0300 	mov.w	r3, #0
 800750a:	f04f 020a 	mov.w	r2, #10
 800750e:	4641      	mov	r1, r8
 8007510:	4620      	mov	r0, r4
 8007512:	d106      	bne.n	8007522 <_dtoa_r+0xb0a>
 8007514:	f000 fb24 	bl	8007b60 <__multadd>
 8007518:	4680      	mov	r8, r0
 800751a:	4607      	mov	r7, r0
 800751c:	f109 0901 	add.w	r9, r9, #1
 8007520:	e772      	b.n	8007408 <_dtoa_r+0x9f0>
 8007522:	f000 fb1d 	bl	8007b60 <__multadd>
 8007526:	4639      	mov	r1, r7
 8007528:	4680      	mov	r8, r0
 800752a:	2300      	movs	r3, #0
 800752c:	220a      	movs	r2, #10
 800752e:	4620      	mov	r0, r4
 8007530:	f000 fb16 	bl	8007b60 <__multadd>
 8007534:	4607      	mov	r7, r0
 8007536:	e7f1      	b.n	800751c <_dtoa_r+0xb04>
 8007538:	9b03      	ldr	r3, [sp, #12]
 800753a:	9302      	str	r3, [sp, #8]
 800753c:	9d01      	ldr	r5, [sp, #4]
 800753e:	ee18 0a10 	vmov	r0, s16
 8007542:	4631      	mov	r1, r6
 8007544:	f7ff f9dd 	bl	8006902 <quorem>
 8007548:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800754c:	9b01      	ldr	r3, [sp, #4]
 800754e:	f805 ab01 	strb.w	sl, [r5], #1
 8007552:	1aea      	subs	r2, r5, r3
 8007554:	9b02      	ldr	r3, [sp, #8]
 8007556:	4293      	cmp	r3, r2
 8007558:	dd09      	ble.n	800756e <_dtoa_r+0xb56>
 800755a:	ee18 1a10 	vmov	r1, s16
 800755e:	2300      	movs	r3, #0
 8007560:	220a      	movs	r2, #10
 8007562:	4620      	mov	r0, r4
 8007564:	f000 fafc 	bl	8007b60 <__multadd>
 8007568:	ee08 0a10 	vmov	s16, r0
 800756c:	e7e7      	b.n	800753e <_dtoa_r+0xb26>
 800756e:	9b02      	ldr	r3, [sp, #8]
 8007570:	2b00      	cmp	r3, #0
 8007572:	bfc8      	it	gt
 8007574:	461d      	movgt	r5, r3
 8007576:	9b01      	ldr	r3, [sp, #4]
 8007578:	bfd8      	it	le
 800757a:	2501      	movle	r5, #1
 800757c:	441d      	add	r5, r3
 800757e:	f04f 0800 	mov.w	r8, #0
 8007582:	ee18 1a10 	vmov	r1, s16
 8007586:	2201      	movs	r2, #1
 8007588:	4620      	mov	r0, r4
 800758a:	f000 fc99 	bl	8007ec0 <__lshift>
 800758e:	4631      	mov	r1, r6
 8007590:	ee08 0a10 	vmov	s16, r0
 8007594:	f000 fd04 	bl	8007fa0 <__mcmp>
 8007598:	2800      	cmp	r0, #0
 800759a:	dc91      	bgt.n	80074c0 <_dtoa_r+0xaa8>
 800759c:	d102      	bne.n	80075a4 <_dtoa_r+0xb8c>
 800759e:	f01a 0f01 	tst.w	sl, #1
 80075a2:	d18d      	bne.n	80074c0 <_dtoa_r+0xaa8>
 80075a4:	462b      	mov	r3, r5
 80075a6:	461d      	mov	r5, r3
 80075a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075ac:	2a30      	cmp	r2, #48	; 0x30
 80075ae:	d0fa      	beq.n	80075a6 <_dtoa_r+0xb8e>
 80075b0:	e6d7      	b.n	8007362 <_dtoa_r+0x94a>
 80075b2:	9a01      	ldr	r2, [sp, #4]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d184      	bne.n	80074c2 <_dtoa_r+0xaaa>
 80075b8:	9b00      	ldr	r3, [sp, #0]
 80075ba:	3301      	adds	r3, #1
 80075bc:	9300      	str	r3, [sp, #0]
 80075be:	2331      	movs	r3, #49	; 0x31
 80075c0:	7013      	strb	r3, [r2, #0]
 80075c2:	e6ce      	b.n	8007362 <_dtoa_r+0x94a>
 80075c4:	4b09      	ldr	r3, [pc, #36]	; (80075ec <_dtoa_r+0xbd4>)
 80075c6:	f7ff ba95 	b.w	8006af4 <_dtoa_r+0xdc>
 80075ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	f47f aa6e 	bne.w	8006aae <_dtoa_r+0x96>
 80075d2:	4b07      	ldr	r3, [pc, #28]	; (80075f0 <_dtoa_r+0xbd8>)
 80075d4:	f7ff ba8e 	b.w	8006af4 <_dtoa_r+0xdc>
 80075d8:	9b02      	ldr	r3, [sp, #8]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	dcae      	bgt.n	800753c <_dtoa_r+0xb24>
 80075de:	9b06      	ldr	r3, [sp, #24]
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	f73f aea8 	bgt.w	8007336 <_dtoa_r+0x91e>
 80075e6:	e7a9      	b.n	800753c <_dtoa_r+0xb24>
 80075e8:	08008be0 	.word	0x08008be0
 80075ec:	08008b3d 	.word	0x08008b3d
 80075f0:	08008b61 	.word	0x08008b61

080075f4 <__sflush_r>:
 80075f4:	898a      	ldrh	r2, [r1, #12]
 80075f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075fa:	4605      	mov	r5, r0
 80075fc:	0710      	lsls	r0, r2, #28
 80075fe:	460c      	mov	r4, r1
 8007600:	d458      	bmi.n	80076b4 <__sflush_r+0xc0>
 8007602:	684b      	ldr	r3, [r1, #4]
 8007604:	2b00      	cmp	r3, #0
 8007606:	dc05      	bgt.n	8007614 <__sflush_r+0x20>
 8007608:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800760a:	2b00      	cmp	r3, #0
 800760c:	dc02      	bgt.n	8007614 <__sflush_r+0x20>
 800760e:	2000      	movs	r0, #0
 8007610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007614:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007616:	2e00      	cmp	r6, #0
 8007618:	d0f9      	beq.n	800760e <__sflush_r+0x1a>
 800761a:	2300      	movs	r3, #0
 800761c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007620:	682f      	ldr	r7, [r5, #0]
 8007622:	602b      	str	r3, [r5, #0]
 8007624:	d032      	beq.n	800768c <__sflush_r+0x98>
 8007626:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007628:	89a3      	ldrh	r3, [r4, #12]
 800762a:	075a      	lsls	r2, r3, #29
 800762c:	d505      	bpl.n	800763a <__sflush_r+0x46>
 800762e:	6863      	ldr	r3, [r4, #4]
 8007630:	1ac0      	subs	r0, r0, r3
 8007632:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007634:	b10b      	cbz	r3, 800763a <__sflush_r+0x46>
 8007636:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007638:	1ac0      	subs	r0, r0, r3
 800763a:	2300      	movs	r3, #0
 800763c:	4602      	mov	r2, r0
 800763e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007640:	6a21      	ldr	r1, [r4, #32]
 8007642:	4628      	mov	r0, r5
 8007644:	47b0      	blx	r6
 8007646:	1c43      	adds	r3, r0, #1
 8007648:	89a3      	ldrh	r3, [r4, #12]
 800764a:	d106      	bne.n	800765a <__sflush_r+0x66>
 800764c:	6829      	ldr	r1, [r5, #0]
 800764e:	291d      	cmp	r1, #29
 8007650:	d82c      	bhi.n	80076ac <__sflush_r+0xb8>
 8007652:	4a2a      	ldr	r2, [pc, #168]	; (80076fc <__sflush_r+0x108>)
 8007654:	40ca      	lsrs	r2, r1
 8007656:	07d6      	lsls	r6, r2, #31
 8007658:	d528      	bpl.n	80076ac <__sflush_r+0xb8>
 800765a:	2200      	movs	r2, #0
 800765c:	6062      	str	r2, [r4, #4]
 800765e:	04d9      	lsls	r1, r3, #19
 8007660:	6922      	ldr	r2, [r4, #16]
 8007662:	6022      	str	r2, [r4, #0]
 8007664:	d504      	bpl.n	8007670 <__sflush_r+0x7c>
 8007666:	1c42      	adds	r2, r0, #1
 8007668:	d101      	bne.n	800766e <__sflush_r+0x7a>
 800766a:	682b      	ldr	r3, [r5, #0]
 800766c:	b903      	cbnz	r3, 8007670 <__sflush_r+0x7c>
 800766e:	6560      	str	r0, [r4, #84]	; 0x54
 8007670:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007672:	602f      	str	r7, [r5, #0]
 8007674:	2900      	cmp	r1, #0
 8007676:	d0ca      	beq.n	800760e <__sflush_r+0x1a>
 8007678:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800767c:	4299      	cmp	r1, r3
 800767e:	d002      	beq.n	8007686 <__sflush_r+0x92>
 8007680:	4628      	mov	r0, r5
 8007682:	f000 fda5 	bl	80081d0 <_free_r>
 8007686:	2000      	movs	r0, #0
 8007688:	6360      	str	r0, [r4, #52]	; 0x34
 800768a:	e7c1      	b.n	8007610 <__sflush_r+0x1c>
 800768c:	6a21      	ldr	r1, [r4, #32]
 800768e:	2301      	movs	r3, #1
 8007690:	4628      	mov	r0, r5
 8007692:	47b0      	blx	r6
 8007694:	1c41      	adds	r1, r0, #1
 8007696:	d1c7      	bne.n	8007628 <__sflush_r+0x34>
 8007698:	682b      	ldr	r3, [r5, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d0c4      	beq.n	8007628 <__sflush_r+0x34>
 800769e:	2b1d      	cmp	r3, #29
 80076a0:	d001      	beq.n	80076a6 <__sflush_r+0xb2>
 80076a2:	2b16      	cmp	r3, #22
 80076a4:	d101      	bne.n	80076aa <__sflush_r+0xb6>
 80076a6:	602f      	str	r7, [r5, #0]
 80076a8:	e7b1      	b.n	800760e <__sflush_r+0x1a>
 80076aa:	89a3      	ldrh	r3, [r4, #12]
 80076ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076b0:	81a3      	strh	r3, [r4, #12]
 80076b2:	e7ad      	b.n	8007610 <__sflush_r+0x1c>
 80076b4:	690f      	ldr	r7, [r1, #16]
 80076b6:	2f00      	cmp	r7, #0
 80076b8:	d0a9      	beq.n	800760e <__sflush_r+0x1a>
 80076ba:	0793      	lsls	r3, r2, #30
 80076bc:	680e      	ldr	r6, [r1, #0]
 80076be:	bf08      	it	eq
 80076c0:	694b      	ldreq	r3, [r1, #20]
 80076c2:	600f      	str	r7, [r1, #0]
 80076c4:	bf18      	it	ne
 80076c6:	2300      	movne	r3, #0
 80076c8:	eba6 0807 	sub.w	r8, r6, r7
 80076cc:	608b      	str	r3, [r1, #8]
 80076ce:	f1b8 0f00 	cmp.w	r8, #0
 80076d2:	dd9c      	ble.n	800760e <__sflush_r+0x1a>
 80076d4:	6a21      	ldr	r1, [r4, #32]
 80076d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80076d8:	4643      	mov	r3, r8
 80076da:	463a      	mov	r2, r7
 80076dc:	4628      	mov	r0, r5
 80076de:	47b0      	blx	r6
 80076e0:	2800      	cmp	r0, #0
 80076e2:	dc06      	bgt.n	80076f2 <__sflush_r+0xfe>
 80076e4:	89a3      	ldrh	r3, [r4, #12]
 80076e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076ea:	81a3      	strh	r3, [r4, #12]
 80076ec:	f04f 30ff 	mov.w	r0, #4294967295
 80076f0:	e78e      	b.n	8007610 <__sflush_r+0x1c>
 80076f2:	4407      	add	r7, r0
 80076f4:	eba8 0800 	sub.w	r8, r8, r0
 80076f8:	e7e9      	b.n	80076ce <__sflush_r+0xda>
 80076fa:	bf00      	nop
 80076fc:	20400001 	.word	0x20400001

08007700 <_fflush_r>:
 8007700:	b538      	push	{r3, r4, r5, lr}
 8007702:	690b      	ldr	r3, [r1, #16]
 8007704:	4605      	mov	r5, r0
 8007706:	460c      	mov	r4, r1
 8007708:	b913      	cbnz	r3, 8007710 <_fflush_r+0x10>
 800770a:	2500      	movs	r5, #0
 800770c:	4628      	mov	r0, r5
 800770e:	bd38      	pop	{r3, r4, r5, pc}
 8007710:	b118      	cbz	r0, 800771a <_fflush_r+0x1a>
 8007712:	6983      	ldr	r3, [r0, #24]
 8007714:	b90b      	cbnz	r3, 800771a <_fflush_r+0x1a>
 8007716:	f000 f887 	bl	8007828 <__sinit>
 800771a:	4b14      	ldr	r3, [pc, #80]	; (800776c <_fflush_r+0x6c>)
 800771c:	429c      	cmp	r4, r3
 800771e:	d11b      	bne.n	8007758 <_fflush_r+0x58>
 8007720:	686c      	ldr	r4, [r5, #4]
 8007722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d0ef      	beq.n	800770a <_fflush_r+0xa>
 800772a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800772c:	07d0      	lsls	r0, r2, #31
 800772e:	d404      	bmi.n	800773a <_fflush_r+0x3a>
 8007730:	0599      	lsls	r1, r3, #22
 8007732:	d402      	bmi.n	800773a <_fflush_r+0x3a>
 8007734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007736:	f000 f91a 	bl	800796e <__retarget_lock_acquire_recursive>
 800773a:	4628      	mov	r0, r5
 800773c:	4621      	mov	r1, r4
 800773e:	f7ff ff59 	bl	80075f4 <__sflush_r>
 8007742:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007744:	07da      	lsls	r2, r3, #31
 8007746:	4605      	mov	r5, r0
 8007748:	d4e0      	bmi.n	800770c <_fflush_r+0xc>
 800774a:	89a3      	ldrh	r3, [r4, #12]
 800774c:	059b      	lsls	r3, r3, #22
 800774e:	d4dd      	bmi.n	800770c <_fflush_r+0xc>
 8007750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007752:	f000 f90d 	bl	8007970 <__retarget_lock_release_recursive>
 8007756:	e7d9      	b.n	800770c <_fflush_r+0xc>
 8007758:	4b05      	ldr	r3, [pc, #20]	; (8007770 <_fflush_r+0x70>)
 800775a:	429c      	cmp	r4, r3
 800775c:	d101      	bne.n	8007762 <_fflush_r+0x62>
 800775e:	68ac      	ldr	r4, [r5, #8]
 8007760:	e7df      	b.n	8007722 <_fflush_r+0x22>
 8007762:	4b04      	ldr	r3, [pc, #16]	; (8007774 <_fflush_r+0x74>)
 8007764:	429c      	cmp	r4, r3
 8007766:	bf08      	it	eq
 8007768:	68ec      	ldreq	r4, [r5, #12]
 800776a:	e7da      	b.n	8007722 <_fflush_r+0x22>
 800776c:	08008c14 	.word	0x08008c14
 8007770:	08008c34 	.word	0x08008c34
 8007774:	08008bf4 	.word	0x08008bf4

08007778 <std>:
 8007778:	2300      	movs	r3, #0
 800777a:	b510      	push	{r4, lr}
 800777c:	4604      	mov	r4, r0
 800777e:	e9c0 3300 	strd	r3, r3, [r0]
 8007782:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007786:	6083      	str	r3, [r0, #8]
 8007788:	8181      	strh	r1, [r0, #12]
 800778a:	6643      	str	r3, [r0, #100]	; 0x64
 800778c:	81c2      	strh	r2, [r0, #14]
 800778e:	6183      	str	r3, [r0, #24]
 8007790:	4619      	mov	r1, r3
 8007792:	2208      	movs	r2, #8
 8007794:	305c      	adds	r0, #92	; 0x5c
 8007796:	f7fe fa01 	bl	8005b9c <memset>
 800779a:	4b05      	ldr	r3, [pc, #20]	; (80077b0 <std+0x38>)
 800779c:	6263      	str	r3, [r4, #36]	; 0x24
 800779e:	4b05      	ldr	r3, [pc, #20]	; (80077b4 <std+0x3c>)
 80077a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80077a2:	4b05      	ldr	r3, [pc, #20]	; (80077b8 <std+0x40>)
 80077a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80077a6:	4b05      	ldr	r3, [pc, #20]	; (80077bc <std+0x44>)
 80077a8:	6224      	str	r4, [r4, #32]
 80077aa:	6323      	str	r3, [r4, #48]	; 0x30
 80077ac:	bd10      	pop	{r4, pc}
 80077ae:	bf00      	nop
 80077b0:	0800874d 	.word	0x0800874d
 80077b4:	0800876f 	.word	0x0800876f
 80077b8:	080087a7 	.word	0x080087a7
 80077bc:	080087cb 	.word	0x080087cb

080077c0 <_cleanup_r>:
 80077c0:	4901      	ldr	r1, [pc, #4]	; (80077c8 <_cleanup_r+0x8>)
 80077c2:	f000 b8af 	b.w	8007924 <_fwalk_reent>
 80077c6:	bf00      	nop
 80077c8:	08007701 	.word	0x08007701

080077cc <__sfmoreglue>:
 80077cc:	b570      	push	{r4, r5, r6, lr}
 80077ce:	2268      	movs	r2, #104	; 0x68
 80077d0:	1e4d      	subs	r5, r1, #1
 80077d2:	4355      	muls	r5, r2
 80077d4:	460e      	mov	r6, r1
 80077d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80077da:	f000 fd65 	bl	80082a8 <_malloc_r>
 80077de:	4604      	mov	r4, r0
 80077e0:	b140      	cbz	r0, 80077f4 <__sfmoreglue+0x28>
 80077e2:	2100      	movs	r1, #0
 80077e4:	e9c0 1600 	strd	r1, r6, [r0]
 80077e8:	300c      	adds	r0, #12
 80077ea:	60a0      	str	r0, [r4, #8]
 80077ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80077f0:	f7fe f9d4 	bl	8005b9c <memset>
 80077f4:	4620      	mov	r0, r4
 80077f6:	bd70      	pop	{r4, r5, r6, pc}

080077f8 <__sfp_lock_acquire>:
 80077f8:	4801      	ldr	r0, [pc, #4]	; (8007800 <__sfp_lock_acquire+0x8>)
 80077fa:	f000 b8b8 	b.w	800796e <__retarget_lock_acquire_recursive>
 80077fe:	bf00      	nop
 8007800:	200003d5 	.word	0x200003d5

08007804 <__sfp_lock_release>:
 8007804:	4801      	ldr	r0, [pc, #4]	; (800780c <__sfp_lock_release+0x8>)
 8007806:	f000 b8b3 	b.w	8007970 <__retarget_lock_release_recursive>
 800780a:	bf00      	nop
 800780c:	200003d5 	.word	0x200003d5

08007810 <__sinit_lock_acquire>:
 8007810:	4801      	ldr	r0, [pc, #4]	; (8007818 <__sinit_lock_acquire+0x8>)
 8007812:	f000 b8ac 	b.w	800796e <__retarget_lock_acquire_recursive>
 8007816:	bf00      	nop
 8007818:	200003d6 	.word	0x200003d6

0800781c <__sinit_lock_release>:
 800781c:	4801      	ldr	r0, [pc, #4]	; (8007824 <__sinit_lock_release+0x8>)
 800781e:	f000 b8a7 	b.w	8007970 <__retarget_lock_release_recursive>
 8007822:	bf00      	nop
 8007824:	200003d6 	.word	0x200003d6

08007828 <__sinit>:
 8007828:	b510      	push	{r4, lr}
 800782a:	4604      	mov	r4, r0
 800782c:	f7ff fff0 	bl	8007810 <__sinit_lock_acquire>
 8007830:	69a3      	ldr	r3, [r4, #24]
 8007832:	b11b      	cbz	r3, 800783c <__sinit+0x14>
 8007834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007838:	f7ff bff0 	b.w	800781c <__sinit_lock_release>
 800783c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007840:	6523      	str	r3, [r4, #80]	; 0x50
 8007842:	4b13      	ldr	r3, [pc, #76]	; (8007890 <__sinit+0x68>)
 8007844:	4a13      	ldr	r2, [pc, #76]	; (8007894 <__sinit+0x6c>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	62a2      	str	r2, [r4, #40]	; 0x28
 800784a:	42a3      	cmp	r3, r4
 800784c:	bf04      	itt	eq
 800784e:	2301      	moveq	r3, #1
 8007850:	61a3      	streq	r3, [r4, #24]
 8007852:	4620      	mov	r0, r4
 8007854:	f000 f820 	bl	8007898 <__sfp>
 8007858:	6060      	str	r0, [r4, #4]
 800785a:	4620      	mov	r0, r4
 800785c:	f000 f81c 	bl	8007898 <__sfp>
 8007860:	60a0      	str	r0, [r4, #8]
 8007862:	4620      	mov	r0, r4
 8007864:	f000 f818 	bl	8007898 <__sfp>
 8007868:	2200      	movs	r2, #0
 800786a:	60e0      	str	r0, [r4, #12]
 800786c:	2104      	movs	r1, #4
 800786e:	6860      	ldr	r0, [r4, #4]
 8007870:	f7ff ff82 	bl	8007778 <std>
 8007874:	68a0      	ldr	r0, [r4, #8]
 8007876:	2201      	movs	r2, #1
 8007878:	2109      	movs	r1, #9
 800787a:	f7ff ff7d 	bl	8007778 <std>
 800787e:	68e0      	ldr	r0, [r4, #12]
 8007880:	2202      	movs	r2, #2
 8007882:	2112      	movs	r1, #18
 8007884:	f7ff ff78 	bl	8007778 <std>
 8007888:	2301      	movs	r3, #1
 800788a:	61a3      	str	r3, [r4, #24]
 800788c:	e7d2      	b.n	8007834 <__sinit+0xc>
 800788e:	bf00      	nop
 8007890:	08008b18 	.word	0x08008b18
 8007894:	080077c1 	.word	0x080077c1

08007898 <__sfp>:
 8007898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800789a:	4607      	mov	r7, r0
 800789c:	f7ff ffac 	bl	80077f8 <__sfp_lock_acquire>
 80078a0:	4b1e      	ldr	r3, [pc, #120]	; (800791c <__sfp+0x84>)
 80078a2:	681e      	ldr	r6, [r3, #0]
 80078a4:	69b3      	ldr	r3, [r6, #24]
 80078a6:	b913      	cbnz	r3, 80078ae <__sfp+0x16>
 80078a8:	4630      	mov	r0, r6
 80078aa:	f7ff ffbd 	bl	8007828 <__sinit>
 80078ae:	3648      	adds	r6, #72	; 0x48
 80078b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80078b4:	3b01      	subs	r3, #1
 80078b6:	d503      	bpl.n	80078c0 <__sfp+0x28>
 80078b8:	6833      	ldr	r3, [r6, #0]
 80078ba:	b30b      	cbz	r3, 8007900 <__sfp+0x68>
 80078bc:	6836      	ldr	r6, [r6, #0]
 80078be:	e7f7      	b.n	80078b0 <__sfp+0x18>
 80078c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80078c4:	b9d5      	cbnz	r5, 80078fc <__sfp+0x64>
 80078c6:	4b16      	ldr	r3, [pc, #88]	; (8007920 <__sfp+0x88>)
 80078c8:	60e3      	str	r3, [r4, #12]
 80078ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80078ce:	6665      	str	r5, [r4, #100]	; 0x64
 80078d0:	f000 f84c 	bl	800796c <__retarget_lock_init_recursive>
 80078d4:	f7ff ff96 	bl	8007804 <__sfp_lock_release>
 80078d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80078dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80078e0:	6025      	str	r5, [r4, #0]
 80078e2:	61a5      	str	r5, [r4, #24]
 80078e4:	2208      	movs	r2, #8
 80078e6:	4629      	mov	r1, r5
 80078e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80078ec:	f7fe f956 	bl	8005b9c <memset>
 80078f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80078f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80078f8:	4620      	mov	r0, r4
 80078fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078fc:	3468      	adds	r4, #104	; 0x68
 80078fe:	e7d9      	b.n	80078b4 <__sfp+0x1c>
 8007900:	2104      	movs	r1, #4
 8007902:	4638      	mov	r0, r7
 8007904:	f7ff ff62 	bl	80077cc <__sfmoreglue>
 8007908:	4604      	mov	r4, r0
 800790a:	6030      	str	r0, [r6, #0]
 800790c:	2800      	cmp	r0, #0
 800790e:	d1d5      	bne.n	80078bc <__sfp+0x24>
 8007910:	f7ff ff78 	bl	8007804 <__sfp_lock_release>
 8007914:	230c      	movs	r3, #12
 8007916:	603b      	str	r3, [r7, #0]
 8007918:	e7ee      	b.n	80078f8 <__sfp+0x60>
 800791a:	bf00      	nop
 800791c:	08008b18 	.word	0x08008b18
 8007920:	ffff0001 	.word	0xffff0001

08007924 <_fwalk_reent>:
 8007924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007928:	4606      	mov	r6, r0
 800792a:	4688      	mov	r8, r1
 800792c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007930:	2700      	movs	r7, #0
 8007932:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007936:	f1b9 0901 	subs.w	r9, r9, #1
 800793a:	d505      	bpl.n	8007948 <_fwalk_reent+0x24>
 800793c:	6824      	ldr	r4, [r4, #0]
 800793e:	2c00      	cmp	r4, #0
 8007940:	d1f7      	bne.n	8007932 <_fwalk_reent+0xe>
 8007942:	4638      	mov	r0, r7
 8007944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007948:	89ab      	ldrh	r3, [r5, #12]
 800794a:	2b01      	cmp	r3, #1
 800794c:	d907      	bls.n	800795e <_fwalk_reent+0x3a>
 800794e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007952:	3301      	adds	r3, #1
 8007954:	d003      	beq.n	800795e <_fwalk_reent+0x3a>
 8007956:	4629      	mov	r1, r5
 8007958:	4630      	mov	r0, r6
 800795a:	47c0      	blx	r8
 800795c:	4307      	orrs	r7, r0
 800795e:	3568      	adds	r5, #104	; 0x68
 8007960:	e7e9      	b.n	8007936 <_fwalk_reent+0x12>
	...

08007964 <_localeconv_r>:
 8007964:	4800      	ldr	r0, [pc, #0]	; (8007968 <_localeconv_r+0x4>)
 8007966:	4770      	bx	lr
 8007968:	20000168 	.word	0x20000168

0800796c <__retarget_lock_init_recursive>:
 800796c:	4770      	bx	lr

0800796e <__retarget_lock_acquire_recursive>:
 800796e:	4770      	bx	lr

08007970 <__retarget_lock_release_recursive>:
 8007970:	4770      	bx	lr

08007972 <__swhatbuf_r>:
 8007972:	b570      	push	{r4, r5, r6, lr}
 8007974:	460e      	mov	r6, r1
 8007976:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800797a:	2900      	cmp	r1, #0
 800797c:	b096      	sub	sp, #88	; 0x58
 800797e:	4614      	mov	r4, r2
 8007980:	461d      	mov	r5, r3
 8007982:	da08      	bge.n	8007996 <__swhatbuf_r+0x24>
 8007984:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	602a      	str	r2, [r5, #0]
 800798c:	061a      	lsls	r2, r3, #24
 800798e:	d410      	bmi.n	80079b2 <__swhatbuf_r+0x40>
 8007990:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007994:	e00e      	b.n	80079b4 <__swhatbuf_r+0x42>
 8007996:	466a      	mov	r2, sp
 8007998:	f000 ff3e 	bl	8008818 <_fstat_r>
 800799c:	2800      	cmp	r0, #0
 800799e:	dbf1      	blt.n	8007984 <__swhatbuf_r+0x12>
 80079a0:	9a01      	ldr	r2, [sp, #4]
 80079a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80079a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80079aa:	425a      	negs	r2, r3
 80079ac:	415a      	adcs	r2, r3
 80079ae:	602a      	str	r2, [r5, #0]
 80079b0:	e7ee      	b.n	8007990 <__swhatbuf_r+0x1e>
 80079b2:	2340      	movs	r3, #64	; 0x40
 80079b4:	2000      	movs	r0, #0
 80079b6:	6023      	str	r3, [r4, #0]
 80079b8:	b016      	add	sp, #88	; 0x58
 80079ba:	bd70      	pop	{r4, r5, r6, pc}

080079bc <__smakebuf_r>:
 80079bc:	898b      	ldrh	r3, [r1, #12]
 80079be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80079c0:	079d      	lsls	r5, r3, #30
 80079c2:	4606      	mov	r6, r0
 80079c4:	460c      	mov	r4, r1
 80079c6:	d507      	bpl.n	80079d8 <__smakebuf_r+0x1c>
 80079c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80079cc:	6023      	str	r3, [r4, #0]
 80079ce:	6123      	str	r3, [r4, #16]
 80079d0:	2301      	movs	r3, #1
 80079d2:	6163      	str	r3, [r4, #20]
 80079d4:	b002      	add	sp, #8
 80079d6:	bd70      	pop	{r4, r5, r6, pc}
 80079d8:	ab01      	add	r3, sp, #4
 80079da:	466a      	mov	r2, sp
 80079dc:	f7ff ffc9 	bl	8007972 <__swhatbuf_r>
 80079e0:	9900      	ldr	r1, [sp, #0]
 80079e2:	4605      	mov	r5, r0
 80079e4:	4630      	mov	r0, r6
 80079e6:	f000 fc5f 	bl	80082a8 <_malloc_r>
 80079ea:	b948      	cbnz	r0, 8007a00 <__smakebuf_r+0x44>
 80079ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079f0:	059a      	lsls	r2, r3, #22
 80079f2:	d4ef      	bmi.n	80079d4 <__smakebuf_r+0x18>
 80079f4:	f023 0303 	bic.w	r3, r3, #3
 80079f8:	f043 0302 	orr.w	r3, r3, #2
 80079fc:	81a3      	strh	r3, [r4, #12]
 80079fe:	e7e3      	b.n	80079c8 <__smakebuf_r+0xc>
 8007a00:	4b0d      	ldr	r3, [pc, #52]	; (8007a38 <__smakebuf_r+0x7c>)
 8007a02:	62b3      	str	r3, [r6, #40]	; 0x28
 8007a04:	89a3      	ldrh	r3, [r4, #12]
 8007a06:	6020      	str	r0, [r4, #0]
 8007a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a0c:	81a3      	strh	r3, [r4, #12]
 8007a0e:	9b00      	ldr	r3, [sp, #0]
 8007a10:	6163      	str	r3, [r4, #20]
 8007a12:	9b01      	ldr	r3, [sp, #4]
 8007a14:	6120      	str	r0, [r4, #16]
 8007a16:	b15b      	cbz	r3, 8007a30 <__smakebuf_r+0x74>
 8007a18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a1c:	4630      	mov	r0, r6
 8007a1e:	f000 ff0d 	bl	800883c <_isatty_r>
 8007a22:	b128      	cbz	r0, 8007a30 <__smakebuf_r+0x74>
 8007a24:	89a3      	ldrh	r3, [r4, #12]
 8007a26:	f023 0303 	bic.w	r3, r3, #3
 8007a2a:	f043 0301 	orr.w	r3, r3, #1
 8007a2e:	81a3      	strh	r3, [r4, #12]
 8007a30:	89a0      	ldrh	r0, [r4, #12]
 8007a32:	4305      	orrs	r5, r0
 8007a34:	81a5      	strh	r5, [r4, #12]
 8007a36:	e7cd      	b.n	80079d4 <__smakebuf_r+0x18>
 8007a38:	080077c1 	.word	0x080077c1

08007a3c <malloc>:
 8007a3c:	4b02      	ldr	r3, [pc, #8]	; (8007a48 <malloc+0xc>)
 8007a3e:	4601      	mov	r1, r0
 8007a40:	6818      	ldr	r0, [r3, #0]
 8007a42:	f000 bc31 	b.w	80082a8 <_malloc_r>
 8007a46:	bf00      	nop
 8007a48:	20000014 	.word	0x20000014

08007a4c <memcpy>:
 8007a4c:	440a      	add	r2, r1
 8007a4e:	4291      	cmp	r1, r2
 8007a50:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a54:	d100      	bne.n	8007a58 <memcpy+0xc>
 8007a56:	4770      	bx	lr
 8007a58:	b510      	push	{r4, lr}
 8007a5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a62:	4291      	cmp	r1, r2
 8007a64:	d1f9      	bne.n	8007a5a <memcpy+0xe>
 8007a66:	bd10      	pop	{r4, pc}

08007a68 <memmove>:
 8007a68:	4288      	cmp	r0, r1
 8007a6a:	b510      	push	{r4, lr}
 8007a6c:	eb01 0402 	add.w	r4, r1, r2
 8007a70:	d902      	bls.n	8007a78 <memmove+0x10>
 8007a72:	4284      	cmp	r4, r0
 8007a74:	4623      	mov	r3, r4
 8007a76:	d807      	bhi.n	8007a88 <memmove+0x20>
 8007a78:	1e43      	subs	r3, r0, #1
 8007a7a:	42a1      	cmp	r1, r4
 8007a7c:	d008      	beq.n	8007a90 <memmove+0x28>
 8007a7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a86:	e7f8      	b.n	8007a7a <memmove+0x12>
 8007a88:	4402      	add	r2, r0
 8007a8a:	4601      	mov	r1, r0
 8007a8c:	428a      	cmp	r2, r1
 8007a8e:	d100      	bne.n	8007a92 <memmove+0x2a>
 8007a90:	bd10      	pop	{r4, pc}
 8007a92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a9a:	e7f7      	b.n	8007a8c <memmove+0x24>

08007a9c <_Balloc>:
 8007a9c:	b570      	push	{r4, r5, r6, lr}
 8007a9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007aa0:	4604      	mov	r4, r0
 8007aa2:	460d      	mov	r5, r1
 8007aa4:	b976      	cbnz	r6, 8007ac4 <_Balloc+0x28>
 8007aa6:	2010      	movs	r0, #16
 8007aa8:	f7ff ffc8 	bl	8007a3c <malloc>
 8007aac:	4602      	mov	r2, r0
 8007aae:	6260      	str	r0, [r4, #36]	; 0x24
 8007ab0:	b920      	cbnz	r0, 8007abc <_Balloc+0x20>
 8007ab2:	4b18      	ldr	r3, [pc, #96]	; (8007b14 <_Balloc+0x78>)
 8007ab4:	4818      	ldr	r0, [pc, #96]	; (8007b18 <_Balloc+0x7c>)
 8007ab6:	2166      	movs	r1, #102	; 0x66
 8007ab8:	f7fe f816 	bl	8005ae8 <__assert_func>
 8007abc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ac0:	6006      	str	r6, [r0, #0]
 8007ac2:	60c6      	str	r6, [r0, #12]
 8007ac4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007ac6:	68f3      	ldr	r3, [r6, #12]
 8007ac8:	b183      	cbz	r3, 8007aec <_Balloc+0x50>
 8007aca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ad2:	b9b8      	cbnz	r0, 8007b04 <_Balloc+0x68>
 8007ad4:	2101      	movs	r1, #1
 8007ad6:	fa01 f605 	lsl.w	r6, r1, r5
 8007ada:	1d72      	adds	r2, r6, #5
 8007adc:	0092      	lsls	r2, r2, #2
 8007ade:	4620      	mov	r0, r4
 8007ae0:	f000 fb60 	bl	80081a4 <_calloc_r>
 8007ae4:	b160      	cbz	r0, 8007b00 <_Balloc+0x64>
 8007ae6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007aea:	e00e      	b.n	8007b0a <_Balloc+0x6e>
 8007aec:	2221      	movs	r2, #33	; 0x21
 8007aee:	2104      	movs	r1, #4
 8007af0:	4620      	mov	r0, r4
 8007af2:	f000 fb57 	bl	80081a4 <_calloc_r>
 8007af6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007af8:	60f0      	str	r0, [r6, #12]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d1e4      	bne.n	8007aca <_Balloc+0x2e>
 8007b00:	2000      	movs	r0, #0
 8007b02:	bd70      	pop	{r4, r5, r6, pc}
 8007b04:	6802      	ldr	r2, [r0, #0]
 8007b06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b10:	e7f7      	b.n	8007b02 <_Balloc+0x66>
 8007b12:	bf00      	nop
 8007b14:	08008b6e 	.word	0x08008b6e
 8007b18:	08008c54 	.word	0x08008c54

08007b1c <_Bfree>:
 8007b1c:	b570      	push	{r4, r5, r6, lr}
 8007b1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b20:	4605      	mov	r5, r0
 8007b22:	460c      	mov	r4, r1
 8007b24:	b976      	cbnz	r6, 8007b44 <_Bfree+0x28>
 8007b26:	2010      	movs	r0, #16
 8007b28:	f7ff ff88 	bl	8007a3c <malloc>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	6268      	str	r0, [r5, #36]	; 0x24
 8007b30:	b920      	cbnz	r0, 8007b3c <_Bfree+0x20>
 8007b32:	4b09      	ldr	r3, [pc, #36]	; (8007b58 <_Bfree+0x3c>)
 8007b34:	4809      	ldr	r0, [pc, #36]	; (8007b5c <_Bfree+0x40>)
 8007b36:	218a      	movs	r1, #138	; 0x8a
 8007b38:	f7fd ffd6 	bl	8005ae8 <__assert_func>
 8007b3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b40:	6006      	str	r6, [r0, #0]
 8007b42:	60c6      	str	r6, [r0, #12]
 8007b44:	b13c      	cbz	r4, 8007b56 <_Bfree+0x3a>
 8007b46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b48:	6862      	ldr	r2, [r4, #4]
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b50:	6021      	str	r1, [r4, #0]
 8007b52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b56:	bd70      	pop	{r4, r5, r6, pc}
 8007b58:	08008b6e 	.word	0x08008b6e
 8007b5c:	08008c54 	.word	0x08008c54

08007b60 <__multadd>:
 8007b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b64:	690d      	ldr	r5, [r1, #16]
 8007b66:	4607      	mov	r7, r0
 8007b68:	460c      	mov	r4, r1
 8007b6a:	461e      	mov	r6, r3
 8007b6c:	f101 0c14 	add.w	ip, r1, #20
 8007b70:	2000      	movs	r0, #0
 8007b72:	f8dc 3000 	ldr.w	r3, [ip]
 8007b76:	b299      	uxth	r1, r3
 8007b78:	fb02 6101 	mla	r1, r2, r1, r6
 8007b7c:	0c1e      	lsrs	r6, r3, #16
 8007b7e:	0c0b      	lsrs	r3, r1, #16
 8007b80:	fb02 3306 	mla	r3, r2, r6, r3
 8007b84:	b289      	uxth	r1, r1
 8007b86:	3001      	adds	r0, #1
 8007b88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b8c:	4285      	cmp	r5, r0
 8007b8e:	f84c 1b04 	str.w	r1, [ip], #4
 8007b92:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b96:	dcec      	bgt.n	8007b72 <__multadd+0x12>
 8007b98:	b30e      	cbz	r6, 8007bde <__multadd+0x7e>
 8007b9a:	68a3      	ldr	r3, [r4, #8]
 8007b9c:	42ab      	cmp	r3, r5
 8007b9e:	dc19      	bgt.n	8007bd4 <__multadd+0x74>
 8007ba0:	6861      	ldr	r1, [r4, #4]
 8007ba2:	4638      	mov	r0, r7
 8007ba4:	3101      	adds	r1, #1
 8007ba6:	f7ff ff79 	bl	8007a9c <_Balloc>
 8007baa:	4680      	mov	r8, r0
 8007bac:	b928      	cbnz	r0, 8007bba <__multadd+0x5a>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	4b0c      	ldr	r3, [pc, #48]	; (8007be4 <__multadd+0x84>)
 8007bb2:	480d      	ldr	r0, [pc, #52]	; (8007be8 <__multadd+0x88>)
 8007bb4:	21b5      	movs	r1, #181	; 0xb5
 8007bb6:	f7fd ff97 	bl	8005ae8 <__assert_func>
 8007bba:	6922      	ldr	r2, [r4, #16]
 8007bbc:	3202      	adds	r2, #2
 8007bbe:	f104 010c 	add.w	r1, r4, #12
 8007bc2:	0092      	lsls	r2, r2, #2
 8007bc4:	300c      	adds	r0, #12
 8007bc6:	f7ff ff41 	bl	8007a4c <memcpy>
 8007bca:	4621      	mov	r1, r4
 8007bcc:	4638      	mov	r0, r7
 8007bce:	f7ff ffa5 	bl	8007b1c <_Bfree>
 8007bd2:	4644      	mov	r4, r8
 8007bd4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007bd8:	3501      	adds	r5, #1
 8007bda:	615e      	str	r6, [r3, #20]
 8007bdc:	6125      	str	r5, [r4, #16]
 8007bde:	4620      	mov	r0, r4
 8007be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007be4:	08008be0 	.word	0x08008be0
 8007be8:	08008c54 	.word	0x08008c54

08007bec <__hi0bits>:
 8007bec:	0c03      	lsrs	r3, r0, #16
 8007bee:	041b      	lsls	r3, r3, #16
 8007bf0:	b9d3      	cbnz	r3, 8007c28 <__hi0bits+0x3c>
 8007bf2:	0400      	lsls	r0, r0, #16
 8007bf4:	2310      	movs	r3, #16
 8007bf6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007bfa:	bf04      	itt	eq
 8007bfc:	0200      	lsleq	r0, r0, #8
 8007bfe:	3308      	addeq	r3, #8
 8007c00:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007c04:	bf04      	itt	eq
 8007c06:	0100      	lsleq	r0, r0, #4
 8007c08:	3304      	addeq	r3, #4
 8007c0a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007c0e:	bf04      	itt	eq
 8007c10:	0080      	lsleq	r0, r0, #2
 8007c12:	3302      	addeq	r3, #2
 8007c14:	2800      	cmp	r0, #0
 8007c16:	db05      	blt.n	8007c24 <__hi0bits+0x38>
 8007c18:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007c1c:	f103 0301 	add.w	r3, r3, #1
 8007c20:	bf08      	it	eq
 8007c22:	2320      	moveq	r3, #32
 8007c24:	4618      	mov	r0, r3
 8007c26:	4770      	bx	lr
 8007c28:	2300      	movs	r3, #0
 8007c2a:	e7e4      	b.n	8007bf6 <__hi0bits+0xa>

08007c2c <__lo0bits>:
 8007c2c:	6803      	ldr	r3, [r0, #0]
 8007c2e:	f013 0207 	ands.w	r2, r3, #7
 8007c32:	4601      	mov	r1, r0
 8007c34:	d00b      	beq.n	8007c4e <__lo0bits+0x22>
 8007c36:	07da      	lsls	r2, r3, #31
 8007c38:	d423      	bmi.n	8007c82 <__lo0bits+0x56>
 8007c3a:	0798      	lsls	r0, r3, #30
 8007c3c:	bf49      	itett	mi
 8007c3e:	085b      	lsrmi	r3, r3, #1
 8007c40:	089b      	lsrpl	r3, r3, #2
 8007c42:	2001      	movmi	r0, #1
 8007c44:	600b      	strmi	r3, [r1, #0]
 8007c46:	bf5c      	itt	pl
 8007c48:	600b      	strpl	r3, [r1, #0]
 8007c4a:	2002      	movpl	r0, #2
 8007c4c:	4770      	bx	lr
 8007c4e:	b298      	uxth	r0, r3
 8007c50:	b9a8      	cbnz	r0, 8007c7e <__lo0bits+0x52>
 8007c52:	0c1b      	lsrs	r3, r3, #16
 8007c54:	2010      	movs	r0, #16
 8007c56:	b2da      	uxtb	r2, r3
 8007c58:	b90a      	cbnz	r2, 8007c5e <__lo0bits+0x32>
 8007c5a:	3008      	adds	r0, #8
 8007c5c:	0a1b      	lsrs	r3, r3, #8
 8007c5e:	071a      	lsls	r2, r3, #28
 8007c60:	bf04      	itt	eq
 8007c62:	091b      	lsreq	r3, r3, #4
 8007c64:	3004      	addeq	r0, #4
 8007c66:	079a      	lsls	r2, r3, #30
 8007c68:	bf04      	itt	eq
 8007c6a:	089b      	lsreq	r3, r3, #2
 8007c6c:	3002      	addeq	r0, #2
 8007c6e:	07da      	lsls	r2, r3, #31
 8007c70:	d403      	bmi.n	8007c7a <__lo0bits+0x4e>
 8007c72:	085b      	lsrs	r3, r3, #1
 8007c74:	f100 0001 	add.w	r0, r0, #1
 8007c78:	d005      	beq.n	8007c86 <__lo0bits+0x5a>
 8007c7a:	600b      	str	r3, [r1, #0]
 8007c7c:	4770      	bx	lr
 8007c7e:	4610      	mov	r0, r2
 8007c80:	e7e9      	b.n	8007c56 <__lo0bits+0x2a>
 8007c82:	2000      	movs	r0, #0
 8007c84:	4770      	bx	lr
 8007c86:	2020      	movs	r0, #32
 8007c88:	4770      	bx	lr
	...

08007c8c <__i2b>:
 8007c8c:	b510      	push	{r4, lr}
 8007c8e:	460c      	mov	r4, r1
 8007c90:	2101      	movs	r1, #1
 8007c92:	f7ff ff03 	bl	8007a9c <_Balloc>
 8007c96:	4602      	mov	r2, r0
 8007c98:	b928      	cbnz	r0, 8007ca6 <__i2b+0x1a>
 8007c9a:	4b05      	ldr	r3, [pc, #20]	; (8007cb0 <__i2b+0x24>)
 8007c9c:	4805      	ldr	r0, [pc, #20]	; (8007cb4 <__i2b+0x28>)
 8007c9e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007ca2:	f7fd ff21 	bl	8005ae8 <__assert_func>
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	6144      	str	r4, [r0, #20]
 8007caa:	6103      	str	r3, [r0, #16]
 8007cac:	bd10      	pop	{r4, pc}
 8007cae:	bf00      	nop
 8007cb0:	08008be0 	.word	0x08008be0
 8007cb4:	08008c54 	.word	0x08008c54

08007cb8 <__multiply>:
 8007cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cbc:	4691      	mov	r9, r2
 8007cbe:	690a      	ldr	r2, [r1, #16]
 8007cc0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	bfb8      	it	lt
 8007cc8:	460b      	movlt	r3, r1
 8007cca:	460c      	mov	r4, r1
 8007ccc:	bfbc      	itt	lt
 8007cce:	464c      	movlt	r4, r9
 8007cd0:	4699      	movlt	r9, r3
 8007cd2:	6927      	ldr	r7, [r4, #16]
 8007cd4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007cd8:	68a3      	ldr	r3, [r4, #8]
 8007cda:	6861      	ldr	r1, [r4, #4]
 8007cdc:	eb07 060a 	add.w	r6, r7, sl
 8007ce0:	42b3      	cmp	r3, r6
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	bfb8      	it	lt
 8007ce6:	3101      	addlt	r1, #1
 8007ce8:	f7ff fed8 	bl	8007a9c <_Balloc>
 8007cec:	b930      	cbnz	r0, 8007cfc <__multiply+0x44>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	4b44      	ldr	r3, [pc, #272]	; (8007e04 <__multiply+0x14c>)
 8007cf2:	4845      	ldr	r0, [pc, #276]	; (8007e08 <__multiply+0x150>)
 8007cf4:	f240 115d 	movw	r1, #349	; 0x15d
 8007cf8:	f7fd fef6 	bl	8005ae8 <__assert_func>
 8007cfc:	f100 0514 	add.w	r5, r0, #20
 8007d00:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007d04:	462b      	mov	r3, r5
 8007d06:	2200      	movs	r2, #0
 8007d08:	4543      	cmp	r3, r8
 8007d0a:	d321      	bcc.n	8007d50 <__multiply+0x98>
 8007d0c:	f104 0314 	add.w	r3, r4, #20
 8007d10:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007d14:	f109 0314 	add.w	r3, r9, #20
 8007d18:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007d1c:	9202      	str	r2, [sp, #8]
 8007d1e:	1b3a      	subs	r2, r7, r4
 8007d20:	3a15      	subs	r2, #21
 8007d22:	f022 0203 	bic.w	r2, r2, #3
 8007d26:	3204      	adds	r2, #4
 8007d28:	f104 0115 	add.w	r1, r4, #21
 8007d2c:	428f      	cmp	r7, r1
 8007d2e:	bf38      	it	cc
 8007d30:	2204      	movcc	r2, #4
 8007d32:	9201      	str	r2, [sp, #4]
 8007d34:	9a02      	ldr	r2, [sp, #8]
 8007d36:	9303      	str	r3, [sp, #12]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d80c      	bhi.n	8007d56 <__multiply+0x9e>
 8007d3c:	2e00      	cmp	r6, #0
 8007d3e:	dd03      	ble.n	8007d48 <__multiply+0x90>
 8007d40:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d05a      	beq.n	8007dfe <__multiply+0x146>
 8007d48:	6106      	str	r6, [r0, #16]
 8007d4a:	b005      	add	sp, #20
 8007d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d50:	f843 2b04 	str.w	r2, [r3], #4
 8007d54:	e7d8      	b.n	8007d08 <__multiply+0x50>
 8007d56:	f8b3 a000 	ldrh.w	sl, [r3]
 8007d5a:	f1ba 0f00 	cmp.w	sl, #0
 8007d5e:	d024      	beq.n	8007daa <__multiply+0xf2>
 8007d60:	f104 0e14 	add.w	lr, r4, #20
 8007d64:	46a9      	mov	r9, r5
 8007d66:	f04f 0c00 	mov.w	ip, #0
 8007d6a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007d6e:	f8d9 1000 	ldr.w	r1, [r9]
 8007d72:	fa1f fb82 	uxth.w	fp, r2
 8007d76:	b289      	uxth	r1, r1
 8007d78:	fb0a 110b 	mla	r1, sl, fp, r1
 8007d7c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007d80:	f8d9 2000 	ldr.w	r2, [r9]
 8007d84:	4461      	add	r1, ip
 8007d86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d8a:	fb0a c20b 	mla	r2, sl, fp, ip
 8007d8e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007d92:	b289      	uxth	r1, r1
 8007d94:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007d98:	4577      	cmp	r7, lr
 8007d9a:	f849 1b04 	str.w	r1, [r9], #4
 8007d9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007da2:	d8e2      	bhi.n	8007d6a <__multiply+0xb2>
 8007da4:	9a01      	ldr	r2, [sp, #4]
 8007da6:	f845 c002 	str.w	ip, [r5, r2]
 8007daa:	9a03      	ldr	r2, [sp, #12]
 8007dac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007db0:	3304      	adds	r3, #4
 8007db2:	f1b9 0f00 	cmp.w	r9, #0
 8007db6:	d020      	beq.n	8007dfa <__multiply+0x142>
 8007db8:	6829      	ldr	r1, [r5, #0]
 8007dba:	f104 0c14 	add.w	ip, r4, #20
 8007dbe:	46ae      	mov	lr, r5
 8007dc0:	f04f 0a00 	mov.w	sl, #0
 8007dc4:	f8bc b000 	ldrh.w	fp, [ip]
 8007dc8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007dcc:	fb09 220b 	mla	r2, r9, fp, r2
 8007dd0:	4492      	add	sl, r2
 8007dd2:	b289      	uxth	r1, r1
 8007dd4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007dd8:	f84e 1b04 	str.w	r1, [lr], #4
 8007ddc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007de0:	f8be 1000 	ldrh.w	r1, [lr]
 8007de4:	0c12      	lsrs	r2, r2, #16
 8007de6:	fb09 1102 	mla	r1, r9, r2, r1
 8007dea:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007dee:	4567      	cmp	r7, ip
 8007df0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007df4:	d8e6      	bhi.n	8007dc4 <__multiply+0x10c>
 8007df6:	9a01      	ldr	r2, [sp, #4]
 8007df8:	50a9      	str	r1, [r5, r2]
 8007dfa:	3504      	adds	r5, #4
 8007dfc:	e79a      	b.n	8007d34 <__multiply+0x7c>
 8007dfe:	3e01      	subs	r6, #1
 8007e00:	e79c      	b.n	8007d3c <__multiply+0x84>
 8007e02:	bf00      	nop
 8007e04:	08008be0 	.word	0x08008be0
 8007e08:	08008c54 	.word	0x08008c54

08007e0c <__pow5mult>:
 8007e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e10:	4615      	mov	r5, r2
 8007e12:	f012 0203 	ands.w	r2, r2, #3
 8007e16:	4606      	mov	r6, r0
 8007e18:	460f      	mov	r7, r1
 8007e1a:	d007      	beq.n	8007e2c <__pow5mult+0x20>
 8007e1c:	4c25      	ldr	r4, [pc, #148]	; (8007eb4 <__pow5mult+0xa8>)
 8007e1e:	3a01      	subs	r2, #1
 8007e20:	2300      	movs	r3, #0
 8007e22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e26:	f7ff fe9b 	bl	8007b60 <__multadd>
 8007e2a:	4607      	mov	r7, r0
 8007e2c:	10ad      	asrs	r5, r5, #2
 8007e2e:	d03d      	beq.n	8007eac <__pow5mult+0xa0>
 8007e30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007e32:	b97c      	cbnz	r4, 8007e54 <__pow5mult+0x48>
 8007e34:	2010      	movs	r0, #16
 8007e36:	f7ff fe01 	bl	8007a3c <malloc>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	6270      	str	r0, [r6, #36]	; 0x24
 8007e3e:	b928      	cbnz	r0, 8007e4c <__pow5mult+0x40>
 8007e40:	4b1d      	ldr	r3, [pc, #116]	; (8007eb8 <__pow5mult+0xac>)
 8007e42:	481e      	ldr	r0, [pc, #120]	; (8007ebc <__pow5mult+0xb0>)
 8007e44:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007e48:	f7fd fe4e 	bl	8005ae8 <__assert_func>
 8007e4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e50:	6004      	str	r4, [r0, #0]
 8007e52:	60c4      	str	r4, [r0, #12]
 8007e54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007e58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e5c:	b94c      	cbnz	r4, 8007e72 <__pow5mult+0x66>
 8007e5e:	f240 2171 	movw	r1, #625	; 0x271
 8007e62:	4630      	mov	r0, r6
 8007e64:	f7ff ff12 	bl	8007c8c <__i2b>
 8007e68:	2300      	movs	r3, #0
 8007e6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e6e:	4604      	mov	r4, r0
 8007e70:	6003      	str	r3, [r0, #0]
 8007e72:	f04f 0900 	mov.w	r9, #0
 8007e76:	07eb      	lsls	r3, r5, #31
 8007e78:	d50a      	bpl.n	8007e90 <__pow5mult+0x84>
 8007e7a:	4639      	mov	r1, r7
 8007e7c:	4622      	mov	r2, r4
 8007e7e:	4630      	mov	r0, r6
 8007e80:	f7ff ff1a 	bl	8007cb8 <__multiply>
 8007e84:	4639      	mov	r1, r7
 8007e86:	4680      	mov	r8, r0
 8007e88:	4630      	mov	r0, r6
 8007e8a:	f7ff fe47 	bl	8007b1c <_Bfree>
 8007e8e:	4647      	mov	r7, r8
 8007e90:	106d      	asrs	r5, r5, #1
 8007e92:	d00b      	beq.n	8007eac <__pow5mult+0xa0>
 8007e94:	6820      	ldr	r0, [r4, #0]
 8007e96:	b938      	cbnz	r0, 8007ea8 <__pow5mult+0x9c>
 8007e98:	4622      	mov	r2, r4
 8007e9a:	4621      	mov	r1, r4
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	f7ff ff0b 	bl	8007cb8 <__multiply>
 8007ea2:	6020      	str	r0, [r4, #0]
 8007ea4:	f8c0 9000 	str.w	r9, [r0]
 8007ea8:	4604      	mov	r4, r0
 8007eaa:	e7e4      	b.n	8007e76 <__pow5mult+0x6a>
 8007eac:	4638      	mov	r0, r7
 8007eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eb2:	bf00      	nop
 8007eb4:	08008da0 	.word	0x08008da0
 8007eb8:	08008b6e 	.word	0x08008b6e
 8007ebc:	08008c54 	.word	0x08008c54

08007ec0 <__lshift>:
 8007ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ec4:	460c      	mov	r4, r1
 8007ec6:	6849      	ldr	r1, [r1, #4]
 8007ec8:	6923      	ldr	r3, [r4, #16]
 8007eca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007ece:	68a3      	ldr	r3, [r4, #8]
 8007ed0:	4607      	mov	r7, r0
 8007ed2:	4691      	mov	r9, r2
 8007ed4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ed8:	f108 0601 	add.w	r6, r8, #1
 8007edc:	42b3      	cmp	r3, r6
 8007ede:	db0b      	blt.n	8007ef8 <__lshift+0x38>
 8007ee0:	4638      	mov	r0, r7
 8007ee2:	f7ff fddb 	bl	8007a9c <_Balloc>
 8007ee6:	4605      	mov	r5, r0
 8007ee8:	b948      	cbnz	r0, 8007efe <__lshift+0x3e>
 8007eea:	4602      	mov	r2, r0
 8007eec:	4b2a      	ldr	r3, [pc, #168]	; (8007f98 <__lshift+0xd8>)
 8007eee:	482b      	ldr	r0, [pc, #172]	; (8007f9c <__lshift+0xdc>)
 8007ef0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007ef4:	f7fd fdf8 	bl	8005ae8 <__assert_func>
 8007ef8:	3101      	adds	r1, #1
 8007efa:	005b      	lsls	r3, r3, #1
 8007efc:	e7ee      	b.n	8007edc <__lshift+0x1c>
 8007efe:	2300      	movs	r3, #0
 8007f00:	f100 0114 	add.w	r1, r0, #20
 8007f04:	f100 0210 	add.w	r2, r0, #16
 8007f08:	4618      	mov	r0, r3
 8007f0a:	4553      	cmp	r3, sl
 8007f0c:	db37      	blt.n	8007f7e <__lshift+0xbe>
 8007f0e:	6920      	ldr	r0, [r4, #16]
 8007f10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f14:	f104 0314 	add.w	r3, r4, #20
 8007f18:	f019 091f 	ands.w	r9, r9, #31
 8007f1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f20:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007f24:	d02f      	beq.n	8007f86 <__lshift+0xc6>
 8007f26:	f1c9 0e20 	rsb	lr, r9, #32
 8007f2a:	468a      	mov	sl, r1
 8007f2c:	f04f 0c00 	mov.w	ip, #0
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	fa02 f209 	lsl.w	r2, r2, r9
 8007f36:	ea42 020c 	orr.w	r2, r2, ip
 8007f3a:	f84a 2b04 	str.w	r2, [sl], #4
 8007f3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f42:	4298      	cmp	r0, r3
 8007f44:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007f48:	d8f2      	bhi.n	8007f30 <__lshift+0x70>
 8007f4a:	1b03      	subs	r3, r0, r4
 8007f4c:	3b15      	subs	r3, #21
 8007f4e:	f023 0303 	bic.w	r3, r3, #3
 8007f52:	3304      	adds	r3, #4
 8007f54:	f104 0215 	add.w	r2, r4, #21
 8007f58:	4290      	cmp	r0, r2
 8007f5a:	bf38      	it	cc
 8007f5c:	2304      	movcc	r3, #4
 8007f5e:	f841 c003 	str.w	ip, [r1, r3]
 8007f62:	f1bc 0f00 	cmp.w	ip, #0
 8007f66:	d001      	beq.n	8007f6c <__lshift+0xac>
 8007f68:	f108 0602 	add.w	r6, r8, #2
 8007f6c:	3e01      	subs	r6, #1
 8007f6e:	4638      	mov	r0, r7
 8007f70:	612e      	str	r6, [r5, #16]
 8007f72:	4621      	mov	r1, r4
 8007f74:	f7ff fdd2 	bl	8007b1c <_Bfree>
 8007f78:	4628      	mov	r0, r5
 8007f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f7e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f82:	3301      	adds	r3, #1
 8007f84:	e7c1      	b.n	8007f0a <__lshift+0x4a>
 8007f86:	3904      	subs	r1, #4
 8007f88:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f8c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f90:	4298      	cmp	r0, r3
 8007f92:	d8f9      	bhi.n	8007f88 <__lshift+0xc8>
 8007f94:	e7ea      	b.n	8007f6c <__lshift+0xac>
 8007f96:	bf00      	nop
 8007f98:	08008be0 	.word	0x08008be0
 8007f9c:	08008c54 	.word	0x08008c54

08007fa0 <__mcmp>:
 8007fa0:	b530      	push	{r4, r5, lr}
 8007fa2:	6902      	ldr	r2, [r0, #16]
 8007fa4:	690c      	ldr	r4, [r1, #16]
 8007fa6:	1b12      	subs	r2, r2, r4
 8007fa8:	d10e      	bne.n	8007fc8 <__mcmp+0x28>
 8007faa:	f100 0314 	add.w	r3, r0, #20
 8007fae:	3114      	adds	r1, #20
 8007fb0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007fb4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007fb8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007fbc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007fc0:	42a5      	cmp	r5, r4
 8007fc2:	d003      	beq.n	8007fcc <__mcmp+0x2c>
 8007fc4:	d305      	bcc.n	8007fd2 <__mcmp+0x32>
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	4610      	mov	r0, r2
 8007fca:	bd30      	pop	{r4, r5, pc}
 8007fcc:	4283      	cmp	r3, r0
 8007fce:	d3f3      	bcc.n	8007fb8 <__mcmp+0x18>
 8007fd0:	e7fa      	b.n	8007fc8 <__mcmp+0x28>
 8007fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8007fd6:	e7f7      	b.n	8007fc8 <__mcmp+0x28>

08007fd8 <__mdiff>:
 8007fd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fdc:	460c      	mov	r4, r1
 8007fde:	4606      	mov	r6, r0
 8007fe0:	4611      	mov	r1, r2
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	4690      	mov	r8, r2
 8007fe6:	f7ff ffdb 	bl	8007fa0 <__mcmp>
 8007fea:	1e05      	subs	r5, r0, #0
 8007fec:	d110      	bne.n	8008010 <__mdiff+0x38>
 8007fee:	4629      	mov	r1, r5
 8007ff0:	4630      	mov	r0, r6
 8007ff2:	f7ff fd53 	bl	8007a9c <_Balloc>
 8007ff6:	b930      	cbnz	r0, 8008006 <__mdiff+0x2e>
 8007ff8:	4b3a      	ldr	r3, [pc, #232]	; (80080e4 <__mdiff+0x10c>)
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	f240 2132 	movw	r1, #562	; 0x232
 8008000:	4839      	ldr	r0, [pc, #228]	; (80080e8 <__mdiff+0x110>)
 8008002:	f7fd fd71 	bl	8005ae8 <__assert_func>
 8008006:	2301      	movs	r3, #1
 8008008:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800800c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008010:	bfa4      	itt	ge
 8008012:	4643      	movge	r3, r8
 8008014:	46a0      	movge	r8, r4
 8008016:	4630      	mov	r0, r6
 8008018:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800801c:	bfa6      	itte	ge
 800801e:	461c      	movge	r4, r3
 8008020:	2500      	movge	r5, #0
 8008022:	2501      	movlt	r5, #1
 8008024:	f7ff fd3a 	bl	8007a9c <_Balloc>
 8008028:	b920      	cbnz	r0, 8008034 <__mdiff+0x5c>
 800802a:	4b2e      	ldr	r3, [pc, #184]	; (80080e4 <__mdiff+0x10c>)
 800802c:	4602      	mov	r2, r0
 800802e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008032:	e7e5      	b.n	8008000 <__mdiff+0x28>
 8008034:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008038:	6926      	ldr	r6, [r4, #16]
 800803a:	60c5      	str	r5, [r0, #12]
 800803c:	f104 0914 	add.w	r9, r4, #20
 8008040:	f108 0514 	add.w	r5, r8, #20
 8008044:	f100 0e14 	add.w	lr, r0, #20
 8008048:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800804c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008050:	f108 0210 	add.w	r2, r8, #16
 8008054:	46f2      	mov	sl, lr
 8008056:	2100      	movs	r1, #0
 8008058:	f859 3b04 	ldr.w	r3, [r9], #4
 800805c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008060:	fa1f f883 	uxth.w	r8, r3
 8008064:	fa11 f18b 	uxtah	r1, r1, fp
 8008068:	0c1b      	lsrs	r3, r3, #16
 800806a:	eba1 0808 	sub.w	r8, r1, r8
 800806e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008072:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008076:	fa1f f888 	uxth.w	r8, r8
 800807a:	1419      	asrs	r1, r3, #16
 800807c:	454e      	cmp	r6, r9
 800807e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008082:	f84a 3b04 	str.w	r3, [sl], #4
 8008086:	d8e7      	bhi.n	8008058 <__mdiff+0x80>
 8008088:	1b33      	subs	r3, r6, r4
 800808a:	3b15      	subs	r3, #21
 800808c:	f023 0303 	bic.w	r3, r3, #3
 8008090:	3304      	adds	r3, #4
 8008092:	3415      	adds	r4, #21
 8008094:	42a6      	cmp	r6, r4
 8008096:	bf38      	it	cc
 8008098:	2304      	movcc	r3, #4
 800809a:	441d      	add	r5, r3
 800809c:	4473      	add	r3, lr
 800809e:	469e      	mov	lr, r3
 80080a0:	462e      	mov	r6, r5
 80080a2:	4566      	cmp	r6, ip
 80080a4:	d30e      	bcc.n	80080c4 <__mdiff+0xec>
 80080a6:	f10c 0203 	add.w	r2, ip, #3
 80080aa:	1b52      	subs	r2, r2, r5
 80080ac:	f022 0203 	bic.w	r2, r2, #3
 80080b0:	3d03      	subs	r5, #3
 80080b2:	45ac      	cmp	ip, r5
 80080b4:	bf38      	it	cc
 80080b6:	2200      	movcc	r2, #0
 80080b8:	441a      	add	r2, r3
 80080ba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80080be:	b17b      	cbz	r3, 80080e0 <__mdiff+0x108>
 80080c0:	6107      	str	r7, [r0, #16]
 80080c2:	e7a3      	b.n	800800c <__mdiff+0x34>
 80080c4:	f856 8b04 	ldr.w	r8, [r6], #4
 80080c8:	fa11 f288 	uxtah	r2, r1, r8
 80080cc:	1414      	asrs	r4, r2, #16
 80080ce:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80080d2:	b292      	uxth	r2, r2
 80080d4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80080d8:	f84e 2b04 	str.w	r2, [lr], #4
 80080dc:	1421      	asrs	r1, r4, #16
 80080de:	e7e0      	b.n	80080a2 <__mdiff+0xca>
 80080e0:	3f01      	subs	r7, #1
 80080e2:	e7ea      	b.n	80080ba <__mdiff+0xe2>
 80080e4:	08008be0 	.word	0x08008be0
 80080e8:	08008c54 	.word	0x08008c54

080080ec <__d2b>:
 80080ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80080f0:	4689      	mov	r9, r1
 80080f2:	2101      	movs	r1, #1
 80080f4:	ec57 6b10 	vmov	r6, r7, d0
 80080f8:	4690      	mov	r8, r2
 80080fa:	f7ff fccf 	bl	8007a9c <_Balloc>
 80080fe:	4604      	mov	r4, r0
 8008100:	b930      	cbnz	r0, 8008110 <__d2b+0x24>
 8008102:	4602      	mov	r2, r0
 8008104:	4b25      	ldr	r3, [pc, #148]	; (800819c <__d2b+0xb0>)
 8008106:	4826      	ldr	r0, [pc, #152]	; (80081a0 <__d2b+0xb4>)
 8008108:	f240 310a 	movw	r1, #778	; 0x30a
 800810c:	f7fd fcec 	bl	8005ae8 <__assert_func>
 8008110:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008114:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008118:	bb35      	cbnz	r5, 8008168 <__d2b+0x7c>
 800811a:	2e00      	cmp	r6, #0
 800811c:	9301      	str	r3, [sp, #4]
 800811e:	d028      	beq.n	8008172 <__d2b+0x86>
 8008120:	4668      	mov	r0, sp
 8008122:	9600      	str	r6, [sp, #0]
 8008124:	f7ff fd82 	bl	8007c2c <__lo0bits>
 8008128:	9900      	ldr	r1, [sp, #0]
 800812a:	b300      	cbz	r0, 800816e <__d2b+0x82>
 800812c:	9a01      	ldr	r2, [sp, #4]
 800812e:	f1c0 0320 	rsb	r3, r0, #32
 8008132:	fa02 f303 	lsl.w	r3, r2, r3
 8008136:	430b      	orrs	r3, r1
 8008138:	40c2      	lsrs	r2, r0
 800813a:	6163      	str	r3, [r4, #20]
 800813c:	9201      	str	r2, [sp, #4]
 800813e:	9b01      	ldr	r3, [sp, #4]
 8008140:	61a3      	str	r3, [r4, #24]
 8008142:	2b00      	cmp	r3, #0
 8008144:	bf14      	ite	ne
 8008146:	2202      	movne	r2, #2
 8008148:	2201      	moveq	r2, #1
 800814a:	6122      	str	r2, [r4, #16]
 800814c:	b1d5      	cbz	r5, 8008184 <__d2b+0x98>
 800814e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008152:	4405      	add	r5, r0
 8008154:	f8c9 5000 	str.w	r5, [r9]
 8008158:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800815c:	f8c8 0000 	str.w	r0, [r8]
 8008160:	4620      	mov	r0, r4
 8008162:	b003      	add	sp, #12
 8008164:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008168:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800816c:	e7d5      	b.n	800811a <__d2b+0x2e>
 800816e:	6161      	str	r1, [r4, #20]
 8008170:	e7e5      	b.n	800813e <__d2b+0x52>
 8008172:	a801      	add	r0, sp, #4
 8008174:	f7ff fd5a 	bl	8007c2c <__lo0bits>
 8008178:	9b01      	ldr	r3, [sp, #4]
 800817a:	6163      	str	r3, [r4, #20]
 800817c:	2201      	movs	r2, #1
 800817e:	6122      	str	r2, [r4, #16]
 8008180:	3020      	adds	r0, #32
 8008182:	e7e3      	b.n	800814c <__d2b+0x60>
 8008184:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008188:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800818c:	f8c9 0000 	str.w	r0, [r9]
 8008190:	6918      	ldr	r0, [r3, #16]
 8008192:	f7ff fd2b 	bl	8007bec <__hi0bits>
 8008196:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800819a:	e7df      	b.n	800815c <__d2b+0x70>
 800819c:	08008be0 	.word	0x08008be0
 80081a0:	08008c54 	.word	0x08008c54

080081a4 <_calloc_r>:
 80081a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081a6:	fba1 2402 	umull	r2, r4, r1, r2
 80081aa:	b94c      	cbnz	r4, 80081c0 <_calloc_r+0x1c>
 80081ac:	4611      	mov	r1, r2
 80081ae:	9201      	str	r2, [sp, #4]
 80081b0:	f000 f87a 	bl	80082a8 <_malloc_r>
 80081b4:	9a01      	ldr	r2, [sp, #4]
 80081b6:	4605      	mov	r5, r0
 80081b8:	b930      	cbnz	r0, 80081c8 <_calloc_r+0x24>
 80081ba:	4628      	mov	r0, r5
 80081bc:	b003      	add	sp, #12
 80081be:	bd30      	pop	{r4, r5, pc}
 80081c0:	220c      	movs	r2, #12
 80081c2:	6002      	str	r2, [r0, #0]
 80081c4:	2500      	movs	r5, #0
 80081c6:	e7f8      	b.n	80081ba <_calloc_r+0x16>
 80081c8:	4621      	mov	r1, r4
 80081ca:	f7fd fce7 	bl	8005b9c <memset>
 80081ce:	e7f4      	b.n	80081ba <_calloc_r+0x16>

080081d0 <_free_r>:
 80081d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081d2:	2900      	cmp	r1, #0
 80081d4:	d044      	beq.n	8008260 <_free_r+0x90>
 80081d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081da:	9001      	str	r0, [sp, #4]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f1a1 0404 	sub.w	r4, r1, #4
 80081e2:	bfb8      	it	lt
 80081e4:	18e4      	addlt	r4, r4, r3
 80081e6:	f000 fb5d 	bl	80088a4 <__malloc_lock>
 80081ea:	4a1e      	ldr	r2, [pc, #120]	; (8008264 <_free_r+0x94>)
 80081ec:	9801      	ldr	r0, [sp, #4]
 80081ee:	6813      	ldr	r3, [r2, #0]
 80081f0:	b933      	cbnz	r3, 8008200 <_free_r+0x30>
 80081f2:	6063      	str	r3, [r4, #4]
 80081f4:	6014      	str	r4, [r2, #0]
 80081f6:	b003      	add	sp, #12
 80081f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081fc:	f000 bb58 	b.w	80088b0 <__malloc_unlock>
 8008200:	42a3      	cmp	r3, r4
 8008202:	d908      	bls.n	8008216 <_free_r+0x46>
 8008204:	6825      	ldr	r5, [r4, #0]
 8008206:	1961      	adds	r1, r4, r5
 8008208:	428b      	cmp	r3, r1
 800820a:	bf01      	itttt	eq
 800820c:	6819      	ldreq	r1, [r3, #0]
 800820e:	685b      	ldreq	r3, [r3, #4]
 8008210:	1949      	addeq	r1, r1, r5
 8008212:	6021      	streq	r1, [r4, #0]
 8008214:	e7ed      	b.n	80081f2 <_free_r+0x22>
 8008216:	461a      	mov	r2, r3
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	b10b      	cbz	r3, 8008220 <_free_r+0x50>
 800821c:	42a3      	cmp	r3, r4
 800821e:	d9fa      	bls.n	8008216 <_free_r+0x46>
 8008220:	6811      	ldr	r1, [r2, #0]
 8008222:	1855      	adds	r5, r2, r1
 8008224:	42a5      	cmp	r5, r4
 8008226:	d10b      	bne.n	8008240 <_free_r+0x70>
 8008228:	6824      	ldr	r4, [r4, #0]
 800822a:	4421      	add	r1, r4
 800822c:	1854      	adds	r4, r2, r1
 800822e:	42a3      	cmp	r3, r4
 8008230:	6011      	str	r1, [r2, #0]
 8008232:	d1e0      	bne.n	80081f6 <_free_r+0x26>
 8008234:	681c      	ldr	r4, [r3, #0]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	6053      	str	r3, [r2, #4]
 800823a:	4421      	add	r1, r4
 800823c:	6011      	str	r1, [r2, #0]
 800823e:	e7da      	b.n	80081f6 <_free_r+0x26>
 8008240:	d902      	bls.n	8008248 <_free_r+0x78>
 8008242:	230c      	movs	r3, #12
 8008244:	6003      	str	r3, [r0, #0]
 8008246:	e7d6      	b.n	80081f6 <_free_r+0x26>
 8008248:	6825      	ldr	r5, [r4, #0]
 800824a:	1961      	adds	r1, r4, r5
 800824c:	428b      	cmp	r3, r1
 800824e:	bf04      	itt	eq
 8008250:	6819      	ldreq	r1, [r3, #0]
 8008252:	685b      	ldreq	r3, [r3, #4]
 8008254:	6063      	str	r3, [r4, #4]
 8008256:	bf04      	itt	eq
 8008258:	1949      	addeq	r1, r1, r5
 800825a:	6021      	streq	r1, [r4, #0]
 800825c:	6054      	str	r4, [r2, #4]
 800825e:	e7ca      	b.n	80081f6 <_free_r+0x26>
 8008260:	b003      	add	sp, #12
 8008262:	bd30      	pop	{r4, r5, pc}
 8008264:	200003d8 	.word	0x200003d8

08008268 <sbrk_aligned>:
 8008268:	b570      	push	{r4, r5, r6, lr}
 800826a:	4e0e      	ldr	r6, [pc, #56]	; (80082a4 <sbrk_aligned+0x3c>)
 800826c:	460c      	mov	r4, r1
 800826e:	6831      	ldr	r1, [r6, #0]
 8008270:	4605      	mov	r5, r0
 8008272:	b911      	cbnz	r1, 800827a <sbrk_aligned+0x12>
 8008274:	f000 fa16 	bl	80086a4 <_sbrk_r>
 8008278:	6030      	str	r0, [r6, #0]
 800827a:	4621      	mov	r1, r4
 800827c:	4628      	mov	r0, r5
 800827e:	f000 fa11 	bl	80086a4 <_sbrk_r>
 8008282:	1c43      	adds	r3, r0, #1
 8008284:	d00a      	beq.n	800829c <sbrk_aligned+0x34>
 8008286:	1cc4      	adds	r4, r0, #3
 8008288:	f024 0403 	bic.w	r4, r4, #3
 800828c:	42a0      	cmp	r0, r4
 800828e:	d007      	beq.n	80082a0 <sbrk_aligned+0x38>
 8008290:	1a21      	subs	r1, r4, r0
 8008292:	4628      	mov	r0, r5
 8008294:	f000 fa06 	bl	80086a4 <_sbrk_r>
 8008298:	3001      	adds	r0, #1
 800829a:	d101      	bne.n	80082a0 <sbrk_aligned+0x38>
 800829c:	f04f 34ff 	mov.w	r4, #4294967295
 80082a0:	4620      	mov	r0, r4
 80082a2:	bd70      	pop	{r4, r5, r6, pc}
 80082a4:	200003dc 	.word	0x200003dc

080082a8 <_malloc_r>:
 80082a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082ac:	1ccd      	adds	r5, r1, #3
 80082ae:	f025 0503 	bic.w	r5, r5, #3
 80082b2:	3508      	adds	r5, #8
 80082b4:	2d0c      	cmp	r5, #12
 80082b6:	bf38      	it	cc
 80082b8:	250c      	movcc	r5, #12
 80082ba:	2d00      	cmp	r5, #0
 80082bc:	4607      	mov	r7, r0
 80082be:	db01      	blt.n	80082c4 <_malloc_r+0x1c>
 80082c0:	42a9      	cmp	r1, r5
 80082c2:	d905      	bls.n	80082d0 <_malloc_r+0x28>
 80082c4:	230c      	movs	r3, #12
 80082c6:	603b      	str	r3, [r7, #0]
 80082c8:	2600      	movs	r6, #0
 80082ca:	4630      	mov	r0, r6
 80082cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082d0:	4e2e      	ldr	r6, [pc, #184]	; (800838c <_malloc_r+0xe4>)
 80082d2:	f000 fae7 	bl	80088a4 <__malloc_lock>
 80082d6:	6833      	ldr	r3, [r6, #0]
 80082d8:	461c      	mov	r4, r3
 80082da:	bb34      	cbnz	r4, 800832a <_malloc_r+0x82>
 80082dc:	4629      	mov	r1, r5
 80082de:	4638      	mov	r0, r7
 80082e0:	f7ff ffc2 	bl	8008268 <sbrk_aligned>
 80082e4:	1c43      	adds	r3, r0, #1
 80082e6:	4604      	mov	r4, r0
 80082e8:	d14d      	bne.n	8008386 <_malloc_r+0xde>
 80082ea:	6834      	ldr	r4, [r6, #0]
 80082ec:	4626      	mov	r6, r4
 80082ee:	2e00      	cmp	r6, #0
 80082f0:	d140      	bne.n	8008374 <_malloc_r+0xcc>
 80082f2:	6823      	ldr	r3, [r4, #0]
 80082f4:	4631      	mov	r1, r6
 80082f6:	4638      	mov	r0, r7
 80082f8:	eb04 0803 	add.w	r8, r4, r3
 80082fc:	f000 f9d2 	bl	80086a4 <_sbrk_r>
 8008300:	4580      	cmp	r8, r0
 8008302:	d13a      	bne.n	800837a <_malloc_r+0xd2>
 8008304:	6821      	ldr	r1, [r4, #0]
 8008306:	3503      	adds	r5, #3
 8008308:	1a6d      	subs	r5, r5, r1
 800830a:	f025 0503 	bic.w	r5, r5, #3
 800830e:	3508      	adds	r5, #8
 8008310:	2d0c      	cmp	r5, #12
 8008312:	bf38      	it	cc
 8008314:	250c      	movcc	r5, #12
 8008316:	4629      	mov	r1, r5
 8008318:	4638      	mov	r0, r7
 800831a:	f7ff ffa5 	bl	8008268 <sbrk_aligned>
 800831e:	3001      	adds	r0, #1
 8008320:	d02b      	beq.n	800837a <_malloc_r+0xd2>
 8008322:	6823      	ldr	r3, [r4, #0]
 8008324:	442b      	add	r3, r5
 8008326:	6023      	str	r3, [r4, #0]
 8008328:	e00e      	b.n	8008348 <_malloc_r+0xa0>
 800832a:	6822      	ldr	r2, [r4, #0]
 800832c:	1b52      	subs	r2, r2, r5
 800832e:	d41e      	bmi.n	800836e <_malloc_r+0xc6>
 8008330:	2a0b      	cmp	r2, #11
 8008332:	d916      	bls.n	8008362 <_malloc_r+0xba>
 8008334:	1961      	adds	r1, r4, r5
 8008336:	42a3      	cmp	r3, r4
 8008338:	6025      	str	r5, [r4, #0]
 800833a:	bf18      	it	ne
 800833c:	6059      	strne	r1, [r3, #4]
 800833e:	6863      	ldr	r3, [r4, #4]
 8008340:	bf08      	it	eq
 8008342:	6031      	streq	r1, [r6, #0]
 8008344:	5162      	str	r2, [r4, r5]
 8008346:	604b      	str	r3, [r1, #4]
 8008348:	4638      	mov	r0, r7
 800834a:	f104 060b 	add.w	r6, r4, #11
 800834e:	f000 faaf 	bl	80088b0 <__malloc_unlock>
 8008352:	f026 0607 	bic.w	r6, r6, #7
 8008356:	1d23      	adds	r3, r4, #4
 8008358:	1af2      	subs	r2, r6, r3
 800835a:	d0b6      	beq.n	80082ca <_malloc_r+0x22>
 800835c:	1b9b      	subs	r3, r3, r6
 800835e:	50a3      	str	r3, [r4, r2]
 8008360:	e7b3      	b.n	80082ca <_malloc_r+0x22>
 8008362:	6862      	ldr	r2, [r4, #4]
 8008364:	42a3      	cmp	r3, r4
 8008366:	bf0c      	ite	eq
 8008368:	6032      	streq	r2, [r6, #0]
 800836a:	605a      	strne	r2, [r3, #4]
 800836c:	e7ec      	b.n	8008348 <_malloc_r+0xa0>
 800836e:	4623      	mov	r3, r4
 8008370:	6864      	ldr	r4, [r4, #4]
 8008372:	e7b2      	b.n	80082da <_malloc_r+0x32>
 8008374:	4634      	mov	r4, r6
 8008376:	6876      	ldr	r6, [r6, #4]
 8008378:	e7b9      	b.n	80082ee <_malloc_r+0x46>
 800837a:	230c      	movs	r3, #12
 800837c:	603b      	str	r3, [r7, #0]
 800837e:	4638      	mov	r0, r7
 8008380:	f000 fa96 	bl	80088b0 <__malloc_unlock>
 8008384:	e7a1      	b.n	80082ca <_malloc_r+0x22>
 8008386:	6025      	str	r5, [r4, #0]
 8008388:	e7de      	b.n	8008348 <_malloc_r+0xa0>
 800838a:	bf00      	nop
 800838c:	200003d8 	.word	0x200003d8

08008390 <_realloc_r>:
 8008390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008394:	4680      	mov	r8, r0
 8008396:	4614      	mov	r4, r2
 8008398:	460e      	mov	r6, r1
 800839a:	b921      	cbnz	r1, 80083a6 <_realloc_r+0x16>
 800839c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083a0:	4611      	mov	r1, r2
 80083a2:	f7ff bf81 	b.w	80082a8 <_malloc_r>
 80083a6:	b92a      	cbnz	r2, 80083b4 <_realloc_r+0x24>
 80083a8:	f7ff ff12 	bl	80081d0 <_free_r>
 80083ac:	4625      	mov	r5, r4
 80083ae:	4628      	mov	r0, r5
 80083b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083b4:	f000 fa82 	bl	80088bc <_malloc_usable_size_r>
 80083b8:	4284      	cmp	r4, r0
 80083ba:	4607      	mov	r7, r0
 80083bc:	d802      	bhi.n	80083c4 <_realloc_r+0x34>
 80083be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80083c2:	d812      	bhi.n	80083ea <_realloc_r+0x5a>
 80083c4:	4621      	mov	r1, r4
 80083c6:	4640      	mov	r0, r8
 80083c8:	f7ff ff6e 	bl	80082a8 <_malloc_r>
 80083cc:	4605      	mov	r5, r0
 80083ce:	2800      	cmp	r0, #0
 80083d0:	d0ed      	beq.n	80083ae <_realloc_r+0x1e>
 80083d2:	42bc      	cmp	r4, r7
 80083d4:	4622      	mov	r2, r4
 80083d6:	4631      	mov	r1, r6
 80083d8:	bf28      	it	cs
 80083da:	463a      	movcs	r2, r7
 80083dc:	f7ff fb36 	bl	8007a4c <memcpy>
 80083e0:	4631      	mov	r1, r6
 80083e2:	4640      	mov	r0, r8
 80083e4:	f7ff fef4 	bl	80081d0 <_free_r>
 80083e8:	e7e1      	b.n	80083ae <_realloc_r+0x1e>
 80083ea:	4635      	mov	r5, r6
 80083ec:	e7df      	b.n	80083ae <_realloc_r+0x1e>

080083ee <__ssputs_r>:
 80083ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083f2:	688e      	ldr	r6, [r1, #8]
 80083f4:	429e      	cmp	r6, r3
 80083f6:	4682      	mov	sl, r0
 80083f8:	460c      	mov	r4, r1
 80083fa:	4690      	mov	r8, r2
 80083fc:	461f      	mov	r7, r3
 80083fe:	d838      	bhi.n	8008472 <__ssputs_r+0x84>
 8008400:	898a      	ldrh	r2, [r1, #12]
 8008402:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008406:	d032      	beq.n	800846e <__ssputs_r+0x80>
 8008408:	6825      	ldr	r5, [r4, #0]
 800840a:	6909      	ldr	r1, [r1, #16]
 800840c:	eba5 0901 	sub.w	r9, r5, r1
 8008410:	6965      	ldr	r5, [r4, #20]
 8008412:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008416:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800841a:	3301      	adds	r3, #1
 800841c:	444b      	add	r3, r9
 800841e:	106d      	asrs	r5, r5, #1
 8008420:	429d      	cmp	r5, r3
 8008422:	bf38      	it	cc
 8008424:	461d      	movcc	r5, r3
 8008426:	0553      	lsls	r3, r2, #21
 8008428:	d531      	bpl.n	800848e <__ssputs_r+0xa0>
 800842a:	4629      	mov	r1, r5
 800842c:	f7ff ff3c 	bl	80082a8 <_malloc_r>
 8008430:	4606      	mov	r6, r0
 8008432:	b950      	cbnz	r0, 800844a <__ssputs_r+0x5c>
 8008434:	230c      	movs	r3, #12
 8008436:	f8ca 3000 	str.w	r3, [sl]
 800843a:	89a3      	ldrh	r3, [r4, #12]
 800843c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008440:	81a3      	strh	r3, [r4, #12]
 8008442:	f04f 30ff 	mov.w	r0, #4294967295
 8008446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800844a:	6921      	ldr	r1, [r4, #16]
 800844c:	464a      	mov	r2, r9
 800844e:	f7ff fafd 	bl	8007a4c <memcpy>
 8008452:	89a3      	ldrh	r3, [r4, #12]
 8008454:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800845c:	81a3      	strh	r3, [r4, #12]
 800845e:	6126      	str	r6, [r4, #16]
 8008460:	6165      	str	r5, [r4, #20]
 8008462:	444e      	add	r6, r9
 8008464:	eba5 0509 	sub.w	r5, r5, r9
 8008468:	6026      	str	r6, [r4, #0]
 800846a:	60a5      	str	r5, [r4, #8]
 800846c:	463e      	mov	r6, r7
 800846e:	42be      	cmp	r6, r7
 8008470:	d900      	bls.n	8008474 <__ssputs_r+0x86>
 8008472:	463e      	mov	r6, r7
 8008474:	6820      	ldr	r0, [r4, #0]
 8008476:	4632      	mov	r2, r6
 8008478:	4641      	mov	r1, r8
 800847a:	f7ff faf5 	bl	8007a68 <memmove>
 800847e:	68a3      	ldr	r3, [r4, #8]
 8008480:	1b9b      	subs	r3, r3, r6
 8008482:	60a3      	str	r3, [r4, #8]
 8008484:	6823      	ldr	r3, [r4, #0]
 8008486:	4433      	add	r3, r6
 8008488:	6023      	str	r3, [r4, #0]
 800848a:	2000      	movs	r0, #0
 800848c:	e7db      	b.n	8008446 <__ssputs_r+0x58>
 800848e:	462a      	mov	r2, r5
 8008490:	f7ff ff7e 	bl	8008390 <_realloc_r>
 8008494:	4606      	mov	r6, r0
 8008496:	2800      	cmp	r0, #0
 8008498:	d1e1      	bne.n	800845e <__ssputs_r+0x70>
 800849a:	6921      	ldr	r1, [r4, #16]
 800849c:	4650      	mov	r0, sl
 800849e:	f7ff fe97 	bl	80081d0 <_free_r>
 80084a2:	e7c7      	b.n	8008434 <__ssputs_r+0x46>

080084a4 <_svfiprintf_r>:
 80084a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a8:	4698      	mov	r8, r3
 80084aa:	898b      	ldrh	r3, [r1, #12]
 80084ac:	061b      	lsls	r3, r3, #24
 80084ae:	b09d      	sub	sp, #116	; 0x74
 80084b0:	4607      	mov	r7, r0
 80084b2:	460d      	mov	r5, r1
 80084b4:	4614      	mov	r4, r2
 80084b6:	d50e      	bpl.n	80084d6 <_svfiprintf_r+0x32>
 80084b8:	690b      	ldr	r3, [r1, #16]
 80084ba:	b963      	cbnz	r3, 80084d6 <_svfiprintf_r+0x32>
 80084bc:	2140      	movs	r1, #64	; 0x40
 80084be:	f7ff fef3 	bl	80082a8 <_malloc_r>
 80084c2:	6028      	str	r0, [r5, #0]
 80084c4:	6128      	str	r0, [r5, #16]
 80084c6:	b920      	cbnz	r0, 80084d2 <_svfiprintf_r+0x2e>
 80084c8:	230c      	movs	r3, #12
 80084ca:	603b      	str	r3, [r7, #0]
 80084cc:	f04f 30ff 	mov.w	r0, #4294967295
 80084d0:	e0d1      	b.n	8008676 <_svfiprintf_r+0x1d2>
 80084d2:	2340      	movs	r3, #64	; 0x40
 80084d4:	616b      	str	r3, [r5, #20]
 80084d6:	2300      	movs	r3, #0
 80084d8:	9309      	str	r3, [sp, #36]	; 0x24
 80084da:	2320      	movs	r3, #32
 80084dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80084e4:	2330      	movs	r3, #48	; 0x30
 80084e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008690 <_svfiprintf_r+0x1ec>
 80084ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084ee:	f04f 0901 	mov.w	r9, #1
 80084f2:	4623      	mov	r3, r4
 80084f4:	469a      	mov	sl, r3
 80084f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084fa:	b10a      	cbz	r2, 8008500 <_svfiprintf_r+0x5c>
 80084fc:	2a25      	cmp	r2, #37	; 0x25
 80084fe:	d1f9      	bne.n	80084f4 <_svfiprintf_r+0x50>
 8008500:	ebba 0b04 	subs.w	fp, sl, r4
 8008504:	d00b      	beq.n	800851e <_svfiprintf_r+0x7a>
 8008506:	465b      	mov	r3, fp
 8008508:	4622      	mov	r2, r4
 800850a:	4629      	mov	r1, r5
 800850c:	4638      	mov	r0, r7
 800850e:	f7ff ff6e 	bl	80083ee <__ssputs_r>
 8008512:	3001      	adds	r0, #1
 8008514:	f000 80aa 	beq.w	800866c <_svfiprintf_r+0x1c8>
 8008518:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800851a:	445a      	add	r2, fp
 800851c:	9209      	str	r2, [sp, #36]	; 0x24
 800851e:	f89a 3000 	ldrb.w	r3, [sl]
 8008522:	2b00      	cmp	r3, #0
 8008524:	f000 80a2 	beq.w	800866c <_svfiprintf_r+0x1c8>
 8008528:	2300      	movs	r3, #0
 800852a:	f04f 32ff 	mov.w	r2, #4294967295
 800852e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008532:	f10a 0a01 	add.w	sl, sl, #1
 8008536:	9304      	str	r3, [sp, #16]
 8008538:	9307      	str	r3, [sp, #28]
 800853a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800853e:	931a      	str	r3, [sp, #104]	; 0x68
 8008540:	4654      	mov	r4, sl
 8008542:	2205      	movs	r2, #5
 8008544:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008548:	4851      	ldr	r0, [pc, #324]	; (8008690 <_svfiprintf_r+0x1ec>)
 800854a:	f7f7 fe51 	bl	80001f0 <memchr>
 800854e:	9a04      	ldr	r2, [sp, #16]
 8008550:	b9d8      	cbnz	r0, 800858a <_svfiprintf_r+0xe6>
 8008552:	06d0      	lsls	r0, r2, #27
 8008554:	bf44      	itt	mi
 8008556:	2320      	movmi	r3, #32
 8008558:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800855c:	0711      	lsls	r1, r2, #28
 800855e:	bf44      	itt	mi
 8008560:	232b      	movmi	r3, #43	; 0x2b
 8008562:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008566:	f89a 3000 	ldrb.w	r3, [sl]
 800856a:	2b2a      	cmp	r3, #42	; 0x2a
 800856c:	d015      	beq.n	800859a <_svfiprintf_r+0xf6>
 800856e:	9a07      	ldr	r2, [sp, #28]
 8008570:	4654      	mov	r4, sl
 8008572:	2000      	movs	r0, #0
 8008574:	f04f 0c0a 	mov.w	ip, #10
 8008578:	4621      	mov	r1, r4
 800857a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800857e:	3b30      	subs	r3, #48	; 0x30
 8008580:	2b09      	cmp	r3, #9
 8008582:	d94e      	bls.n	8008622 <_svfiprintf_r+0x17e>
 8008584:	b1b0      	cbz	r0, 80085b4 <_svfiprintf_r+0x110>
 8008586:	9207      	str	r2, [sp, #28]
 8008588:	e014      	b.n	80085b4 <_svfiprintf_r+0x110>
 800858a:	eba0 0308 	sub.w	r3, r0, r8
 800858e:	fa09 f303 	lsl.w	r3, r9, r3
 8008592:	4313      	orrs	r3, r2
 8008594:	9304      	str	r3, [sp, #16]
 8008596:	46a2      	mov	sl, r4
 8008598:	e7d2      	b.n	8008540 <_svfiprintf_r+0x9c>
 800859a:	9b03      	ldr	r3, [sp, #12]
 800859c:	1d19      	adds	r1, r3, #4
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	9103      	str	r1, [sp, #12]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	bfbb      	ittet	lt
 80085a6:	425b      	neglt	r3, r3
 80085a8:	f042 0202 	orrlt.w	r2, r2, #2
 80085ac:	9307      	strge	r3, [sp, #28]
 80085ae:	9307      	strlt	r3, [sp, #28]
 80085b0:	bfb8      	it	lt
 80085b2:	9204      	strlt	r2, [sp, #16]
 80085b4:	7823      	ldrb	r3, [r4, #0]
 80085b6:	2b2e      	cmp	r3, #46	; 0x2e
 80085b8:	d10c      	bne.n	80085d4 <_svfiprintf_r+0x130>
 80085ba:	7863      	ldrb	r3, [r4, #1]
 80085bc:	2b2a      	cmp	r3, #42	; 0x2a
 80085be:	d135      	bne.n	800862c <_svfiprintf_r+0x188>
 80085c0:	9b03      	ldr	r3, [sp, #12]
 80085c2:	1d1a      	adds	r2, r3, #4
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	9203      	str	r2, [sp, #12]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	bfb8      	it	lt
 80085cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80085d0:	3402      	adds	r4, #2
 80085d2:	9305      	str	r3, [sp, #20]
 80085d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80086a0 <_svfiprintf_r+0x1fc>
 80085d8:	7821      	ldrb	r1, [r4, #0]
 80085da:	2203      	movs	r2, #3
 80085dc:	4650      	mov	r0, sl
 80085de:	f7f7 fe07 	bl	80001f0 <memchr>
 80085e2:	b140      	cbz	r0, 80085f6 <_svfiprintf_r+0x152>
 80085e4:	2340      	movs	r3, #64	; 0x40
 80085e6:	eba0 000a 	sub.w	r0, r0, sl
 80085ea:	fa03 f000 	lsl.w	r0, r3, r0
 80085ee:	9b04      	ldr	r3, [sp, #16]
 80085f0:	4303      	orrs	r3, r0
 80085f2:	3401      	adds	r4, #1
 80085f4:	9304      	str	r3, [sp, #16]
 80085f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085fa:	4826      	ldr	r0, [pc, #152]	; (8008694 <_svfiprintf_r+0x1f0>)
 80085fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008600:	2206      	movs	r2, #6
 8008602:	f7f7 fdf5 	bl	80001f0 <memchr>
 8008606:	2800      	cmp	r0, #0
 8008608:	d038      	beq.n	800867c <_svfiprintf_r+0x1d8>
 800860a:	4b23      	ldr	r3, [pc, #140]	; (8008698 <_svfiprintf_r+0x1f4>)
 800860c:	bb1b      	cbnz	r3, 8008656 <_svfiprintf_r+0x1b2>
 800860e:	9b03      	ldr	r3, [sp, #12]
 8008610:	3307      	adds	r3, #7
 8008612:	f023 0307 	bic.w	r3, r3, #7
 8008616:	3308      	adds	r3, #8
 8008618:	9303      	str	r3, [sp, #12]
 800861a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800861c:	4433      	add	r3, r6
 800861e:	9309      	str	r3, [sp, #36]	; 0x24
 8008620:	e767      	b.n	80084f2 <_svfiprintf_r+0x4e>
 8008622:	fb0c 3202 	mla	r2, ip, r2, r3
 8008626:	460c      	mov	r4, r1
 8008628:	2001      	movs	r0, #1
 800862a:	e7a5      	b.n	8008578 <_svfiprintf_r+0xd4>
 800862c:	2300      	movs	r3, #0
 800862e:	3401      	adds	r4, #1
 8008630:	9305      	str	r3, [sp, #20]
 8008632:	4619      	mov	r1, r3
 8008634:	f04f 0c0a 	mov.w	ip, #10
 8008638:	4620      	mov	r0, r4
 800863a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800863e:	3a30      	subs	r2, #48	; 0x30
 8008640:	2a09      	cmp	r2, #9
 8008642:	d903      	bls.n	800864c <_svfiprintf_r+0x1a8>
 8008644:	2b00      	cmp	r3, #0
 8008646:	d0c5      	beq.n	80085d4 <_svfiprintf_r+0x130>
 8008648:	9105      	str	r1, [sp, #20]
 800864a:	e7c3      	b.n	80085d4 <_svfiprintf_r+0x130>
 800864c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008650:	4604      	mov	r4, r0
 8008652:	2301      	movs	r3, #1
 8008654:	e7f0      	b.n	8008638 <_svfiprintf_r+0x194>
 8008656:	ab03      	add	r3, sp, #12
 8008658:	9300      	str	r3, [sp, #0]
 800865a:	462a      	mov	r2, r5
 800865c:	4b0f      	ldr	r3, [pc, #60]	; (800869c <_svfiprintf_r+0x1f8>)
 800865e:	a904      	add	r1, sp, #16
 8008660:	4638      	mov	r0, r7
 8008662:	f7fd fc9d 	bl	8005fa0 <_printf_float>
 8008666:	1c42      	adds	r2, r0, #1
 8008668:	4606      	mov	r6, r0
 800866a:	d1d6      	bne.n	800861a <_svfiprintf_r+0x176>
 800866c:	89ab      	ldrh	r3, [r5, #12]
 800866e:	065b      	lsls	r3, r3, #25
 8008670:	f53f af2c 	bmi.w	80084cc <_svfiprintf_r+0x28>
 8008674:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008676:	b01d      	add	sp, #116	; 0x74
 8008678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800867c:	ab03      	add	r3, sp, #12
 800867e:	9300      	str	r3, [sp, #0]
 8008680:	462a      	mov	r2, r5
 8008682:	4b06      	ldr	r3, [pc, #24]	; (800869c <_svfiprintf_r+0x1f8>)
 8008684:	a904      	add	r1, sp, #16
 8008686:	4638      	mov	r0, r7
 8008688:	f7fd ff2e 	bl	80064e8 <_printf_i>
 800868c:	e7eb      	b.n	8008666 <_svfiprintf_r+0x1c2>
 800868e:	bf00      	nop
 8008690:	08008b1c 	.word	0x08008b1c
 8008694:	08008b26 	.word	0x08008b26
 8008698:	08005fa1 	.word	0x08005fa1
 800869c:	080083ef 	.word	0x080083ef
 80086a0:	08008b22 	.word	0x08008b22

080086a4 <_sbrk_r>:
 80086a4:	b538      	push	{r3, r4, r5, lr}
 80086a6:	4d06      	ldr	r5, [pc, #24]	; (80086c0 <_sbrk_r+0x1c>)
 80086a8:	2300      	movs	r3, #0
 80086aa:	4604      	mov	r4, r0
 80086ac:	4608      	mov	r0, r1
 80086ae:	602b      	str	r3, [r5, #0]
 80086b0:	f7f9 fdf0 	bl	8002294 <_sbrk>
 80086b4:	1c43      	adds	r3, r0, #1
 80086b6:	d102      	bne.n	80086be <_sbrk_r+0x1a>
 80086b8:	682b      	ldr	r3, [r5, #0]
 80086ba:	b103      	cbz	r3, 80086be <_sbrk_r+0x1a>
 80086bc:	6023      	str	r3, [r4, #0]
 80086be:	bd38      	pop	{r3, r4, r5, pc}
 80086c0:	200003e0 	.word	0x200003e0

080086c4 <_raise_r>:
 80086c4:	291f      	cmp	r1, #31
 80086c6:	b538      	push	{r3, r4, r5, lr}
 80086c8:	4604      	mov	r4, r0
 80086ca:	460d      	mov	r5, r1
 80086cc:	d904      	bls.n	80086d8 <_raise_r+0x14>
 80086ce:	2316      	movs	r3, #22
 80086d0:	6003      	str	r3, [r0, #0]
 80086d2:	f04f 30ff 	mov.w	r0, #4294967295
 80086d6:	bd38      	pop	{r3, r4, r5, pc}
 80086d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80086da:	b112      	cbz	r2, 80086e2 <_raise_r+0x1e>
 80086dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80086e0:	b94b      	cbnz	r3, 80086f6 <_raise_r+0x32>
 80086e2:	4620      	mov	r0, r4
 80086e4:	f000 f830 	bl	8008748 <_getpid_r>
 80086e8:	462a      	mov	r2, r5
 80086ea:	4601      	mov	r1, r0
 80086ec:	4620      	mov	r0, r4
 80086ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086f2:	f000 b817 	b.w	8008724 <_kill_r>
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d00a      	beq.n	8008710 <_raise_r+0x4c>
 80086fa:	1c59      	adds	r1, r3, #1
 80086fc:	d103      	bne.n	8008706 <_raise_r+0x42>
 80086fe:	2316      	movs	r3, #22
 8008700:	6003      	str	r3, [r0, #0]
 8008702:	2001      	movs	r0, #1
 8008704:	e7e7      	b.n	80086d6 <_raise_r+0x12>
 8008706:	2400      	movs	r4, #0
 8008708:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800870c:	4628      	mov	r0, r5
 800870e:	4798      	blx	r3
 8008710:	2000      	movs	r0, #0
 8008712:	e7e0      	b.n	80086d6 <_raise_r+0x12>

08008714 <raise>:
 8008714:	4b02      	ldr	r3, [pc, #8]	; (8008720 <raise+0xc>)
 8008716:	4601      	mov	r1, r0
 8008718:	6818      	ldr	r0, [r3, #0]
 800871a:	f7ff bfd3 	b.w	80086c4 <_raise_r>
 800871e:	bf00      	nop
 8008720:	20000014 	.word	0x20000014

08008724 <_kill_r>:
 8008724:	b538      	push	{r3, r4, r5, lr}
 8008726:	4d07      	ldr	r5, [pc, #28]	; (8008744 <_kill_r+0x20>)
 8008728:	2300      	movs	r3, #0
 800872a:	4604      	mov	r4, r0
 800872c:	4608      	mov	r0, r1
 800872e:	4611      	mov	r1, r2
 8008730:	602b      	str	r3, [r5, #0]
 8008732:	f7f9 fd27 	bl	8002184 <_kill>
 8008736:	1c43      	adds	r3, r0, #1
 8008738:	d102      	bne.n	8008740 <_kill_r+0x1c>
 800873a:	682b      	ldr	r3, [r5, #0]
 800873c:	b103      	cbz	r3, 8008740 <_kill_r+0x1c>
 800873e:	6023      	str	r3, [r4, #0]
 8008740:	bd38      	pop	{r3, r4, r5, pc}
 8008742:	bf00      	nop
 8008744:	200003e0 	.word	0x200003e0

08008748 <_getpid_r>:
 8008748:	f7f9 bd14 	b.w	8002174 <_getpid>

0800874c <__sread>:
 800874c:	b510      	push	{r4, lr}
 800874e:	460c      	mov	r4, r1
 8008750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008754:	f000 f8ba 	bl	80088cc <_read_r>
 8008758:	2800      	cmp	r0, #0
 800875a:	bfab      	itete	ge
 800875c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800875e:	89a3      	ldrhlt	r3, [r4, #12]
 8008760:	181b      	addge	r3, r3, r0
 8008762:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008766:	bfac      	ite	ge
 8008768:	6563      	strge	r3, [r4, #84]	; 0x54
 800876a:	81a3      	strhlt	r3, [r4, #12]
 800876c:	bd10      	pop	{r4, pc}

0800876e <__swrite>:
 800876e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008772:	461f      	mov	r7, r3
 8008774:	898b      	ldrh	r3, [r1, #12]
 8008776:	05db      	lsls	r3, r3, #23
 8008778:	4605      	mov	r5, r0
 800877a:	460c      	mov	r4, r1
 800877c:	4616      	mov	r6, r2
 800877e:	d505      	bpl.n	800878c <__swrite+0x1e>
 8008780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008784:	2302      	movs	r3, #2
 8008786:	2200      	movs	r2, #0
 8008788:	f000 f868 	bl	800885c <_lseek_r>
 800878c:	89a3      	ldrh	r3, [r4, #12]
 800878e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008792:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008796:	81a3      	strh	r3, [r4, #12]
 8008798:	4632      	mov	r2, r6
 800879a:	463b      	mov	r3, r7
 800879c:	4628      	mov	r0, r5
 800879e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087a2:	f000 b817 	b.w	80087d4 <_write_r>

080087a6 <__sseek>:
 80087a6:	b510      	push	{r4, lr}
 80087a8:	460c      	mov	r4, r1
 80087aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087ae:	f000 f855 	bl	800885c <_lseek_r>
 80087b2:	1c43      	adds	r3, r0, #1
 80087b4:	89a3      	ldrh	r3, [r4, #12]
 80087b6:	bf15      	itete	ne
 80087b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80087ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80087be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80087c2:	81a3      	strheq	r3, [r4, #12]
 80087c4:	bf18      	it	ne
 80087c6:	81a3      	strhne	r3, [r4, #12]
 80087c8:	bd10      	pop	{r4, pc}

080087ca <__sclose>:
 80087ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087ce:	f000 b813 	b.w	80087f8 <_close_r>
	...

080087d4 <_write_r>:
 80087d4:	b538      	push	{r3, r4, r5, lr}
 80087d6:	4d07      	ldr	r5, [pc, #28]	; (80087f4 <_write_r+0x20>)
 80087d8:	4604      	mov	r4, r0
 80087da:	4608      	mov	r0, r1
 80087dc:	4611      	mov	r1, r2
 80087de:	2200      	movs	r2, #0
 80087e0:	602a      	str	r2, [r5, #0]
 80087e2:	461a      	mov	r2, r3
 80087e4:	f7f9 fd05 	bl	80021f2 <_write>
 80087e8:	1c43      	adds	r3, r0, #1
 80087ea:	d102      	bne.n	80087f2 <_write_r+0x1e>
 80087ec:	682b      	ldr	r3, [r5, #0]
 80087ee:	b103      	cbz	r3, 80087f2 <_write_r+0x1e>
 80087f0:	6023      	str	r3, [r4, #0]
 80087f2:	bd38      	pop	{r3, r4, r5, pc}
 80087f4:	200003e0 	.word	0x200003e0

080087f8 <_close_r>:
 80087f8:	b538      	push	{r3, r4, r5, lr}
 80087fa:	4d06      	ldr	r5, [pc, #24]	; (8008814 <_close_r+0x1c>)
 80087fc:	2300      	movs	r3, #0
 80087fe:	4604      	mov	r4, r0
 8008800:	4608      	mov	r0, r1
 8008802:	602b      	str	r3, [r5, #0]
 8008804:	f7f9 fd11 	bl	800222a <_close>
 8008808:	1c43      	adds	r3, r0, #1
 800880a:	d102      	bne.n	8008812 <_close_r+0x1a>
 800880c:	682b      	ldr	r3, [r5, #0]
 800880e:	b103      	cbz	r3, 8008812 <_close_r+0x1a>
 8008810:	6023      	str	r3, [r4, #0]
 8008812:	bd38      	pop	{r3, r4, r5, pc}
 8008814:	200003e0 	.word	0x200003e0

08008818 <_fstat_r>:
 8008818:	b538      	push	{r3, r4, r5, lr}
 800881a:	4d07      	ldr	r5, [pc, #28]	; (8008838 <_fstat_r+0x20>)
 800881c:	2300      	movs	r3, #0
 800881e:	4604      	mov	r4, r0
 8008820:	4608      	mov	r0, r1
 8008822:	4611      	mov	r1, r2
 8008824:	602b      	str	r3, [r5, #0]
 8008826:	f7f9 fd0c 	bl	8002242 <_fstat>
 800882a:	1c43      	adds	r3, r0, #1
 800882c:	d102      	bne.n	8008834 <_fstat_r+0x1c>
 800882e:	682b      	ldr	r3, [r5, #0]
 8008830:	b103      	cbz	r3, 8008834 <_fstat_r+0x1c>
 8008832:	6023      	str	r3, [r4, #0]
 8008834:	bd38      	pop	{r3, r4, r5, pc}
 8008836:	bf00      	nop
 8008838:	200003e0 	.word	0x200003e0

0800883c <_isatty_r>:
 800883c:	b538      	push	{r3, r4, r5, lr}
 800883e:	4d06      	ldr	r5, [pc, #24]	; (8008858 <_isatty_r+0x1c>)
 8008840:	2300      	movs	r3, #0
 8008842:	4604      	mov	r4, r0
 8008844:	4608      	mov	r0, r1
 8008846:	602b      	str	r3, [r5, #0]
 8008848:	f7f9 fd0b 	bl	8002262 <_isatty>
 800884c:	1c43      	adds	r3, r0, #1
 800884e:	d102      	bne.n	8008856 <_isatty_r+0x1a>
 8008850:	682b      	ldr	r3, [r5, #0]
 8008852:	b103      	cbz	r3, 8008856 <_isatty_r+0x1a>
 8008854:	6023      	str	r3, [r4, #0]
 8008856:	bd38      	pop	{r3, r4, r5, pc}
 8008858:	200003e0 	.word	0x200003e0

0800885c <_lseek_r>:
 800885c:	b538      	push	{r3, r4, r5, lr}
 800885e:	4d07      	ldr	r5, [pc, #28]	; (800887c <_lseek_r+0x20>)
 8008860:	4604      	mov	r4, r0
 8008862:	4608      	mov	r0, r1
 8008864:	4611      	mov	r1, r2
 8008866:	2200      	movs	r2, #0
 8008868:	602a      	str	r2, [r5, #0]
 800886a:	461a      	mov	r2, r3
 800886c:	f7f9 fd04 	bl	8002278 <_lseek>
 8008870:	1c43      	adds	r3, r0, #1
 8008872:	d102      	bne.n	800887a <_lseek_r+0x1e>
 8008874:	682b      	ldr	r3, [r5, #0]
 8008876:	b103      	cbz	r3, 800887a <_lseek_r+0x1e>
 8008878:	6023      	str	r3, [r4, #0]
 800887a:	bd38      	pop	{r3, r4, r5, pc}
 800887c:	200003e0 	.word	0x200003e0

08008880 <__ascii_mbtowc>:
 8008880:	b082      	sub	sp, #8
 8008882:	b901      	cbnz	r1, 8008886 <__ascii_mbtowc+0x6>
 8008884:	a901      	add	r1, sp, #4
 8008886:	b142      	cbz	r2, 800889a <__ascii_mbtowc+0x1a>
 8008888:	b14b      	cbz	r3, 800889e <__ascii_mbtowc+0x1e>
 800888a:	7813      	ldrb	r3, [r2, #0]
 800888c:	600b      	str	r3, [r1, #0]
 800888e:	7812      	ldrb	r2, [r2, #0]
 8008890:	1e10      	subs	r0, r2, #0
 8008892:	bf18      	it	ne
 8008894:	2001      	movne	r0, #1
 8008896:	b002      	add	sp, #8
 8008898:	4770      	bx	lr
 800889a:	4610      	mov	r0, r2
 800889c:	e7fb      	b.n	8008896 <__ascii_mbtowc+0x16>
 800889e:	f06f 0001 	mvn.w	r0, #1
 80088a2:	e7f8      	b.n	8008896 <__ascii_mbtowc+0x16>

080088a4 <__malloc_lock>:
 80088a4:	4801      	ldr	r0, [pc, #4]	; (80088ac <__malloc_lock+0x8>)
 80088a6:	f7ff b862 	b.w	800796e <__retarget_lock_acquire_recursive>
 80088aa:	bf00      	nop
 80088ac:	200003d4 	.word	0x200003d4

080088b0 <__malloc_unlock>:
 80088b0:	4801      	ldr	r0, [pc, #4]	; (80088b8 <__malloc_unlock+0x8>)
 80088b2:	f7ff b85d 	b.w	8007970 <__retarget_lock_release_recursive>
 80088b6:	bf00      	nop
 80088b8:	200003d4 	.word	0x200003d4

080088bc <_malloc_usable_size_r>:
 80088bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088c0:	1f18      	subs	r0, r3, #4
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	bfbc      	itt	lt
 80088c6:	580b      	ldrlt	r3, [r1, r0]
 80088c8:	18c0      	addlt	r0, r0, r3
 80088ca:	4770      	bx	lr

080088cc <_read_r>:
 80088cc:	b538      	push	{r3, r4, r5, lr}
 80088ce:	4d07      	ldr	r5, [pc, #28]	; (80088ec <_read_r+0x20>)
 80088d0:	4604      	mov	r4, r0
 80088d2:	4608      	mov	r0, r1
 80088d4:	4611      	mov	r1, r2
 80088d6:	2200      	movs	r2, #0
 80088d8:	602a      	str	r2, [r5, #0]
 80088da:	461a      	mov	r2, r3
 80088dc:	f7f9 fc6c 	bl	80021b8 <_read>
 80088e0:	1c43      	adds	r3, r0, #1
 80088e2:	d102      	bne.n	80088ea <_read_r+0x1e>
 80088e4:	682b      	ldr	r3, [r5, #0]
 80088e6:	b103      	cbz	r3, 80088ea <_read_r+0x1e>
 80088e8:	6023      	str	r3, [r4, #0]
 80088ea:	bd38      	pop	{r3, r4, r5, pc}
 80088ec:	200003e0 	.word	0x200003e0

080088f0 <__ascii_wctomb>:
 80088f0:	b149      	cbz	r1, 8008906 <__ascii_wctomb+0x16>
 80088f2:	2aff      	cmp	r2, #255	; 0xff
 80088f4:	bf85      	ittet	hi
 80088f6:	238a      	movhi	r3, #138	; 0x8a
 80088f8:	6003      	strhi	r3, [r0, #0]
 80088fa:	700a      	strbls	r2, [r1, #0]
 80088fc:	f04f 30ff 	movhi.w	r0, #4294967295
 8008900:	bf98      	it	ls
 8008902:	2001      	movls	r0, #1
 8008904:	4770      	bx	lr
 8008906:	4608      	mov	r0, r1
 8008908:	4770      	bx	lr
	...

0800890c <_init>:
 800890c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800890e:	bf00      	nop
 8008910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008912:	bc08      	pop	{r3}
 8008914:	469e      	mov	lr, r3
 8008916:	4770      	bx	lr

08008918 <_fini>:
 8008918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800891a:	bf00      	nop
 800891c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800891e:	bc08      	pop	{r3}
 8008920:	469e      	mov	lr, r3
 8008922:	4770      	bx	lr
